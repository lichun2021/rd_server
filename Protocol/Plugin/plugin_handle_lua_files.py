# coding:UTF-8
import time
import sys
import os
import re
from optparse import OptionParser

reload(sys)
sys.setdefaultencoding('utf-8')

gen_lua_file_first_line = '-- Generated By protoc-gen-lua Do not Edit\n'
gen_lua_folder_name = 'new_lua_pb'


def print_log(*args):
    time_str = time.strftime('%Y-%m-%d_%H%M%S', time.localtime(time.time()))
    sys.stdout.write('[' + time_str + ']')
    sys.stdout.write(" ".join(args))
    sys.stdout.write("\n")
    sys.stdout.flush()


def end_with(*end_string):
    ends = end_string

    def run(s):
        f = map(s.endswith, ends)
        if True in f:
            return s
    return run


def replace_whole_word(ori_str, word_to_find, replacement):
    regex_str = r'(\b)' + word_to_find + r'(\b)'
    regex_info = re.compile(regex_str)
    result, number = regex_info.subn(replacement, ori_str)
    # result = ori_str.replace(word_to_find, replacement)
    return result


def create_new_file(file_path, force=True):
    force_status = 'true'
    if not force:
        force_status = 'false'
    print_log('begin create_new_file:' + file_path + ' ;force status:' + force_status)
    try:
        if os.path.isfile(file_path):
            if force:
                print_log("rm file path = " + file_path)
                os.remove(file_path)
                f = open(file_path, 'w')
                f.close()
        else:
            file_folder = os.path.dirname(file_path)
            if not os.path.isdir(file_folder):
                print_log('make dir :' + file_folder)
                os.mkdir(file_folder)
            f = open(file_path, 'w')
            f.close()
    except Exception, e:
        exit(e)


def handle_lua_file(folder_path, lua_file, is_single = False):
    print_log('--------------- handle_lua_file func handle_lua_files_in_folder begin ------------------')

    if is_single:
        lua_file += '_pb.lua'

    print_log('lua_folder:' + folder_path)
    print_log('lua_file:' + lua_file)
    lua_file_path = os.path.join(folder_path, lua_file)
    lua_new_file_path = os.path.join(folder_path, gen_lua_folder_name)
    lua_new_file_path = os.path.join(lua_new_file_path, lua_file)
    if os.path.isfile(lua_file_path):
        try:
            with open(lua_file_path, 'r+') as file_orig_content:
                file_lines = file_orig_content.readlines()
            if file_lines[0] != gen_lua_file_first_line:
                print_log('lua_file:' + lua_file + ' not lua pb file')
                return
            table_name = lua_file.split('_')[0] + '_Local_Var_Table'
            file_lines[0] = file_lines[0] + '\n\nlocal ' + table_name + ' = {}\n\n'

            # find 'protobuf.Message'
            message_name_list = []
            for index, one_line in enumerate(file_lines):
                if one_line.startswith('local ') \
                        and (one_line.endswith(' = protobuf.Descriptor();\n') or
                             one_line.endswith(' = protobuf.FieldDescriptor();\n') or
                             one_line.endswith('protobuf.EnumDescriptor();\n') or
                             one_line.endswith(' = protobuf.EnumValueDescriptor();\n')):
                    # find str in ()
                    begin_tag = 'local '
                    end_tag = ' = protobuf.'
                    begin_tag_index = one_line.find(begin_tag)
                    if begin_tag_index == -1:
                        print_log('find line:' + one_line + '\n there is no:' + begin_tag)
                        return

                    # last half of line
                    part2 = one_line[begin_tag_index+len(begin_tag):]
                    end_tag_index = part2.find(end_tag)
                    if begin_tag_index == -1:
                        print_log('find part2:' + part2 + '\n there is no:' + end_tag)
                        return

                    # get msg name
                    message_name = part2[0:end_tag_index]
                    message_name_list.append(message_name)

            # find protobuf.Descriptor();
            for index, one_line in enumerate(file_lines):
                if one_line.startswith('local ') \
                        and (one_line.endswith(' = protobuf.Descriptor();\n') or
                             one_line.endswith(' = protobuf.FieldDescriptor();\n') or
                             one_line.endswith(' = protobuf.EnumDescriptor();\n') or
                             one_line.endswith(' = protobuf.EnumValueDescriptor();\n')):
                    file_lines[index] = one_line.replace('local ', '')

            # find protobuf.Descriptor();
            for index, one_line in enumerate(file_lines):
                for name_index, message_name in enumerate(message_name_list):
                    if one_line.find(message_name) != -1:
                        file_lines[index] = replace_whole_word(file_lines[index], message_name, table_name + '.' + message_name)

            create_new_file(lua_new_file_path)
            with open(lua_new_file_path, 'w+') as lua_handle:
                lua_handle.writelines(file_lines)

        except Exception, e:
            exit(e)


def handle_lua_files_in_folder(folder_path):
    print_log('--------------- plugin_handle_lua_files func handle_lua_files_in_folder begin ------------------')
    if os.path.isdir(folder_path):
        print_log('handle folder :' + folder_path)
        list_lua_file = os.listdir(folder_path)
        handle_func = end_with('.lua')
        filter_file_list = filter(handle_func, list_lua_file)
        for lua_file in filter_file_list:
            print_log('handle lua file:' + lua_file + '\n')
            handle_lua_file(folder_path, lua_file)
    else:
        print_log('arg :' + folder_path + ' is not a folder')


def main():
    usage = 'usage: %prog [-f <folder_path>] [-t <file_name>]'
    parser = OptionParser(usage)
    parser.add_option('-f', '--folder_path', dest='folder_path', help='目标文件夹')
    parser.add_option('-t', '--file_name', dest='file_name', help='目标文件')

    (options, args) = parser.parse_args()

    if options.folder_path is None:
        exit('build mast input platform index...')

    if options.file_name is None:
        target_folder = options.folder_path
        handle_lua_files_in_folder(target_folder)
    else:
        target_folder = options.folder_path
        target_file = options.file_name
        handle_lua_file(target_folder, target_file, True)


if __name__ == '__main__':
    print_log('------------------------------ plugin_handle_lua_files begin ----------------------------------------')
    main()
    print_log('------------------------------ plugin_handle_lua_files end ----------------------------------------')
