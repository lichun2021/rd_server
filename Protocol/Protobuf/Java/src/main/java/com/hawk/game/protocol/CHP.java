// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CHP.proto

package com.hawk.game.protocol;

public final class CHP {
  private CHP() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code code}
   *
   * <pre>
   * 从100000开始使用
   * </pre>
   */
  public enum code
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ENTER_CROSS = 100001;</code>
     *
     * <pre>
     *玩家进入跨服
     * </pre>
     */
    ENTER_CROSS(0, 100001),
    /**
     * <code>EXIT_CORSS = 100002;</code>
     *
     * <pre>
     *玩家退出跨服.
     * </pre>
     */
    EXIT_CORSS(1, 100002),
    /**
     * <code>INNER_LOGOUT = 100003;</code>
     *
     * <pre>
     *玩家退出(在玩家掉线的时候 A-&gt;B)
     * </pre>
     */
    INNER_LOGOUT(2, 100003),
    /**
     * <code>INNER_BACK_SERVER = 100004;</code>
     *
     * <pre>
     *回到本服(玩家在A服点击退出之后B处理完,再发此协议回A)
     * </pre>
     */
    INNER_BACK_SERVER(3, 100004),
    /**
     * <code>CROSS_SERVER_LIST_REQ = 100006;</code>
     *
     * <pre>
     *请求当前可以跨服的列表
     * </pre>
     */
    CROSS_SERVER_LIST_REQ(4, 100006),
    /**
     * <code>CROSS_SERVER_LIST_RESP = 100007;</code>
     *
     * <pre>
     *返回当前服可以跨服的列表
     * </pre>
     */
    CROSS_SERVER_LIST_RESP(5, 100007),
    /**
     * <code>INNER_ENTER_CROSS_REQ = 100008;</code>
     *
     * <pre>
     *请求跨服
     * </pre>
     */
    INNER_ENTER_CROSS_REQ(6, 100008),
    /**
     * <code>INNER_ENTER_CROSS_RESP = 100009;</code>
     *
     * <pre>
     *请求跨服返回值.
     * </pre>
     */
    INNER_ENTER_CROSS_RESP(7, 100009),
    /**
     * <code>ON_SPY_REQ = 100010;</code>
     *
     * <pre>
     *请求当前可以跨服的列表
     * </pre>
     */
    ON_SPY_REQ(8, 100010),
    /**
     * <code>ON_SPY_RESP = 100011;</code>
     *
     * <pre>
     *返回当前服可以跨服的列表
     * </pre>
     */
    ON_SPY_RESP(9, 100011),
    /**
     * <code>CROSS_BEGIN = 100012;</code>
     *
     * <pre>
     *跨服开始
     * </pre>
     */
    CROSS_BEGIN(10, 100012),
    /**
     * <code>CROSS_FINISH = 100013;</code>
     *
     * <pre>
     *跨服完成
     * </pre>
     */
    CROSS_FINISH(11, 100013),
    /**
     * <code>CROSS_BACK_BEGIN = 100014;</code>
     *
     * <pre>
     *跨服返回开始
     * </pre>
     */
    CROSS_BACK_BEGIN(12, 100014),
    /**
     * <code>CROSS_BACK_FINISH = 100015;</code>
     *
     * <pre>
     *跨服返回完成
     * </pre>
     */
    CROSS_BACK_FINISH(13, 100015),
    /**
     * <code>CROSS_MOVE_BACK = 100016;</code>
     *
     * <pre>
     *强制签回	
     * </pre>
     */
    CROSS_MOVE_BACK(14, 100016),
    /**
     * <code>INNER_COMMON_BACK_SERVER_REQ = 100017;</code>
     *
     * <pre>
     *通用的从跨服回到原服协议.	
     * </pre>
     */
    INNER_COMMON_BACK_SERVER_REQ(15, 100017),
    /**
     * <code>COMMON_CROSS_BEGIN = 100021;</code>
     *
     * <pre>
     *通用跨服开始
     * </pre>
     */
    COMMON_CROSS_BEGIN(16, 100021),
    /**
     * <code>COMMON_CROSS_SIMULATE_BEGIN = 100022;</code>
     *
     * <pre>
     *通用跨服模拟开始.
     * </pre>
     */
    COMMON_CROSS_SIMULATE_BEGIN(17, 100022),
    /**
     * <code>COMMON_CROSS_BACK_FINISH = 100023;</code>
     *
     * <pre>
     *通用跨服返回.
     * </pre>
     */
    COMMON_CROSS_BACK_FINISH(18, 100023),
    /**
     * <code>COMMON_CROSS_SIMULATE_BACK_FINISH = 100024;</code>
     *
     * <pre>
     *通用跨服返回.
     * </pre>
     */
    COMMON_CROSS_SIMULATE_BACK_FINISH(19, 100024),
    /**
     * <code>CROSS_STATE_INFO_SYNC = 100100;</code>
     *
     * <pre>
     ****************100100-100200跨服活动*****************
     * </pre>
     */
    CROSS_STATE_INFO_SYNC(20, 100100),
    /**
     * <code>CROSS_ACHIEVE_INFO_SYNC = 100102;</code>
     *
     * <pre>
     * 同步跨服活动成就信息
     * </pre>
     */
    CROSS_ACHIEVE_INFO_SYNC(21, 100102),
    /**
     * <code>CROSS_RESULT_SYNC = 100104;</code>
     *
     * <pre>
     * 同步跨服活动结果信息
     * </pre>
     */
    CROSS_RESULT_SYNC(22, 100104),
    /**
     * <code>CROSS_GET_PAGE_INFO_C = 100110;</code>
     *
     * <pre>
     * 获取跨服活动界面信息
     * </pre>
     */
    CROSS_GET_PAGE_INFO_C(23, 100110),
    /**
     * <code>CROSS_GET_PAGE_INFO_S = 100111;</code>
     */
    CROSS_GET_PAGE_INFO_S(24, 100111),
    /**
     * <code>CROSS_GET_RANK_INFO_C = 100112;</code>
     *
     * <pre>
     * 获取跨服活动排行信息
     * </pre>
     */
    CROSS_GET_RANK_INFO_C(25, 100112),
    /**
     * <code>CROSS_GET_RANK_INFO_S = 100113;</code>
     */
    CROSS_GET_RANK_INFO_S(26, 100113),
    /**
     * <code>CROSS_GET_ACHIEVE_REWARD_C = 100114;</code>
     *
     * <pre>
     * 领取跨服活动成就奖励
     * </pre>
     */
    CROSS_GET_ACHIEVE_REWARD_C(27, 100114),
    /**
     * <code>CROSS_DDZY_TEAM_MATCHING_REQ = 100201;</code>
     *
     * <pre>
     *达雅之战匹配
     * </pre>
     */
    CROSS_DDZY_TEAM_MATCHING_REQ(28, 100201),
    /**
     * <code>CROSS_DDZY_CANCEL_TEAM_MATCHING_REQ = 100202;</code>
     *
     * <pre>
     *达雅之战取消匹配
     * </pre>
     */
    CROSS_DDZY_CANCEL_TEAM_MATCHING_REQ(29, 100202),
    /**
     * <code>CROSS_DDZY_TEAM_MATCHING_STATE_RESP = 100203;</code>
     *
     * <pre>
     *达雅之战队伍状态同步
     * </pre>
     */
    CROSS_DDZY_TEAM_MATCHING_STATE_RESP(30, 100203),
    /**
     * <code>CROSS_DDZY_WAR_FINISH = 100204;</code>
     *
     * <pre>
     *达雅之战打完收工
     * </pre>
     */
    CROSS_DDZY_WAR_FINISH(31, 100204),
    /**
     * <code>YQZZ_FIRST_CONTROL_MAIL = 100205;</code>
     *
     * <pre>
     * 建筑首战发奖励给跨服本服 
     * </pre>
     */
    YQZZ_FIRST_CONTROL_MAIL(32, 100205),
    /**
     * <code>CROSS_CHANGE_TECH_VALUE = 100206;</code>
     *
     * <pre>
     * 跨服修改国家科技值
     * </pre>
     */
    CROSS_CHANGE_TECH_VALUE(33, 100206),
    /**
     * <code>CROSS_NATATION_TECH_SKILL_USE = 100207;</code>
     *
     * <pre>
     * 跨服使用国家技能
     * </pre>
     */
    CROSS_NATATION_TECH_SKILL_USE(34, 100207),
    /**
     * <code>YQZZ_GIVEUP_BUILD_MAIL_REQ = 100211;</code>
     *
     * <pre>
     * 放弃建筑邮件
     * </pre>
     */
    YQZZ_GIVEUP_BUILD_MAIL_REQ(35, 100211),
    /**
     * <code>NEW_START_CS_INFO_REQ = 100221;</code>
     *
     * <pre>
     *跨服请求玩家信息
     * </pre>
     */
    NEW_START_CS_INFO_REQ(36, 100221),
    /**
     * <code>NEW_START_CS_INFO_RESP = 100222;</code>
     *
     * <pre>
     *跨服返回玩家信息
     * </pre>
     */
    NEW_START_CS_INFO_RESP(37, 100222),
    /**
     * <code>XQHX_DATA_UPDATE = 100260;</code>
     *
     * <pre>
     **************************先驱回响******************************
     * </pre>
     */
    XQHX_DATA_UPDATE(38, 100260),
    ;

    /**
     * <code>ENTER_CROSS = 100001;</code>
     *
     * <pre>
     *玩家进入跨服
     * </pre>
     */
    public static final int ENTER_CROSS_VALUE = 100001;
    /**
     * <code>EXIT_CORSS = 100002;</code>
     *
     * <pre>
     *玩家退出跨服.
     * </pre>
     */
    public static final int EXIT_CORSS_VALUE = 100002;
    /**
     * <code>INNER_LOGOUT = 100003;</code>
     *
     * <pre>
     *玩家退出(在玩家掉线的时候 A-&gt;B)
     * </pre>
     */
    public static final int INNER_LOGOUT_VALUE = 100003;
    /**
     * <code>INNER_BACK_SERVER = 100004;</code>
     *
     * <pre>
     *回到本服(玩家在A服点击退出之后B处理完,再发此协议回A)
     * </pre>
     */
    public static final int INNER_BACK_SERVER_VALUE = 100004;
    /**
     * <code>CROSS_SERVER_LIST_REQ = 100006;</code>
     *
     * <pre>
     *请求当前可以跨服的列表
     * </pre>
     */
    public static final int CROSS_SERVER_LIST_REQ_VALUE = 100006;
    /**
     * <code>CROSS_SERVER_LIST_RESP = 100007;</code>
     *
     * <pre>
     *返回当前服可以跨服的列表
     * </pre>
     */
    public static final int CROSS_SERVER_LIST_RESP_VALUE = 100007;
    /**
     * <code>INNER_ENTER_CROSS_REQ = 100008;</code>
     *
     * <pre>
     *请求跨服
     * </pre>
     */
    public static final int INNER_ENTER_CROSS_REQ_VALUE = 100008;
    /**
     * <code>INNER_ENTER_CROSS_RESP = 100009;</code>
     *
     * <pre>
     *请求跨服返回值.
     * </pre>
     */
    public static final int INNER_ENTER_CROSS_RESP_VALUE = 100009;
    /**
     * <code>ON_SPY_REQ = 100010;</code>
     *
     * <pre>
     *请求当前可以跨服的列表
     * </pre>
     */
    public static final int ON_SPY_REQ_VALUE = 100010;
    /**
     * <code>ON_SPY_RESP = 100011;</code>
     *
     * <pre>
     *返回当前服可以跨服的列表
     * </pre>
     */
    public static final int ON_SPY_RESP_VALUE = 100011;
    /**
     * <code>CROSS_BEGIN = 100012;</code>
     *
     * <pre>
     *跨服开始
     * </pre>
     */
    public static final int CROSS_BEGIN_VALUE = 100012;
    /**
     * <code>CROSS_FINISH = 100013;</code>
     *
     * <pre>
     *跨服完成
     * </pre>
     */
    public static final int CROSS_FINISH_VALUE = 100013;
    /**
     * <code>CROSS_BACK_BEGIN = 100014;</code>
     *
     * <pre>
     *跨服返回开始
     * </pre>
     */
    public static final int CROSS_BACK_BEGIN_VALUE = 100014;
    /**
     * <code>CROSS_BACK_FINISH = 100015;</code>
     *
     * <pre>
     *跨服返回完成
     * </pre>
     */
    public static final int CROSS_BACK_FINISH_VALUE = 100015;
    /**
     * <code>CROSS_MOVE_BACK = 100016;</code>
     *
     * <pre>
     *强制签回	
     * </pre>
     */
    public static final int CROSS_MOVE_BACK_VALUE = 100016;
    /**
     * <code>INNER_COMMON_BACK_SERVER_REQ = 100017;</code>
     *
     * <pre>
     *通用的从跨服回到原服协议.	
     * </pre>
     */
    public static final int INNER_COMMON_BACK_SERVER_REQ_VALUE = 100017;
    /**
     * <code>COMMON_CROSS_BEGIN = 100021;</code>
     *
     * <pre>
     *通用跨服开始
     * </pre>
     */
    public static final int COMMON_CROSS_BEGIN_VALUE = 100021;
    /**
     * <code>COMMON_CROSS_SIMULATE_BEGIN = 100022;</code>
     *
     * <pre>
     *通用跨服模拟开始.
     * </pre>
     */
    public static final int COMMON_CROSS_SIMULATE_BEGIN_VALUE = 100022;
    /**
     * <code>COMMON_CROSS_BACK_FINISH = 100023;</code>
     *
     * <pre>
     *通用跨服返回.
     * </pre>
     */
    public static final int COMMON_CROSS_BACK_FINISH_VALUE = 100023;
    /**
     * <code>COMMON_CROSS_SIMULATE_BACK_FINISH = 100024;</code>
     *
     * <pre>
     *通用跨服返回.
     * </pre>
     */
    public static final int COMMON_CROSS_SIMULATE_BACK_FINISH_VALUE = 100024;
    /**
     * <code>CROSS_STATE_INFO_SYNC = 100100;</code>
     *
     * <pre>
     ****************100100-100200跨服活动*****************
     * </pre>
     */
    public static final int CROSS_STATE_INFO_SYNC_VALUE = 100100;
    /**
     * <code>CROSS_ACHIEVE_INFO_SYNC = 100102;</code>
     *
     * <pre>
     * 同步跨服活动成就信息
     * </pre>
     */
    public static final int CROSS_ACHIEVE_INFO_SYNC_VALUE = 100102;
    /**
     * <code>CROSS_RESULT_SYNC = 100104;</code>
     *
     * <pre>
     * 同步跨服活动结果信息
     * </pre>
     */
    public static final int CROSS_RESULT_SYNC_VALUE = 100104;
    /**
     * <code>CROSS_GET_PAGE_INFO_C = 100110;</code>
     *
     * <pre>
     * 获取跨服活动界面信息
     * </pre>
     */
    public static final int CROSS_GET_PAGE_INFO_C_VALUE = 100110;
    /**
     * <code>CROSS_GET_PAGE_INFO_S = 100111;</code>
     */
    public static final int CROSS_GET_PAGE_INFO_S_VALUE = 100111;
    /**
     * <code>CROSS_GET_RANK_INFO_C = 100112;</code>
     *
     * <pre>
     * 获取跨服活动排行信息
     * </pre>
     */
    public static final int CROSS_GET_RANK_INFO_C_VALUE = 100112;
    /**
     * <code>CROSS_GET_RANK_INFO_S = 100113;</code>
     */
    public static final int CROSS_GET_RANK_INFO_S_VALUE = 100113;
    /**
     * <code>CROSS_GET_ACHIEVE_REWARD_C = 100114;</code>
     *
     * <pre>
     * 领取跨服活动成就奖励
     * </pre>
     */
    public static final int CROSS_GET_ACHIEVE_REWARD_C_VALUE = 100114;
    /**
     * <code>CROSS_DDZY_TEAM_MATCHING_REQ = 100201;</code>
     *
     * <pre>
     *达雅之战匹配
     * </pre>
     */
    public static final int CROSS_DDZY_TEAM_MATCHING_REQ_VALUE = 100201;
    /**
     * <code>CROSS_DDZY_CANCEL_TEAM_MATCHING_REQ = 100202;</code>
     *
     * <pre>
     *达雅之战取消匹配
     * </pre>
     */
    public static final int CROSS_DDZY_CANCEL_TEAM_MATCHING_REQ_VALUE = 100202;
    /**
     * <code>CROSS_DDZY_TEAM_MATCHING_STATE_RESP = 100203;</code>
     *
     * <pre>
     *达雅之战队伍状态同步
     * </pre>
     */
    public static final int CROSS_DDZY_TEAM_MATCHING_STATE_RESP_VALUE = 100203;
    /**
     * <code>CROSS_DDZY_WAR_FINISH = 100204;</code>
     *
     * <pre>
     *达雅之战打完收工
     * </pre>
     */
    public static final int CROSS_DDZY_WAR_FINISH_VALUE = 100204;
    /**
     * <code>YQZZ_FIRST_CONTROL_MAIL = 100205;</code>
     *
     * <pre>
     * 建筑首战发奖励给跨服本服 
     * </pre>
     */
    public static final int YQZZ_FIRST_CONTROL_MAIL_VALUE = 100205;
    /**
     * <code>CROSS_CHANGE_TECH_VALUE = 100206;</code>
     *
     * <pre>
     * 跨服修改国家科技值
     * </pre>
     */
    public static final int CROSS_CHANGE_TECH_VALUE_VALUE = 100206;
    /**
     * <code>CROSS_NATATION_TECH_SKILL_USE = 100207;</code>
     *
     * <pre>
     * 跨服使用国家技能
     * </pre>
     */
    public static final int CROSS_NATATION_TECH_SKILL_USE_VALUE = 100207;
    /**
     * <code>YQZZ_GIVEUP_BUILD_MAIL_REQ = 100211;</code>
     *
     * <pre>
     * 放弃建筑邮件
     * </pre>
     */
    public static final int YQZZ_GIVEUP_BUILD_MAIL_REQ_VALUE = 100211;
    /**
     * <code>NEW_START_CS_INFO_REQ = 100221;</code>
     *
     * <pre>
     *跨服请求玩家信息
     * </pre>
     */
    public static final int NEW_START_CS_INFO_REQ_VALUE = 100221;
    /**
     * <code>NEW_START_CS_INFO_RESP = 100222;</code>
     *
     * <pre>
     *跨服返回玩家信息
     * </pre>
     */
    public static final int NEW_START_CS_INFO_RESP_VALUE = 100222;
    /**
     * <code>XQHX_DATA_UPDATE = 100260;</code>
     *
     * <pre>
     **************************先驱回响******************************
     * </pre>
     */
    public static final int XQHX_DATA_UPDATE_VALUE = 100260;


    public final int getNumber() { return value; }

    public static code valueOf(int value) {
      switch (value) {
        case 100001: return ENTER_CROSS;
        case 100002: return EXIT_CORSS;
        case 100003: return INNER_LOGOUT;
        case 100004: return INNER_BACK_SERVER;
        case 100006: return CROSS_SERVER_LIST_REQ;
        case 100007: return CROSS_SERVER_LIST_RESP;
        case 100008: return INNER_ENTER_CROSS_REQ;
        case 100009: return INNER_ENTER_CROSS_RESP;
        case 100010: return ON_SPY_REQ;
        case 100011: return ON_SPY_RESP;
        case 100012: return CROSS_BEGIN;
        case 100013: return CROSS_FINISH;
        case 100014: return CROSS_BACK_BEGIN;
        case 100015: return CROSS_BACK_FINISH;
        case 100016: return CROSS_MOVE_BACK;
        case 100017: return INNER_COMMON_BACK_SERVER_REQ;
        case 100021: return COMMON_CROSS_BEGIN;
        case 100022: return COMMON_CROSS_SIMULATE_BEGIN;
        case 100023: return COMMON_CROSS_BACK_FINISH;
        case 100024: return COMMON_CROSS_SIMULATE_BACK_FINISH;
        case 100100: return CROSS_STATE_INFO_SYNC;
        case 100102: return CROSS_ACHIEVE_INFO_SYNC;
        case 100104: return CROSS_RESULT_SYNC;
        case 100110: return CROSS_GET_PAGE_INFO_C;
        case 100111: return CROSS_GET_PAGE_INFO_S;
        case 100112: return CROSS_GET_RANK_INFO_C;
        case 100113: return CROSS_GET_RANK_INFO_S;
        case 100114: return CROSS_GET_ACHIEVE_REWARD_C;
        case 100201: return CROSS_DDZY_TEAM_MATCHING_REQ;
        case 100202: return CROSS_DDZY_CANCEL_TEAM_MATCHING_REQ;
        case 100203: return CROSS_DDZY_TEAM_MATCHING_STATE_RESP;
        case 100204: return CROSS_DDZY_WAR_FINISH;
        case 100205: return YQZZ_FIRST_CONTROL_MAIL;
        case 100206: return CROSS_CHANGE_TECH_VALUE;
        case 100207: return CROSS_NATATION_TECH_SKILL_USE;
        case 100211: return YQZZ_GIVEUP_BUILD_MAIL_REQ;
        case 100221: return NEW_START_CS_INFO_REQ;
        case 100222: return NEW_START_CS_INFO_RESP;
        case 100260: return XQHX_DATA_UPDATE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<code>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<code>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<code>() {
            public code findValueByNumber(int number) {
              return code.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.hawk.game.protocol.CHP.getDescriptor().getEnumTypes().get(0);
    }

    private static final code[] VALUES = values();

    public static code valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private code(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:code)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\tCHP.proto*\346\010\n\004code\022\021\n\013ENTER_CROSS\020\241\215\006\022" +
      "\020\n\nEXIT_CORSS\020\242\215\006\022\022\n\014INNER_LOGOUT\020\243\215\006\022\027\n" +
      "\021INNER_BACK_SERVER\020\244\215\006\022\033\n\025CROSS_SERVER_L" +
      "IST_REQ\020\246\215\006\022\034\n\026CROSS_SERVER_LIST_RESP\020\247\215" +
      "\006\022\033\n\025INNER_ENTER_CROSS_REQ\020\250\215\006\022\034\n\026INNER_" +
      "ENTER_CROSS_RESP\020\251\215\006\022\020\n\nON_SPY_REQ\020\252\215\006\022\021" +
      "\n\013ON_SPY_RESP\020\253\215\006\022\021\n\013CROSS_BEGIN\020\254\215\006\022\022\n\014" +
      "CROSS_FINISH\020\255\215\006\022\026\n\020CROSS_BACK_BEGIN\020\256\215\006" +
      "\022\027\n\021CROSS_BACK_FINISH\020\257\215\006\022\025\n\017CROSS_MOVE_" +
      "BACK\020\260\215\006\022\"\n\034INNER_COMMON_BACK_SERVER_REQ",
      "\020\261\215\006\022\030\n\022COMMON_CROSS_BEGIN\020\265\215\006\022!\n\033COMMON" +
      "_CROSS_SIMULATE_BEGIN\020\266\215\006\022\036\n\030COMMON_CROS" +
      "S_BACK_FINISH\020\267\215\006\022\'\n!COMMON_CROSS_SIMULA" +
      "TE_BACK_FINISH\020\270\215\006\022\033\n\025CROSS_STATE_INFO_S" +
      "YNC\020\204\216\006\022\035\n\027CROSS_ACHIEVE_INFO_SYNC\020\206\216\006\022\027" +
      "\n\021CROSS_RESULT_SYNC\020\210\216\006\022\033\n\025CROSS_GET_PAG" +
      "E_INFO_C\020\216\216\006\022\033\n\025CROSS_GET_PAGE_INFO_S\020\217\216" +
      "\006\022\033\n\025CROSS_GET_RANK_INFO_C\020\220\216\006\022\033\n\025CROSS_" +
      "GET_RANK_INFO_S\020\221\216\006\022 \n\032CROSS_GET_ACHIEVE" +
      "_REWARD_C\020\222\216\006\022\"\n\034CROSS_DDZY_TEAM_MATCHIN",
      "G_REQ\020\351\216\006\022)\n#CROSS_DDZY_CANCEL_TEAM_MATC" +
      "HING_REQ\020\352\216\006\022)\n#CROSS_DDZY_TEAM_MATCHING" +
      "_STATE_RESP\020\353\216\006\022\033\n\025CROSS_DDZY_WAR_FINISH" +
      "\020\354\216\006\022\035\n\027YQZZ_FIRST_CONTROL_MAIL\020\355\216\006\022\035\n\027C" +
      "ROSS_CHANGE_TECH_VALUE\020\356\216\006\022#\n\035CROSS_NATA" +
      "TION_TECH_SKILL_USE\020\357\216\006\022 \n\032YQZZ_GIVEUP_B" +
      "UILD_MAIL_REQ\020\363\216\006\022\033\n\025NEW_START_CS_INFO_R" +
      "EQ\020\375\216\006\022\034\n\026NEW_START_CS_INFO_RESP\020\376\216\006\022\026\n\020" +
      "XQHX_DATA_UPDATE\020\244\217\006B\030\n\026com.hawk.game.pr" +
      "otocol"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
