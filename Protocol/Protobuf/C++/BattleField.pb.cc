// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleField.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BattleField.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CastSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CastSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnitDamage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnitDamage_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleTroop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleTroop_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeployUnitData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeployUnitData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveOrAttackOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveOrAttackOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* UINotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UINotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleTickParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleTickParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlyAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlyAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlyAttackAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlyAttackAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlideAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlideAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttackAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttackAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillCastAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillCastAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffAttachAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffAttachAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffRemoveAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffRemoveAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffAffectAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffAffectAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReviveAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReviveAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* DisappearAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DisappearAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeadAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeadAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* WarningAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarningAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* FinishAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FinishAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveDataUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveDataUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlyAttackDataUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlyAttackDataUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* StateDataUpdateAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateDataUpdateAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* BusyAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BusyAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeTroopAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeTroopAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeExtendStateAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeExtendStateAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleBulletin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleBulletin_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderAStarPath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderAStarPath_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderTargetPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderTargetPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* TriggerActionToLua_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TriggerActionToLua_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BattleVersion_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BattleType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResultType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BattleError_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BattleControlMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ActionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BusyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UnitExtendState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_BattleField_2eproto() {
  protobuf_AddDesc_BattleField_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BattleField.proto");
  GOOGLE_CHECK(file != NULL);
  CastSkill_descriptor_ = file->message_type(0);
  static const int CastSkill_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastSkill, unitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastSkill, casttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastSkill, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastSkill, targetpos_),
  };
  CastSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CastSkill_descriptor_,
      CastSkill::default_instance_,
      CastSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CastSkill));
  BattleConfig_descriptor_ = file->message_type(1);
  static const int BattleConfig_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, battletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, randseed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, tickperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, missionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, difficultyper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, trigger_conf_prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, deftargetitems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, timelimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, debugmode_),
  };
  BattleConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleConfig_descriptor_,
      BattleConfig::default_instance_,
      BattleConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleConfig));
  UnitDamage_descriptor_ = file->message_type(2);
  static const int UnitDamage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitDamage, unitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitDamage, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitDamage, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitDamage, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitDamage, type_),
  };
  UnitDamage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnitDamage_descriptor_,
      UnitDamage::default_instance_,
      UnitDamage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitDamage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitDamage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnitDamage));
  BattleTroop_descriptor_ = file->message_type(3);
  static const int BattleTroop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleTroop, units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleTroop, deploypos_),
  };
  BattleTroop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleTroop_descriptor_,
      BattleTroop::default_instance_,
      BattleTroop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleTroop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleTroop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleTroop));
  BattleParams_descriptor_ = file->message_type(4);
  static const int BattleParams_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleParams, cfg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleParams, attacker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleParams, defender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleParams, castskills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleParams, controlmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleParams, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleParams, waitingdeploylist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleParams, extparams_),
  };
  BattleParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleParams_descriptor_,
      BattleParams::default_instance_,
      BattleParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleParams));
  DeployUnitData_descriptor_ = file->message_type(5);
  static const int DeployUnitData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeployUnitData, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeployUnitData, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeployUnitData, unitpos_),
  };
  DeployUnitData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeployUnitData_descriptor_,
      DeployUnitData::default_instance_,
      DeployUnitData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeployUnitData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeployUnitData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeployUnitData));
  MoveOrAttackOrder_descriptor_ = file->message_type(6);
  static const int MoveOrAttackOrder_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveOrAttackOrder, orderunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveOrAttackOrder, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveOrAttackOrder, movepos_),
  };
  MoveOrAttackOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveOrAttackOrder_descriptor_,
      MoveOrAttackOrder::default_instance_,
      MoveOrAttackOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveOrAttackOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveOrAttackOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveOrAttackOrder));
  UserOrder_descriptor_ = file->message_type(7);
  static const int UserOrder_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOrder, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOrder, orderlist_),
  };
  UserOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserOrder_descriptor_,
      UserOrder::default_instance_,
      UserOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserOrder));
  UINotification_descriptor_ = file->message_type(8);
  static const int UINotification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UINotification, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UINotification, params_),
  };
  UINotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UINotification_descriptor_,
      UINotification::default_instance_,
      UINotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UINotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UINotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UINotification));
  BattleTickParams_descriptor_ = file->message_type(9);
  static const int BattleTickParams_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleTickParams, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleTickParams, period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleTickParams, tickrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleTickParams, controlmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleTickParams, userorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleTickParams, notifications_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleTickParams, castskills_),
  };
  BattleTickParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleTickParams_descriptor_,
      BattleTickParams::default_instance_,
      BattleTickParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleTickParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleTickParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleTickParams));
  InitAction_descriptor_ = file->message_type(10);
  static const int InitAction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitAction, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitAction, unithp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitAction, hp_),
  };
  InitAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitAction_descriptor_,
      InitAction::default_instance_,
      InitAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitAction));
  MoveAction_descriptor_ = file->message_type(11);
  static const int MoveAction_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveAction, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveAction, curpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveAction, movepos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveAction, movedir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveAction, moveperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveAction, turnperiod_),
  };
  MoveAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveAction_descriptor_,
      MoveAction::default_instance_,
      MoveAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveAction));
  FlyAction_descriptor_ = file->message_type(12);
  static const int FlyAction_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlyAction, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlyAction, frompos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlyAction, targetpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlyAction, flytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlyAction, flydist_),
  };
  FlyAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlyAction_descriptor_,
      FlyAction::default_instance_,
      FlyAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlyAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlyAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlyAction));
  FlyAttackAction_descriptor_ = file->message_type(13);
  static const int FlyAttackAction_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlyAttackAction, frompos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlyAttackAction, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlyAttackAction, targetpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlyAttackAction, flytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlyAttackAction, flydist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlyAttackAction, flybackpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlyAttackAction, flybacktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlyAttackAction, flybackdist_),
  };
  FlyAttackAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlyAttackAction_descriptor_,
      FlyAttackAction::default_instance_,
      FlyAttackAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlyAttackAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlyAttackAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlyAttackAction));
  GlideAction_descriptor_ = file->message_type(14);
  static const int GlideAction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlideAction, glidetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlideAction, glidepos_),
  };
  GlideAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlideAction_descriptor_,
      GlideAction::default_instance_,
      GlideAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlideAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlideAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlideAction));
  StopAction_descriptor_ = file->message_type(15);
  static const int StopAction_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopAction, curpos_),
  };
  StopAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopAction_descriptor_,
      StopAction::default_instance_,
      StopAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopAction));
  AttackAction_descriptor_ = file->message_type(16);
  static const int AttackAction_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackAction, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackAction, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackAction, bullettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackAction, targetpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackAction, damage_),
  };
  AttackAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttackAction_descriptor_,
      AttackAction::default_instance_,
      AttackAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttackAction));
  SkillCastAction_descriptor_ = file->message_type(17);
  static const int SkillCastAction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCastAction, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCastAction, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCastAction, targetpos_),
  };
  SkillCastAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillCastAction_descriptor_,
      SkillCastAction::default_instance_,
      SkillCastAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCastAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCastAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillCastAction));
  BuffAttachAction_descriptor_ = file->message_type(18);
  static const int BuffAttachAction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffAttachAction, buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffAttachAction, period_),
  };
  BuffAttachAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffAttachAction_descriptor_,
      BuffAttachAction::default_instance_,
      BuffAttachAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffAttachAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffAttachAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffAttachAction));
  BuffRemoveAction_descriptor_ = file->message_type(19);
  static const int BuffRemoveAction_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffRemoveAction, buff_),
  };
  BuffRemoveAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffRemoveAction_descriptor_,
      BuffRemoveAction::default_instance_,
      BuffRemoveAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffRemoveAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffRemoveAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffRemoveAction));
  BuffAffectAction_descriptor_ = file->message_type(20);
  static const int BuffAffectAction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffAffectAction, buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffAffectAction, damage_),
  };
  BuffAffectAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffAffectAction_descriptor_,
      BuffAffectAction::default_instance_,
      BuffAffectAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffAffectAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffAffectAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffAffectAction));
  ReviveAction_descriptor_ = file->message_type(21);
  static const int ReviveAction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReviveAction, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReviveAction, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReviveAction, hp_),
  };
  ReviveAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReviveAction_descriptor_,
      ReviveAction::default_instance_,
      ReviveAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReviveAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReviveAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReviveAction));
  CreateData_descriptor_ = file->message_type(22);
  static const int CreateData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateData, unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateData, targetpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateData, targetunit_),
  };
  CreateData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateData_descriptor_,
      CreateData::default_instance_,
      CreateData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateData));
  CreateAction_descriptor_ = file->message_type(23);
  static const int CreateAction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAction, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAction, data_),
  };
  CreateAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateAction_descriptor_,
      CreateAction::default_instance_,
      CreateAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateAction));
  DisappearAction_descriptor_ = file->message_type(24);
  static const int DisappearAction_offsets_[1] = {
  };
  DisappearAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DisappearAction_descriptor_,
      DisappearAction::default_instance_,
      DisappearAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisappearAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisappearAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DisappearAction));
  DeadAction_descriptor_ = file->message_type(25);
  static const int DeadAction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadAction, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadAction, hp_),
  };
  DeadAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeadAction_descriptor_,
      DeadAction::default_instance_,
      DeadAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeadAction));
  WarningAction_descriptor_ = file->message_type(26);
  static const int WarningAction_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningAction, trooptype_),
  };
  WarningAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarningAction_descriptor_,
      WarningAction::default_instance_,
      WarningAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarningAction));
  FinishAction_descriptor_ = file->message_type(27);
  static const int FinishAction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishAction, wintroop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishAction, castskills_),
  };
  FinishAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FinishAction_descriptor_,
      FinishAction::default_instance_,
      FinishAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FinishAction));
  MoveDataUpdate_descriptor_ = file->message_type(28);
  static const int MoveDataUpdate_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDataUpdate, movetargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDataUpdate, movetargetpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDataUpdate, movedir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDataUpdate, moveperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDataUpdate, forwardtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDataUpdate, turnperiod_),
  };
  MoveDataUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveDataUpdate_descriptor_,
      MoveDataUpdate::default_instance_,
      MoveDataUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDataUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDataUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveDataUpdate));
  FlyAttackDataUpdate_descriptor_ = file->message_type(29);
  static const int FlyAttackDataUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlyAttackDataUpdate, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlyAttackDataUpdate, targetpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlyAttackDataUpdate, damage_),
  };
  FlyAttackDataUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlyAttackDataUpdate_descriptor_,
      FlyAttackDataUpdate::default_instance_,
      FlyAttackDataUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlyAttackDataUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlyAttackDataUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlyAttackDataUpdate));
  StateDataUpdateAction_descriptor_ = file->message_type(30);
  static const int StateDataUpdateAction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateDataUpdateAction, updateaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateDataUpdateAction, movedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateDataUpdateAction, flyattackdata_),
  };
  StateDataUpdateAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StateDataUpdateAction_descriptor_,
      StateDataUpdateAction::default_instance_,
      StateDataUpdateAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateDataUpdateAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateDataUpdateAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StateDataUpdateAction));
  BusyAction_descriptor_ = file->message_type(31);
  static const int BusyAction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusyAction, busytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusyAction, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusyAction, extparams_),
  };
  BusyAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BusyAction_descriptor_,
      BusyAction::default_instance_,
      BusyAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusyAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusyAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BusyAction));
  ChangeTroopAction_descriptor_ = file->message_type(32);
  static const int ChangeTroopAction_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTroopAction, trooptype_),
  };
  ChangeTroopAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeTroopAction_descriptor_,
      ChangeTroopAction::default_instance_,
      ChangeTroopAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTroopAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTroopAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeTroopAction));
  ChangeExtendStateAction_descriptor_ = file->message_type(33);
  static const int ChangeExtendStateAction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeExtendStateAction, esfprev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeExtendStateAction, esfnew_),
  };
  ChangeExtendStateAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeExtendStateAction_descriptor_,
      ChangeExtendStateAction::default_instance_,
      ChangeExtendStateAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeExtendStateAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeExtendStateAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeExtendStateAction));
  BattleAction_descriptor_ = file->message_type(34);
  static const int BattleAction_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleAction, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleAction, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleAction, unitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleAction, init_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleAction, move_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleAction, fly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleAction, flyattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleAction, attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleAction, stop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleAction, dead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleAction, buffattach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleAction, buffremove_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleAction, buffaffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleAction, disappear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleAction, create_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleAction, finish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleAction, skillcast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleAction, revive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleAction, glide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleAction, warning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleAction, busy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleAction, changetroop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleAction, statedataupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleAction, changeextendstate_),
  };
  BattleAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleAction_descriptor_,
      BattleAction::default_instance_,
      BattleAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleAction));
  BattleDetail_descriptor_ = file->message_type(35);
  static const int BattleDetail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleDetail, actions_),
  };
  BattleDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleDetail_descriptor_,
      BattleDetail::default_instance_,
      BattleDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleDetail));
  BattleBulletin_descriptor_ = file->message_type(36);
  static const int BattleBulletin_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleBulletin, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleBulletin, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleBulletin, calctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleBulletin, battletime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleBulletin, attacker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleBulletin, defender_),
  };
  BattleBulletin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleBulletin_descriptor_,
      BattleBulletin::default_instance_,
      BattleBulletin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleBulletin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleBulletin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleBulletin));
  OrderAStarPath_descriptor_ = file->message_type(37);
  static const int OrderAStarPath_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderAStarPath, orderunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderAStarPath, isattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderAStarPath, nodelist_),
  };
  OrderAStarPath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderAStarPath_descriptor_,
      OrderAStarPath::default_instance_,
      OrderAStarPath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderAStarPath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderAStarPath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderAStarPath));
  OrderTargetPos_descriptor_ = file->message_type(38);
  static const int OrderTargetPos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderTargetPos, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderTargetPos, targetpos_),
  };
  OrderTargetPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderTargetPos_descriptor_,
      OrderTargetPos::default_instance_,
      OrderTargetPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderTargetPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderTargetPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderTargetPos));
  TriggerActionToLua_descriptor_ = file->message_type(39);
  static const int TriggerActionToLua_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerActionToLua, actionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerActionToLua, actiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerActionToLua, actionparam_),
  };
  TriggerActionToLua_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TriggerActionToLua_descriptor_,
      TriggerActionToLua::default_instance_,
      TriggerActionToLua_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerActionToLua, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerActionToLua, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TriggerActionToLua));
  BattleResult_descriptor_ = file->message_type(40);
  static const int BattleResult_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResult, gamestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResult, detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResult, bulletin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResult, targetinvulnerable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResult, triggeractionlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResult, orderpathlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResult, ordertargetposlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResult, finishedorderlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResult, debuginfo_),
  };
  BattleResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleResult_descriptor_,
      BattleResult::default_instance_,
      BattleResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleResult));
  BattleVersion_descriptor_ = file->enum_type(0);
  BattleType_descriptor_ = file->enum_type(1);
  ResultType_descriptor_ = file->enum_type(2);
  BattleError_descriptor_ = file->enum_type(3);
  BattleControlMode_descriptor_ = file->enum_type(4);
  ActionType_descriptor_ = file->enum_type(5);
  BusyType_descriptor_ = file->enum_type(6);
  UnitExtendState_descriptor_ = file->enum_type(7);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BattleField_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CastSkill_descriptor_, &CastSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleConfig_descriptor_, &BattleConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnitDamage_descriptor_, &UnitDamage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleTroop_descriptor_, &BattleTroop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleParams_descriptor_, &BattleParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeployUnitData_descriptor_, &DeployUnitData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveOrAttackOrder_descriptor_, &MoveOrAttackOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserOrder_descriptor_, &UserOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UINotification_descriptor_, &UINotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleTickParams_descriptor_, &BattleTickParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitAction_descriptor_, &InitAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveAction_descriptor_, &MoveAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlyAction_descriptor_, &FlyAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlyAttackAction_descriptor_, &FlyAttackAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlideAction_descriptor_, &GlideAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopAction_descriptor_, &StopAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttackAction_descriptor_, &AttackAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillCastAction_descriptor_, &SkillCastAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffAttachAction_descriptor_, &BuffAttachAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffRemoveAction_descriptor_, &BuffRemoveAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffAffectAction_descriptor_, &BuffAffectAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReviveAction_descriptor_, &ReviveAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateData_descriptor_, &CreateData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateAction_descriptor_, &CreateAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DisappearAction_descriptor_, &DisappearAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeadAction_descriptor_, &DeadAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarningAction_descriptor_, &WarningAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FinishAction_descriptor_, &FinishAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveDataUpdate_descriptor_, &MoveDataUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlyAttackDataUpdate_descriptor_, &FlyAttackDataUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StateDataUpdateAction_descriptor_, &StateDataUpdateAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BusyAction_descriptor_, &BusyAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeTroopAction_descriptor_, &ChangeTroopAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeExtendStateAction_descriptor_, &ChangeExtendStateAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleAction_descriptor_, &BattleAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleDetail_descriptor_, &BattleDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleBulletin_descriptor_, &BattleBulletin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderAStarPath_descriptor_, &OrderAStarPath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderTargetPos_descriptor_, &OrderTargetPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TriggerActionToLua_descriptor_, &TriggerActionToLua::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleResult_descriptor_, &BattleResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BattleField_2eproto() {
  delete CastSkill::default_instance_;
  delete CastSkill_reflection_;
  delete BattleConfig::default_instance_;
  delete BattleConfig_reflection_;
  delete UnitDamage::default_instance_;
  delete UnitDamage_reflection_;
  delete BattleTroop::default_instance_;
  delete BattleTroop_reflection_;
  delete BattleParams::default_instance_;
  delete BattleParams_reflection_;
  delete DeployUnitData::default_instance_;
  delete DeployUnitData_reflection_;
  delete MoveOrAttackOrder::default_instance_;
  delete MoveOrAttackOrder_reflection_;
  delete UserOrder::default_instance_;
  delete UserOrder_reflection_;
  delete UINotification::default_instance_;
  delete UINotification_reflection_;
  delete BattleTickParams::default_instance_;
  delete BattleTickParams_reflection_;
  delete InitAction::default_instance_;
  delete InitAction_reflection_;
  delete MoveAction::default_instance_;
  delete MoveAction_reflection_;
  delete FlyAction::default_instance_;
  delete FlyAction_reflection_;
  delete FlyAttackAction::default_instance_;
  delete FlyAttackAction_reflection_;
  delete GlideAction::default_instance_;
  delete GlideAction_reflection_;
  delete StopAction::default_instance_;
  delete StopAction_reflection_;
  delete AttackAction::default_instance_;
  delete AttackAction_reflection_;
  delete SkillCastAction::default_instance_;
  delete SkillCastAction_reflection_;
  delete BuffAttachAction::default_instance_;
  delete BuffAttachAction_reflection_;
  delete BuffRemoveAction::default_instance_;
  delete BuffRemoveAction_reflection_;
  delete BuffAffectAction::default_instance_;
  delete BuffAffectAction_reflection_;
  delete ReviveAction::default_instance_;
  delete ReviveAction_reflection_;
  delete CreateData::default_instance_;
  delete CreateData_reflection_;
  delete CreateAction::default_instance_;
  delete CreateAction_reflection_;
  delete DisappearAction::default_instance_;
  delete DisappearAction_reflection_;
  delete DeadAction::default_instance_;
  delete DeadAction_reflection_;
  delete WarningAction::default_instance_;
  delete WarningAction_reflection_;
  delete FinishAction::default_instance_;
  delete FinishAction_reflection_;
  delete MoveDataUpdate::default_instance_;
  delete MoveDataUpdate_reflection_;
  delete FlyAttackDataUpdate::default_instance_;
  delete FlyAttackDataUpdate_reflection_;
  delete StateDataUpdateAction::default_instance_;
  delete StateDataUpdateAction_reflection_;
  delete BusyAction::default_instance_;
  delete BusyAction_reflection_;
  delete ChangeTroopAction::default_instance_;
  delete ChangeTroopAction_reflection_;
  delete ChangeExtendStateAction::default_instance_;
  delete ChangeExtendStateAction_reflection_;
  delete BattleAction::default_instance_;
  delete BattleAction_reflection_;
  delete BattleDetail::default_instance_;
  delete BattleDetail_reflection_;
  delete BattleBulletin::default_instance_;
  delete BattleBulletin_reflection_;
  delete OrderAStarPath::default_instance_;
  delete OrderAStarPath_reflection_;
  delete OrderTargetPos::default_instance_;
  delete OrderTargetPos_reflection_;
  delete TriggerActionToLua::default_instance_;
  delete TriggerActionToLua_reflection_;
  delete BattleResult::default_instance_;
  delete BattleResult_reflection_;
}

void protobuf_AddDesc_BattleField_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_BattleCfg_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021BattleField.proto\032\017BattleCfg.proto\"m\n\t"
    "CastSkill\022\016\n\006unitId\030\001 \002(\005\022\017\n\007skillId\030\002 \002"
    "(\005\022\020\n\010castTime\030\003 \002(\005\022\020\n\010targetId\030\004 \001(\005\022\033"
    "\n\ttargetPos\030\005 \001(\0132\010.UnitPos\"\377\001\n\014BattleCo"
    "nfig\022\017\n\007version\030\001 \002(\005\022\022\n\nbattleType\030\002 \002("
    "\005\022\020\n\010randSeed\030\003 \001(\005\022\022\n\ntickPeriod\030\004 \001(\005\022"
    "\021\n\tmissionId\030\005 \001(\005\022\025\n\rdifficultyPer\030\006 \001("
    "\005\022\r\n\005mapId\030\007 \001(\005\022\033\n\023trigger_conf_prefix\030"
    "\010 \001(\t\022\020\n\010playerId\030\n \001(\t\022\026\n\016defTargetItem"
    "s\030\013 \003(\005\022\021\n\ttimeLimit\030\014 \001(\005\022\021\n\tdebugMode\030"
    "\024 \001(\005\"U\n\nUnitDamage\022\016\n\006unitId\030\001 \002(\005\022\r\n\005c"
    "ount\030\002 \002(\005\022\n\n\002hp\030\003 \002(\005\022\016\n\006damage\030\004 \002(\005\022\014"
    "\n\004type\030\005 \001(\005\"D\n\013BattleTroop\022\030\n\005units\030\001 \003"
    "(\0132\t.UnitData\022\033\n\tdeployPos\030\002 \001(\0132\010.UnitP"
    "os\"\337\001\n\014BattleParams\022\032\n\003cfg\030\001 \002(\0132\r.Battl"
    "eConfig\022\036\n\010attacker\030\002 \001(\0132\014.BattleTroop\022"
    "\036\n\010defender\030\003 \001(\0132\014.BattleTroop\022\036\n\ncastS"
    "kills\030\004 \003(\0132\n.CastSkill\022\023\n\013controlMode\030\005"
    " \001(\005\022\020\n\010battleId\030\006 \001(\t\022\031\n\021waitingDeployL"
    "ist\030\007 \003(\005\022\021\n\textParams\030\n \001(\014\"J\n\016DeployUn"
    "itData\022\016\n\006itemId\030\001 \002(\005\022\r\n\005count\030\002 \002(\005\022\031\n"
    "\007unitPos\030\003 \002(\0132\010.UnitPos\"U\n\021MoveOrAttack"
    "Order\022\023\n\013orderUnitId\030\001 \002(\005\022\020\n\010targetId\030\002"
    " \001(\005\022\031\n\007movePos\030\003 \001(\0132\010.UnitPos\"C\n\tUserO"
    "rder\022\017\n\007orderId\030\001 \002(\005\022%\n\torderList\030\002 \003(\013"
    "2\022.MoveOrAttackOrder\".\n\016UINotification\022\014"
    "\n\004code\030\001 \002(\005\022\016\n\006params\030\002 \001(\t\"\302\001\n\020BattleT"
    "ickParams\022\020\n\010battleId\030\001 \002(\t\022\016\n\006period\030\002 "
    "\002(\005\022\020\n\010tickRate\030\003 \002(\005\022\023\n\013controlMode\030\004 \001"
    "(\005\022\035\n\tuserOrder\030\005 \001(\0132\n.UserOrder\022&\n\rnot"
    "ifications\030\006 \003(\0132\017.UINotification\022\036\n\ncas"
    "tSkills\030\n \003(\0132\n.CastSkill\"\?\n\nInitAction\022"
    "\025\n\003pos\030\001 \002(\0132\010.UnitPos\022\016\n\006unitHp\030\002 \002(\005\022\n"
    "\n\002hp\030\003 \002(\005\"\214\001\n\nMoveAction\022\020\n\010targetId\030\001 "
    "\002(\005\022\030\n\006curPos\030\002 \002(\0132\010.UnitPos\022\031\n\007movePos"
    "\030\003 \002(\0132\010.UnitPos\022\017\n\007moveDir\030\004 \002(\005\022\022\n\nmov"
    "ePeriod\030\005 \001(\005\022\022\n\nturnPeriod\030\006 \001(\005\"w\n\tFly"
    "Action\022\020\n\010targetId\030\001 \002(\005\022\031\n\007fromPos\030\002 \002("
    "\0132\010.UnitPos\022\033\n\ttargetPos\030\003 \002(\0132\010.UnitPos"
    "\022\017\n\007flyTime\030\004 \002(\005\022\017\n\007flyDist\030\005 \002(\005\"\305\001\n\017F"
    "lyAttackAction\022\031\n\007fromPos\030\001 \002(\0132\010.UnitPo"
    "s\022\020\n\010targetId\030\002 \001(\005\022\033\n\ttargetPos\030\003 \002(\0132\010"
    ".UnitPos\022\017\n\007flyTime\030\004 \002(\005\022\017\n\007flyDist\030\005 \002"
    "(\005\022\034\n\nflyBackPos\030\006 \001(\0132\010.UnitPos\022\023\n\013flyB"
    "ackTime\030\007 \001(\005\022\023\n\013flyBackDist\030\010 \001(\005\"<\n\013Gl"
    "ideAction\022\021\n\tglideTime\030\001 \002(\005\022\032\n\010glidePos"
    "\030\002 \001(\0132\010.UnitPos\"&\n\nStopAction\022\030\n\006curPos"
    "\030\001 \002(\0132\010.UnitPos\"\177\n\014AttackAction\022\017\n\007skil"
    "lId\030\001 \002(\005\022\020\n\010targetId\030\002 \002(\005\022\022\n\nbulletTim"
    "e\030\003 \002(\005\022\033\n\ttargetPos\030\004 \002(\0132\010.UnitPos\022\033\n\006"
    "damage\030\005 \003(\0132\013.UnitDamage\"Q\n\017SkillCastAc"
    "tion\022\017\n\007skillId\030\001 \002(\005\022\020\n\010targetId\030\002 \001(\005\022"
    "\033\n\ttargetPos\030\003 \001(\0132\010.UnitPos\"0\n\020BuffAtta"
    "chAction\022\014\n\004buff\030\001 \002(\005\022\016\n\006period\030\002 \002(\005\" "
    "\n\020BuffRemoveAction\022\014\n\004buff\030\001 \002(\005\"=\n\020Buff"
    "AffectAction\022\014\n\004buff\030\001 \002(\005\022\033\n\006damage\030\002 \003"
    "(\0132\013.UnitDamage\"@\n\014ReviveAction\022\025\n\003pos\030\001"
    " \002(\0132\010.UnitPos\022\r\n\005count\030\002 \002(\005\022\n\n\002hp\030\003 \002("
    "\005\"V\n\nCreateData\022\027\n\004unit\030\001 \002(\0132\t.UnitData"
    "\022\033\n\ttargetPos\030\002 \001(\0132\010.UnitPos\022\022\n\ntargetU"
    "nit\030\003 \001(\005\":\n\014CreateAction\022\017\n\007skillId\030\001 \002"
    "(\005\022\031\n\004data\030\002 \003(\0132\013.CreateData\"\021\n\017Disappe"
    "arAction\"\'\n\nDeadAction\022\r\n\005count\030\001 \002(\005\022\n\n"
    "\002hp\030\002 \002(\005\"\"\n\rWarningAction\022\021\n\ttroopType\030"
    "\001 \002(\005\"@\n\014FinishAction\022\020\n\010winTroop\030\001 \002(\005\022"
    "\036\n\ncastSkills\030\002 \003(\0132\n.CastSkill\"\225\001\n\016Move"
    "DataUpdate\022\024\n\014moveTargetId\030\001 \002(\005\022\037\n\rmove"
    "TargetPos\030\002 \002(\0132\010.UnitPos\022\017\n\007moveDir\030\003 \002"
    "(\005\022\022\n\nmovePeriod\030\004 \002(\005\022\023\n\013forwardTime\030\005 "
    "\002(\005\022\022\n\nturnPeriod\030\006 \001(\005\"a\n\023FlyAttackData"
    "Update\022\020\n\010targetId\030\001 \002(\005\022\033\n\ttargetPos\030\002 "
    "\002(\0132\010.UnitPos\022\033\n\006damage\030\003 \003(\0132\013.UnitDama"
    "ge\"}\n\025StateDataUpdateAction\022\024\n\014updateAct"
    "ion\030\001 \002(\005\022!\n\010moveData\030\n \001(\0132\017.MoveDataUp"
    "date\022+\n\rflyAttackData\030\013 \001(\0132\024.FlyAttackD"
    "ataUpdate\"N\n\nBusyAction\022\033\n\010busyType\030\001 \002("
    "\0162\t.BusyType\022\020\n\010duration\030\002 \002(\005\022\021\n\textPar"
    "ams\030\003 \001(\t\"&\n\021ChangeTroopAction\022\021\n\ttroopT"
    "ype\030\001 \002(\005\":\n\027ChangeExtendStateAction\022\017\n\007"
    "esfPrev\030\001 \002(\005\022\016\n\006esfNew\030\002 \002(\005\"\207\006\n\014Battle"
    "Action\022\014\n\004time\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022\016\n\006un"
    "itId\030\003 \002(\005\022\031\n\004init\030\n \001(\0132\013.InitAction\022\031\n"
    "\004move\030\013 \001(\0132\013.MoveAction\022\027\n\003fly\030\014 \001(\0132\n."
    "FlyAction\022#\n\tflyAttack\030\r \001(\0132\020.FlyAttack"
    "Action\022\035\n\006attack\030\016 \001(\0132\r.AttackAction\022\031\n"
    "\004stop\030\017 \001(\0132\013.StopAction\022\031\n\004dead\030\020 \001(\0132\013"
    ".DeadAction\022%\n\nbuffAttach\030\021 \001(\0132\021.BuffAt"
    "tachAction\022%\n\nbuffRemove\030\022 \001(\0132\021.BuffRem"
    "oveAction\022%\n\nbuffAffect\030\023 \001(\0132\021.BuffAffe"
    "ctAction\022#\n\tdisappear\030\025 \001(\0132\020.DisappearA"
    "ction\022\035\n\006create\030\026 \001(\0132\r.CreateAction\022\035\n\006"
    "finish\030\027 \001(\0132\r.FinishAction\022#\n\tskillCast"
    "\030\030 \001(\0132\020.SkillCastAction\022\035\n\006revive\030\031 \001(\013"
    "2\r.ReviveAction\022\033\n\005glide\030\032 \001(\0132\014.GlideAc"
    "tion\022\037\n\007warning\030\033 \001(\0132\016.WarningAction\022\031\n"
    "\004busy\030\034 \001(\0132\013.BusyAction\022\'\n\013changeTroop\030"
    "\035 \001(\0132\022.ChangeTroopAction\022/\n\017stateDataUp"
    "date\030\036 \001(\0132\026.StateDataUpdateAction\0223\n\021ch"
    "angeExtendState\030\037 \001(\0132\030.ChangeExtendStat"
    "eAction\".\n\014BattleDetail\022\036\n\007actions\030\001 \003(\013"
    "2\r.BattleAction\"\230\001\n\016BattleBulletin\022\020\n\010ba"
    "ttleId\030\001 \002(\t\022\016\n\006result\030\002 \002(\005\022\020\n\010calcTime"
    "\030\003 \001(\005\022\022\n\nbattleTime\030\004 \001(\005\022\036\n\010attacker\030\005"
    " \001(\0132\014.BattleTroop\022\036\n\010defender\030\006 \001(\0132\014.B"
    "attleTroop\"S\n\016OrderAStarPath\022\023\n\013orderUni"
    "tId\030\001 \002(\005\022\020\n\010isAttack\030\002 \002(\010\022\032\n\010nodeList\030"
    "\003 \003(\0132\010.UnitPos\"<\n\016OrderTargetPos\022\r\n\005obj"
    "Id\030\001 \002(\005\022\033\n\ttargetPos\030\002 \002(\0132\010.UnitPos\"O\n"
    "\022TriggerActionToLua\022\020\n\010actionId\030\001 \002(\005\022\022\n"
    "\nactionType\030\002 \002(\005\022\023\n\013actionParam\030\003 \001(\t\"\302"
    "\002\n\014BattleResult\022\016\n\006result\030\001 \002(\005\022\021\n\tgameS"
    "tate\030\002 \002(\005\022\035\n\006detail\030\003 \001(\0132\r.BattleDetai"
    "l\022!\n\010bulletin\030\004 \001(\0132\017.BattleBulletin\022\032\n\022"
    "targetInvulnerable\030\005 \001(\010\022.\n\021triggerActio"
    "nList\030\006 \003(\0132\023.TriggerActionToLua\022&\n\rorde"
    "rPathList\030\007 \003(\0132\017.OrderAStarPath\022+\n\022orde"
    "rTargetPosList\030\010 \003(\0132\017.OrderTargetPos\022\031\n"
    "\021finishedOrderList\030\t \003(\005\022\021\n\tdebugInfo\030\n "
    "\001(\t*\031\n\rBattleVersion\022\010\n\004CODE\020\001*<\n\nBattle"
    "Type\022\007\n\003PVE\020\001\022\r\n\tPVE_FIELD\020\002\022\007\n\003PVP\020\003\022\r\n"
    "\tPVP_FIELD\020\004*\037\n\nResultType\022\007\n\003WIN\020\001\022\010\n\004L"
    "OST\020\002*\305\001\n\013BattleError\022\031\n\014MODULE_ERROR\020\377\377"
    "\377\377\377\377\377\377\377\001\022\016\n\nSUCCESS_OK\020\000\022\021\n\rVERSION_ERRO"
    "R\020\001\022\022\n\016PARAMS_INVALID\020\003\022\022\n\016PROTOCOL_ERRO"
    "R\020\004\022\022\n\016MAP_DATA_ERROR\020\005\022\024\n\020INIT_TROOP_ER"
    "ROR\020\006\022\020\n\014CONFIG_ERROR\020\007\022\024\n\020BATTLE_NOT_EX"
    "IST\020\010*3\n\021BattleControlMode\022\020\n\014BCM_MANUAL"
    "LY\020\001\022\014\n\010BCM_AUTO\020\002*\254\002\n\nActionType\022\010\n\004INI"
    "T\020\001\022\n\n\006CREATE\020\002\022\010\n\004MOVE\020\003\022\007\n\003FLY\020\004\022\t\n\005GL"
    "IDE\020\005\022\010\n\004STOP\020\006\022\013\n\007WARNING\020\007\022\n\n\006ATTACK\020\n"
    "\022\016\n\nFLY_ATTACK\020\013\022\016\n\nSKILL_CAST\020\014\022\017\n\013BUFF"
    "_ATTACH\020\r\022\017\n\013BUFF_REMOVE\020\016\022\017\n\013BUFF_AFFEC"
    "T\020\017\022\010\n\004DEAD\020\020\022\n\n\006REVIVE\020\021\022\r\n\tDISAPPEAR\020\022"
    "\022\010\n\004BUSY\020\023\022\n\n\006FINISH\020\024\022\020\n\014EXTEND_STATE\020\025"
    "\022\020\n\014CHANGE_TROOP\020\026\022\025\n\021STATE_DATA_UPDATE\020"
    "\036*,\n\010BusyType\022\014\n\010RESCUING\020\001\022\022\n\016SHUTDOWN_"
    "POWER\020\002*\247\001\n\017UnitExtendState\022\024\n\020UES_INVUL"
    "NERABLE\020\001\022\014\n\010UES_LAZY\020\002\022\020\n\014UES_RESCUING\020"
    "\004\022\022\n\016UES_BERESCUING\020\010\022\021\n\rUES_GOBACKING\020\020"
    "\022\021\n\rUES_ATTACKING\020 \022\026\n\022UES_BEING_ATTACKE"
    "D\020@\022\014\n\007UES_NPC\020\200\001B\030\n\026com.hawk.game.proto"
    "col", 5643);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BattleField.proto", &protobuf_RegisterTypes);
  CastSkill::default_instance_ = new CastSkill();
  BattleConfig::default_instance_ = new BattleConfig();
  UnitDamage::default_instance_ = new UnitDamage();
  BattleTroop::default_instance_ = new BattleTroop();
  BattleParams::default_instance_ = new BattleParams();
  DeployUnitData::default_instance_ = new DeployUnitData();
  MoveOrAttackOrder::default_instance_ = new MoveOrAttackOrder();
  UserOrder::default_instance_ = new UserOrder();
  UINotification::default_instance_ = new UINotification();
  BattleTickParams::default_instance_ = new BattleTickParams();
  InitAction::default_instance_ = new InitAction();
  MoveAction::default_instance_ = new MoveAction();
  FlyAction::default_instance_ = new FlyAction();
  FlyAttackAction::default_instance_ = new FlyAttackAction();
  GlideAction::default_instance_ = new GlideAction();
  StopAction::default_instance_ = new StopAction();
  AttackAction::default_instance_ = new AttackAction();
  SkillCastAction::default_instance_ = new SkillCastAction();
  BuffAttachAction::default_instance_ = new BuffAttachAction();
  BuffRemoveAction::default_instance_ = new BuffRemoveAction();
  BuffAffectAction::default_instance_ = new BuffAffectAction();
  ReviveAction::default_instance_ = new ReviveAction();
  CreateData::default_instance_ = new CreateData();
  CreateAction::default_instance_ = new CreateAction();
  DisappearAction::default_instance_ = new DisappearAction();
  DeadAction::default_instance_ = new DeadAction();
  WarningAction::default_instance_ = new WarningAction();
  FinishAction::default_instance_ = new FinishAction();
  MoveDataUpdate::default_instance_ = new MoveDataUpdate();
  FlyAttackDataUpdate::default_instance_ = new FlyAttackDataUpdate();
  StateDataUpdateAction::default_instance_ = new StateDataUpdateAction();
  BusyAction::default_instance_ = new BusyAction();
  ChangeTroopAction::default_instance_ = new ChangeTroopAction();
  ChangeExtendStateAction::default_instance_ = new ChangeExtendStateAction();
  BattleAction::default_instance_ = new BattleAction();
  BattleDetail::default_instance_ = new BattleDetail();
  BattleBulletin::default_instance_ = new BattleBulletin();
  OrderAStarPath::default_instance_ = new OrderAStarPath();
  OrderTargetPos::default_instance_ = new OrderTargetPos();
  TriggerActionToLua::default_instance_ = new TriggerActionToLua();
  BattleResult::default_instance_ = new BattleResult();
  CastSkill::default_instance_->InitAsDefaultInstance();
  BattleConfig::default_instance_->InitAsDefaultInstance();
  UnitDamage::default_instance_->InitAsDefaultInstance();
  BattleTroop::default_instance_->InitAsDefaultInstance();
  BattleParams::default_instance_->InitAsDefaultInstance();
  DeployUnitData::default_instance_->InitAsDefaultInstance();
  MoveOrAttackOrder::default_instance_->InitAsDefaultInstance();
  UserOrder::default_instance_->InitAsDefaultInstance();
  UINotification::default_instance_->InitAsDefaultInstance();
  BattleTickParams::default_instance_->InitAsDefaultInstance();
  InitAction::default_instance_->InitAsDefaultInstance();
  MoveAction::default_instance_->InitAsDefaultInstance();
  FlyAction::default_instance_->InitAsDefaultInstance();
  FlyAttackAction::default_instance_->InitAsDefaultInstance();
  GlideAction::default_instance_->InitAsDefaultInstance();
  StopAction::default_instance_->InitAsDefaultInstance();
  AttackAction::default_instance_->InitAsDefaultInstance();
  SkillCastAction::default_instance_->InitAsDefaultInstance();
  BuffAttachAction::default_instance_->InitAsDefaultInstance();
  BuffRemoveAction::default_instance_->InitAsDefaultInstance();
  BuffAffectAction::default_instance_->InitAsDefaultInstance();
  ReviveAction::default_instance_->InitAsDefaultInstance();
  CreateData::default_instance_->InitAsDefaultInstance();
  CreateAction::default_instance_->InitAsDefaultInstance();
  DisappearAction::default_instance_->InitAsDefaultInstance();
  DeadAction::default_instance_->InitAsDefaultInstance();
  WarningAction::default_instance_->InitAsDefaultInstance();
  FinishAction::default_instance_->InitAsDefaultInstance();
  MoveDataUpdate::default_instance_->InitAsDefaultInstance();
  FlyAttackDataUpdate::default_instance_->InitAsDefaultInstance();
  StateDataUpdateAction::default_instance_->InitAsDefaultInstance();
  BusyAction::default_instance_->InitAsDefaultInstance();
  ChangeTroopAction::default_instance_->InitAsDefaultInstance();
  ChangeExtendStateAction::default_instance_->InitAsDefaultInstance();
  BattleAction::default_instance_->InitAsDefaultInstance();
  BattleDetail::default_instance_->InitAsDefaultInstance();
  BattleBulletin::default_instance_->InitAsDefaultInstance();
  OrderAStarPath::default_instance_->InitAsDefaultInstance();
  OrderTargetPos::default_instance_->InitAsDefaultInstance();
  TriggerActionToLua::default_instance_->InitAsDefaultInstance();
  BattleResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BattleField_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BattleField_2eproto {
  StaticDescriptorInitializer_BattleField_2eproto() {
    protobuf_AddDesc_BattleField_2eproto();
  }
} static_descriptor_initializer_BattleField_2eproto_;
const ::google::protobuf::EnumDescriptor* BattleVersion_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleVersion_descriptor_;
}
bool BattleVersion_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BattleType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleType_descriptor_;
}
bool BattleType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ResultType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultType_descriptor_;
}
bool ResultType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BattleError_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleError_descriptor_;
}
bool BattleError_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BattleControlMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleControlMode_descriptor_;
}
bool BattleControlMode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionType_descriptor_;
}
bool ActionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 30:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BusyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BusyType_descriptor_;
}
bool BusyType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UnitExtendState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitExtendState_descriptor_;
}
bool UnitExtendState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CastSkill::kUnitIdFieldNumber;
const int CastSkill::kSkillIdFieldNumber;
const int CastSkill::kCastTimeFieldNumber;
const int CastSkill::kTargetIdFieldNumber;
const int CastSkill::kTargetPosFieldNumber;
#endif  // !_MSC_VER

CastSkill::CastSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CastSkill::InitAsDefaultInstance() {
  targetpos_ = const_cast< ::UnitPos*>(&::UnitPos::default_instance());
}

CastSkill::CastSkill(const CastSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CastSkill::SharedCtor() {
  _cached_size_ = 0;
  unitid_ = 0;
  skillid_ = 0;
  casttime_ = 0;
  targetid_ = 0;
  targetpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CastSkill::~CastSkill() {
  SharedDtor();
}

void CastSkill::SharedDtor() {
  if (this != default_instance_) {
    delete targetpos_;
  }
}

void CastSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CastSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CastSkill_descriptor_;
}

const CastSkill& CastSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

CastSkill* CastSkill::default_instance_ = NULL;

CastSkill* CastSkill::New() const {
  return new CastSkill;
}

void CastSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unitid_ = 0;
    skillid_ = 0;
    casttime_ = 0;
    targetid_ = 0;
    if (has_targetpos()) {
      if (targetpos_ != NULL) targetpos_->::UnitPos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CastSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 unitId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unitid_)));
          set_has_unitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillId;
        break;
      }

      // required int32 skillId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_castTime;
        break;
      }

      // required int32 castTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_castTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &casttime_)));
          set_has_casttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_targetId;
        break;
      }

      // optional int32 targetId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_targetPos;
        break;
      }

      // optional .UnitPos targetPos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CastSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 unitId = 1;
  if (has_unitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->unitid(), output);
  }

  // required int32 skillId = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skillid(), output);
  }

  // required int32 castTime = 3;
  if (has_casttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->casttime(), output);
  }

  // optional int32 targetId = 4;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->targetid(), output);
  }

  // optional .UnitPos targetPos = 5;
  if (has_targetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->targetpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CastSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 unitId = 1;
  if (has_unitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->unitid(), target);
  }

  // required int32 skillId = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skillid(), target);
  }

  // required int32 castTime = 3;
  if (has_casttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->casttime(), target);
  }

  // optional int32 targetId = 4;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->targetid(), target);
  }

  // optional .UnitPos targetPos = 5;
  if (has_targetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->targetpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CastSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 unitId = 1;
    if (has_unitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unitid());
    }

    // required int32 skillId = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // required int32 castTime = 3;
    if (has_casttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->casttime());
    }

    // optional int32 targetId = 4;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

    // optional .UnitPos targetPos = 5;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CastSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CastSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CastSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CastSkill::MergeFrom(const CastSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unitid()) {
      set_unitid(from.unitid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_casttime()) {
      set_casttime(from.casttime());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_targetpos()) {
      mutable_targetpos()->::UnitPos::MergeFrom(from.targetpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CastSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CastSkill::CopyFrom(const CastSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_targetpos()) {
    if (!this->targetpos().IsInitialized()) return false;
  }
  return true;
}

void CastSkill::Swap(CastSkill* other) {
  if (other != this) {
    std::swap(unitid_, other->unitid_);
    std::swap(skillid_, other->skillid_);
    std::swap(casttime_, other->casttime_);
    std::swap(targetid_, other->targetid_);
    std::swap(targetpos_, other->targetpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CastSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CastSkill_descriptor_;
  metadata.reflection = CastSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleConfig::kVersionFieldNumber;
const int BattleConfig::kBattleTypeFieldNumber;
const int BattleConfig::kRandSeedFieldNumber;
const int BattleConfig::kTickPeriodFieldNumber;
const int BattleConfig::kMissionIdFieldNumber;
const int BattleConfig::kDifficultyPerFieldNumber;
const int BattleConfig::kMapIdFieldNumber;
const int BattleConfig::kTriggerConfPrefixFieldNumber;
const int BattleConfig::kPlayerIdFieldNumber;
const int BattleConfig::kDefTargetItemsFieldNumber;
const int BattleConfig::kTimeLimitFieldNumber;
const int BattleConfig::kDebugModeFieldNumber;
#endif  // !_MSC_VER

BattleConfig::BattleConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleConfig::InitAsDefaultInstance() {
}

BattleConfig::BattleConfig(const BattleConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleConfig::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  battletype_ = 0;
  randseed_ = 0;
  tickperiod_ = 0;
  missionid_ = 0;
  difficultyper_ = 0;
  mapid_ = 0;
  trigger_conf_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timelimit_ = 0;
  debugmode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleConfig::~BattleConfig() {
  SharedDtor();
}

void BattleConfig::SharedDtor() {
  if (trigger_conf_prefix_ != &::google::protobuf::internal::kEmptyString) {
    delete trigger_conf_prefix_;
  }
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void BattleConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleConfig_descriptor_;
}

const BattleConfig& BattleConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

BattleConfig* BattleConfig::default_instance_ = NULL;

BattleConfig* BattleConfig::New() const {
  return new BattleConfig;
}

void BattleConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
    battletype_ = 0;
    randseed_ = 0;
    tickperiod_ = 0;
    missionid_ = 0;
    difficultyper_ = 0;
    mapid_ = 0;
    if (has_trigger_conf_prefix()) {
      if (trigger_conf_prefix_ != &::google::protobuf::internal::kEmptyString) {
        trigger_conf_prefix_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    timelimit_ = 0;
    debugmode_ = 0;
  }
  deftargetitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battleType;
        break;
      }

      // required int32 battleType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battleType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battletype_)));
          set_has_battletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_randSeed;
        break;
      }

      // optional int32 randSeed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_randSeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &randseed_)));
          set_has_randseed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tickPeriod;
        break;
      }

      // optional int32 tickPeriod = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tickPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tickperiod_)));
          set_has_tickperiod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_missionId;
        break;
      }

      // optional int32 missionId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_difficultyPer;
        break;
      }

      // optional int32 difficultyPer = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_difficultyPer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &difficultyper_)));
          set_has_difficultyper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_mapId;
        break;
      }

      // optional int32 mapId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_trigger_conf_prefix;
        break;
      }

      // optional string trigger_conf_prefix = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trigger_conf_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trigger_conf_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trigger_conf_prefix().data(), this->trigger_conf_prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_playerId;
        break;
      }

      // optional string playerId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_defTargetItems;
        break;
      }

      // repeated int32 defTargetItems = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defTargetItems:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_deftargetitems())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_deftargetitems())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_defTargetItems;
        if (input->ExpectTag(96)) goto parse_timeLimit;
        break;
      }

      // optional int32 timeLimit = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timelimit_)));
          set_has_timelimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_debugMode;
        break;
      }

      // optional int32 debugMode = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_debugMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &debugmode_)));
          set_has_debugmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 battleType = 2;
  if (has_battletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->battletype(), output);
  }

  // optional int32 randSeed = 3;
  if (has_randseed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->randseed(), output);
  }

  // optional int32 tickPeriod = 4;
  if (has_tickperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tickperiod(), output);
  }

  // optional int32 missionId = 5;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->missionid(), output);
  }

  // optional int32 difficultyPer = 6;
  if (has_difficultyper()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->difficultyper(), output);
  }

  // optional int32 mapId = 7;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mapid(), output);
  }

  // optional string trigger_conf_prefix = 8;
  if (has_trigger_conf_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trigger_conf_prefix().data(), this->trigger_conf_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->trigger_conf_prefix(), output);
  }

  // optional string playerId = 10;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->playerid(), output);
  }

  // repeated int32 defTargetItems = 11;
  for (int i = 0; i < this->deftargetitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->deftargetitems(i), output);
  }

  // optional int32 timeLimit = 12;
  if (has_timelimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->timelimit(), output);
  }

  // optional int32 debugMode = 20;
  if (has_debugmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->debugmode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // required int32 battleType = 2;
  if (has_battletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->battletype(), target);
  }

  // optional int32 randSeed = 3;
  if (has_randseed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->randseed(), target);
  }

  // optional int32 tickPeriod = 4;
  if (has_tickperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tickperiod(), target);
  }

  // optional int32 missionId = 5;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->missionid(), target);
  }

  // optional int32 difficultyPer = 6;
  if (has_difficultyper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->difficultyper(), target);
  }

  // optional int32 mapId = 7;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mapid(), target);
  }

  // optional string trigger_conf_prefix = 8;
  if (has_trigger_conf_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trigger_conf_prefix().data(), this->trigger_conf_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->trigger_conf_prefix(), target);
  }

  // optional string playerId = 10;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->playerid(), target);
  }

  // repeated int32 defTargetItems = 11;
  for (int i = 0; i < this->deftargetitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->deftargetitems(i), target);
  }

  // optional int32 timeLimit = 12;
  if (has_timelimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->timelimit(), target);
  }

  // optional int32 debugMode = 20;
  if (has_debugmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->debugmode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // required int32 battleType = 2;
    if (has_battletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battletype());
    }

    // optional int32 randSeed = 3;
    if (has_randseed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->randseed());
    }

    // optional int32 tickPeriod = 4;
    if (has_tickperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tickperiod());
    }

    // optional int32 missionId = 5;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->missionid());
    }

    // optional int32 difficultyPer = 6;
    if (has_difficultyper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->difficultyper());
    }

    // optional int32 mapId = 7;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional string trigger_conf_prefix = 8;
    if (has_trigger_conf_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trigger_conf_prefix());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string playerId = 10;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional int32 timeLimit = 12;
    if (has_timelimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timelimit());
    }

    // optional int32 debugMode = 20;
    if (has_debugmode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->debugmode());
    }

  }
  // repeated int32 defTargetItems = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->deftargetitems_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->deftargetitems(i));
    }
    total_size += 1 * this->deftargetitems_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleConfig::MergeFrom(const BattleConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  deftargetitems_.MergeFrom(from.deftargetitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_battletype()) {
      set_battletype(from.battletype());
    }
    if (from.has_randseed()) {
      set_randseed(from.randseed());
    }
    if (from.has_tickperiod()) {
      set_tickperiod(from.tickperiod());
    }
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
    if (from.has_difficultyper()) {
      set_difficultyper(from.difficultyper());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_trigger_conf_prefix()) {
      set_trigger_conf_prefix(from.trigger_conf_prefix());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_timelimit()) {
      set_timelimit(from.timelimit());
    }
    if (from.has_debugmode()) {
      set_debugmode(from.debugmode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleConfig::CopyFrom(const BattleConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BattleConfig::Swap(BattleConfig* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(battletype_, other->battletype_);
    std::swap(randseed_, other->randseed_);
    std::swap(tickperiod_, other->tickperiod_);
    std::swap(missionid_, other->missionid_);
    std::swap(difficultyper_, other->difficultyper_);
    std::swap(mapid_, other->mapid_);
    std::swap(trigger_conf_prefix_, other->trigger_conf_prefix_);
    std::swap(playerid_, other->playerid_);
    deftargetitems_.Swap(&other->deftargetitems_);
    std::swap(timelimit_, other->timelimit_);
    std::swap(debugmode_, other->debugmode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleConfig_descriptor_;
  metadata.reflection = BattleConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnitDamage::kUnitIdFieldNumber;
const int UnitDamage::kCountFieldNumber;
const int UnitDamage::kHpFieldNumber;
const int UnitDamage::kDamageFieldNumber;
const int UnitDamage::kTypeFieldNumber;
#endif  // !_MSC_VER

UnitDamage::UnitDamage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnitDamage::InitAsDefaultInstance() {
}

UnitDamage::UnitDamage(const UnitDamage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnitDamage::SharedCtor() {
  _cached_size_ = 0;
  unitid_ = 0;
  count_ = 0;
  hp_ = 0;
  damage_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitDamage::~UnitDamage() {
  SharedDtor();
}

void UnitDamage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnitDamage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnitDamage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitDamage_descriptor_;
}

const UnitDamage& UnitDamage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

UnitDamage* UnitDamage::default_instance_ = NULL;

UnitDamage* UnitDamage::New() const {
  return new UnitDamage;
}

void UnitDamage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unitid_ = 0;
    count_ = 0;
    hp_ = 0;
    damage_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnitDamage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 unitId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unitid_)));
          set_has_unitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hp;
        break;
      }

      // required int32 hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_damage;
        break;
      }

      // required int32 damage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional int32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnitDamage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 unitId = 1;
  if (has_unitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->unitid(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // required int32 hp = 3;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hp(), output);
  }

  // required int32 damage = 4;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->damage(), output);
  }

  // optional int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnitDamage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 unitId = 1;
  if (has_unitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->unitid(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // required int32 hp = 3;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hp(), target);
  }

  // required int32 damage = 4;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->damage(), target);
  }

  // optional int32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnitDamage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 unitId = 1;
    if (has_unitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unitid());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // required int32 hp = 3;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // required int32 damage = 4;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

    // optional int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnitDamage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnitDamage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnitDamage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnitDamage::MergeFrom(const UnitDamage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unitid()) {
      set_unitid(from.unitid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnitDamage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitDamage::CopyFrom(const UnitDamage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitDamage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void UnitDamage::Swap(UnitDamage* other) {
  if (other != this) {
    std::swap(unitid_, other->unitid_);
    std::swap(count_, other->count_);
    std::swap(hp_, other->hp_);
    std::swap(damage_, other->damage_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnitDamage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnitDamage_descriptor_;
  metadata.reflection = UnitDamage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleTroop::kUnitsFieldNumber;
const int BattleTroop::kDeployPosFieldNumber;
#endif  // !_MSC_VER

BattleTroop::BattleTroop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleTroop::InitAsDefaultInstance() {
  deploypos_ = const_cast< ::UnitPos*>(&::UnitPos::default_instance());
}

BattleTroop::BattleTroop(const BattleTroop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleTroop::SharedCtor() {
  _cached_size_ = 0;
  deploypos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleTroop::~BattleTroop() {
  SharedDtor();
}

void BattleTroop::SharedDtor() {
  if (this != default_instance_) {
    delete deploypos_;
  }
}

void BattleTroop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleTroop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleTroop_descriptor_;
}

const BattleTroop& BattleTroop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

BattleTroop* BattleTroop::default_instance_ = NULL;

BattleTroop* BattleTroop::New() const {
  return new BattleTroop;
}

void BattleTroop::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_deploypos()) {
      if (deploypos_ != NULL) deploypos_->::UnitPos::Clear();
    }
  }
  units_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleTroop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .UnitData units = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_units:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_units()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_units;
        if (input->ExpectTag(18)) goto parse_deployPos;
        break;
      }

      // optional .UnitPos deployPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deployPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deploypos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleTroop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .UnitData units = 1;
  for (int i = 0; i < this->units_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->units(i), output);
  }

  // optional .UnitPos deployPos = 2;
  if (has_deploypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->deploypos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleTroop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .UnitData units = 1;
  for (int i = 0; i < this->units_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->units(i), target);
  }

  // optional .UnitPos deployPos = 2;
  if (has_deploypos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->deploypos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleTroop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .UnitPos deployPos = 2;
    if (has_deploypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deploypos());
    }

  }
  // repeated .UnitData units = 1;
  total_size += 1 * this->units_size();
  for (int i = 0; i < this->units_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->units(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleTroop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleTroop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleTroop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleTroop::MergeFrom(const BattleTroop& from) {
  GOOGLE_CHECK_NE(&from, this);
  units_.MergeFrom(from.units_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_deploypos()) {
      mutable_deploypos()->::UnitPos::MergeFrom(from.deploypos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleTroop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleTroop::CopyFrom(const BattleTroop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleTroop::IsInitialized() const {

  for (int i = 0; i < units_size(); i++) {
    if (!this->units(i).IsInitialized()) return false;
  }
  if (has_deploypos()) {
    if (!this->deploypos().IsInitialized()) return false;
  }
  return true;
}

void BattleTroop::Swap(BattleTroop* other) {
  if (other != this) {
    units_.Swap(&other->units_);
    std::swap(deploypos_, other->deploypos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleTroop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleTroop_descriptor_;
  metadata.reflection = BattleTroop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleParams::kCfgFieldNumber;
const int BattleParams::kAttackerFieldNumber;
const int BattleParams::kDefenderFieldNumber;
const int BattleParams::kCastSkillsFieldNumber;
const int BattleParams::kControlModeFieldNumber;
const int BattleParams::kBattleIdFieldNumber;
const int BattleParams::kWaitingDeployListFieldNumber;
const int BattleParams::kExtParamsFieldNumber;
#endif  // !_MSC_VER

BattleParams::BattleParams()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleParams::InitAsDefaultInstance() {
  cfg_ = const_cast< ::BattleConfig*>(&::BattleConfig::default_instance());
  attacker_ = const_cast< ::BattleTroop*>(&::BattleTroop::default_instance());
  defender_ = const_cast< ::BattleTroop*>(&::BattleTroop::default_instance());
}

BattleParams::BattleParams(const BattleParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleParams::SharedCtor() {
  _cached_size_ = 0;
  cfg_ = NULL;
  attacker_ = NULL;
  defender_ = NULL;
  controlmode_ = 0;
  battleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extparams_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleParams::~BattleParams() {
  SharedDtor();
}

void BattleParams::SharedDtor() {
  if (battleid_ != &::google::protobuf::internal::kEmptyString) {
    delete battleid_;
  }
  if (extparams_ != &::google::protobuf::internal::kEmptyString) {
    delete extparams_;
  }
  if (this != default_instance_) {
    delete cfg_;
    delete attacker_;
    delete defender_;
  }
}

void BattleParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleParams_descriptor_;
}

const BattleParams& BattleParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

BattleParams* BattleParams::default_instance_ = NULL;

BattleParams* BattleParams::New() const {
  return new BattleParams;
}

void BattleParams::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cfg()) {
      if (cfg_ != NULL) cfg_->::BattleConfig::Clear();
    }
    if (has_attacker()) {
      if (attacker_ != NULL) attacker_->::BattleTroop::Clear();
    }
    if (has_defender()) {
      if (defender_ != NULL) defender_->::BattleTroop::Clear();
    }
    controlmode_ = 0;
    if (has_battleid()) {
      if (battleid_ != &::google::protobuf::internal::kEmptyString) {
        battleid_->clear();
      }
    }
    if (has_extparams()) {
      if (extparams_ != &::google::protobuf::internal::kEmptyString) {
        extparams_->clear();
      }
    }
  }
  castskills_.Clear();
  waitingdeploylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .BattleConfig cfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attacker;
        break;
      }

      // optional .BattleTroop attacker = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attacker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attacker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_defender;
        break;
      }

      // optional .BattleTroop defender = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defender()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_castSkills;
        break;
      }

      // repeated .CastSkill castSkills = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_castSkills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_castskills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_castSkills;
        if (input->ExpectTag(40)) goto parse_controlMode;
        break;
      }

      // optional int32 controlMode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_controlMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &controlmode_)));
          set_has_controlmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_battleId;
        break;
      }

      // optional string battleId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battleId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_battleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->battleid().data(), this->battleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_waitingDeployList;
        break;
      }

      // repeated int32 waitingDeployList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_waitingDeployList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_waitingdeploylist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_waitingdeploylist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_waitingDeployList;
        if (input->ExpectTag(82)) goto parse_extParams;
        break;
      }

      // optional bytes extParams = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extParams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extparams()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .BattleConfig cfg = 1;
  if (has_cfg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cfg(), output);
  }

  // optional .BattleTroop attacker = 2;
  if (has_attacker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attacker(), output);
  }

  // optional .BattleTroop defender = 3;
  if (has_defender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->defender(), output);
  }

  // repeated .CastSkill castSkills = 4;
  for (int i = 0; i < this->castskills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->castskills(i), output);
  }

  // optional int32 controlMode = 5;
  if (has_controlmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->controlmode(), output);
  }

  // optional string battleId = 6;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->battleid().data(), this->battleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->battleid(), output);
  }

  // repeated int32 waitingDeployList = 7;
  for (int i = 0; i < this->waitingdeploylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->waitingdeploylist(i), output);
  }

  // optional bytes extParams = 10;
  if (has_extparams()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->extparams(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .BattleConfig cfg = 1;
  if (has_cfg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cfg(), target);
  }

  // optional .BattleTroop attacker = 2;
  if (has_attacker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attacker(), target);
  }

  // optional .BattleTroop defender = 3;
  if (has_defender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->defender(), target);
  }

  // repeated .CastSkill castSkills = 4;
  for (int i = 0; i < this->castskills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->castskills(i), target);
  }

  // optional int32 controlMode = 5;
  if (has_controlmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->controlmode(), target);
  }

  // optional string battleId = 6;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->battleid().data(), this->battleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->battleid(), target);
  }

  // repeated int32 waitingDeployList = 7;
  for (int i = 0; i < this->waitingdeploylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->waitingdeploylist(i), target);
  }

  // optional bytes extParams = 10;
  if (has_extparams()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->extparams(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .BattleConfig cfg = 1;
    if (has_cfg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cfg());
    }

    // optional .BattleTroop attacker = 2;
    if (has_attacker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attacker());
    }

    // optional .BattleTroop defender = 3;
    if (has_defender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defender());
    }

    // optional int32 controlMode = 5;
    if (has_controlmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->controlmode());
    }

    // optional string battleId = 6;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->battleid());
    }

    // optional bytes extParams = 10;
    if (has_extparams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->extparams());
    }

  }
  // repeated .CastSkill castSkills = 4;
  total_size += 1 * this->castskills_size();
  for (int i = 0; i < this->castskills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->castskills(i));
  }

  // repeated int32 waitingDeployList = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->waitingdeploylist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->waitingdeploylist(i));
    }
    total_size += 1 * this->waitingdeploylist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleParams::MergeFrom(const BattleParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  castskills_.MergeFrom(from.castskills_);
  waitingdeploylist_.MergeFrom(from.waitingdeploylist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cfg()) {
      mutable_cfg()->::BattleConfig::MergeFrom(from.cfg());
    }
    if (from.has_attacker()) {
      mutable_attacker()->::BattleTroop::MergeFrom(from.attacker());
    }
    if (from.has_defender()) {
      mutable_defender()->::BattleTroop::MergeFrom(from.defender());
    }
    if (from.has_controlmode()) {
      set_controlmode(from.controlmode());
    }
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
    if (from.has_extparams()) {
      set_extparams(from.extparams());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleParams::CopyFrom(const BattleParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_cfg()) {
    if (!this->cfg().IsInitialized()) return false;
  }
  if (has_attacker()) {
    if (!this->attacker().IsInitialized()) return false;
  }
  if (has_defender()) {
    if (!this->defender().IsInitialized()) return false;
  }
  for (int i = 0; i < castskills_size(); i++) {
    if (!this->castskills(i).IsInitialized()) return false;
  }
  return true;
}

void BattleParams::Swap(BattleParams* other) {
  if (other != this) {
    std::swap(cfg_, other->cfg_);
    std::swap(attacker_, other->attacker_);
    std::swap(defender_, other->defender_);
    castskills_.Swap(&other->castskills_);
    std::swap(controlmode_, other->controlmode_);
    std::swap(battleid_, other->battleid_);
    waitingdeploylist_.Swap(&other->waitingdeploylist_);
    std::swap(extparams_, other->extparams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleParams_descriptor_;
  metadata.reflection = BattleParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeployUnitData::kItemIdFieldNumber;
const int DeployUnitData::kCountFieldNumber;
const int DeployUnitData::kUnitPosFieldNumber;
#endif  // !_MSC_VER

DeployUnitData::DeployUnitData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeployUnitData::InitAsDefaultInstance() {
  unitpos_ = const_cast< ::UnitPos*>(&::UnitPos::default_instance());
}

DeployUnitData::DeployUnitData(const DeployUnitData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeployUnitData::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  count_ = 0;
  unitpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeployUnitData::~DeployUnitData() {
  SharedDtor();
}

void DeployUnitData::SharedDtor() {
  if (this != default_instance_) {
    delete unitpos_;
  }
}

void DeployUnitData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeployUnitData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeployUnitData_descriptor_;
}

const DeployUnitData& DeployUnitData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

DeployUnitData* DeployUnitData::default_instance_ = NULL;

DeployUnitData* DeployUnitData::New() const {
  return new DeployUnitData;
}

void DeployUnitData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    count_ = 0;
    if (has_unitpos()) {
      if (unitpos_ != NULL) unitpos_->::UnitPos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeployUnitData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_unitPos;
        break;
      }

      // required .UnitPos unitPos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unitpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeployUnitData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // required .UnitPos unitPos = 3;
  if (has_unitpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->unitpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeployUnitData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // required .UnitPos unitPos = 3;
  if (has_unitpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->unitpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeployUnitData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // required .UnitPos unitPos = 3;
    if (has_unitpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unitpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeployUnitData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeployUnitData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeployUnitData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeployUnitData::MergeFrom(const DeployUnitData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_unitpos()) {
      mutable_unitpos()->::UnitPos::MergeFrom(from.unitpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeployUnitData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeployUnitData::CopyFrom(const DeployUnitData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeployUnitData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_unitpos()) {
    if (!this->unitpos().IsInitialized()) return false;
  }
  return true;
}

void DeployUnitData::Swap(DeployUnitData* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    std::swap(unitpos_, other->unitpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeployUnitData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeployUnitData_descriptor_;
  metadata.reflection = DeployUnitData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveOrAttackOrder::kOrderUnitIdFieldNumber;
const int MoveOrAttackOrder::kTargetIdFieldNumber;
const int MoveOrAttackOrder::kMovePosFieldNumber;
#endif  // !_MSC_VER

MoveOrAttackOrder::MoveOrAttackOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveOrAttackOrder::InitAsDefaultInstance() {
  movepos_ = const_cast< ::UnitPos*>(&::UnitPos::default_instance());
}

MoveOrAttackOrder::MoveOrAttackOrder(const MoveOrAttackOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveOrAttackOrder::SharedCtor() {
  _cached_size_ = 0;
  orderunitid_ = 0;
  targetid_ = 0;
  movepos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveOrAttackOrder::~MoveOrAttackOrder() {
  SharedDtor();
}

void MoveOrAttackOrder::SharedDtor() {
  if (this != default_instance_) {
    delete movepos_;
  }
}

void MoveOrAttackOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveOrAttackOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveOrAttackOrder_descriptor_;
}

const MoveOrAttackOrder& MoveOrAttackOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

MoveOrAttackOrder* MoveOrAttackOrder::default_instance_ = NULL;

MoveOrAttackOrder* MoveOrAttackOrder::New() const {
  return new MoveOrAttackOrder;
}

void MoveOrAttackOrder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    orderunitid_ = 0;
    targetid_ = 0;
    if (has_movepos()) {
      if (movepos_ != NULL) movepos_->::UnitPos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveOrAttackOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 orderUnitId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderunitid_)));
          set_has_orderunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetId;
        break;
      }

      // optional int32 targetId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_movePos;
        break;
      }

      // optional .UnitPos movePos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_movePos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_movepos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveOrAttackOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 orderUnitId = 1;
  if (has_orderunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->orderunitid(), output);
  }

  // optional int32 targetId = 2;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->targetid(), output);
  }

  // optional .UnitPos movePos = 3;
  if (has_movepos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->movepos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveOrAttackOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 orderUnitId = 1;
  if (has_orderunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->orderunitid(), target);
  }

  // optional int32 targetId = 2;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->targetid(), target);
  }

  // optional .UnitPos movePos = 3;
  if (has_movepos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->movepos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveOrAttackOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 orderUnitId = 1;
    if (has_orderunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderunitid());
    }

    // optional int32 targetId = 2;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

    // optional .UnitPos movePos = 3;
    if (has_movepos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->movepos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveOrAttackOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveOrAttackOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveOrAttackOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveOrAttackOrder::MergeFrom(const MoveOrAttackOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderunitid()) {
      set_orderunitid(from.orderunitid());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_movepos()) {
      mutable_movepos()->::UnitPos::MergeFrom(from.movepos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveOrAttackOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveOrAttackOrder::CopyFrom(const MoveOrAttackOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveOrAttackOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_movepos()) {
    if (!this->movepos().IsInitialized()) return false;
  }
  return true;
}

void MoveOrAttackOrder::Swap(MoveOrAttackOrder* other) {
  if (other != this) {
    std::swap(orderunitid_, other->orderunitid_);
    std::swap(targetid_, other->targetid_);
    std::swap(movepos_, other->movepos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveOrAttackOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveOrAttackOrder_descriptor_;
  metadata.reflection = MoveOrAttackOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserOrder::kOrderIdFieldNumber;
const int UserOrder::kOrderListFieldNumber;
#endif  // !_MSC_VER

UserOrder::UserOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserOrder::InitAsDefaultInstance() {
}

UserOrder::UserOrder(const UserOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserOrder::SharedCtor() {
  _cached_size_ = 0;
  orderid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserOrder::~UserOrder() {
  SharedDtor();
}

void UserOrder::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserOrder_descriptor_;
}

const UserOrder& UserOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

UserOrder* UserOrder::default_instance_ = NULL;

UserOrder* UserOrder::New() const {
  return new UserOrder;
}

void UserOrder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    orderid_ = 0;
  }
  orderlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 orderId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_orderList;
        break;
      }

      // repeated .MoveOrAttackOrder orderList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orderList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_orderlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_orderList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 orderId = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->orderid(), output);
  }

  // repeated .MoveOrAttackOrder orderList = 2;
  for (int i = 0; i < this->orderlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->orderlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 orderId = 1;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->orderid(), target);
  }

  // repeated .MoveOrAttackOrder orderList = 2;
  for (int i = 0; i < this->orderlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->orderlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 orderId = 1;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderid());
    }

  }
  // repeated .MoveOrAttackOrder orderList = 2;
  total_size += 1 * this->orderlist_size();
  for (int i = 0; i < this->orderlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->orderlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserOrder::MergeFrom(const UserOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  orderlist_.MergeFrom(from.orderlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserOrder::CopyFrom(const UserOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < orderlist_size(); i++) {
    if (!this->orderlist(i).IsInitialized()) return false;
  }
  return true;
}

void UserOrder::Swap(UserOrder* other) {
  if (other != this) {
    std::swap(orderid_, other->orderid_);
    orderlist_.Swap(&other->orderlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserOrder_descriptor_;
  metadata.reflection = UserOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UINotification::kCodeFieldNumber;
const int UINotification::kParamsFieldNumber;
#endif  // !_MSC_VER

UINotification::UINotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UINotification::InitAsDefaultInstance() {
}

UINotification::UINotification(const UINotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UINotification::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  params_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UINotification::~UINotification() {
  SharedDtor();
}

void UINotification::SharedDtor() {
  if (params_ != &::google::protobuf::internal::kEmptyString) {
    delete params_;
  }
  if (this != default_instance_) {
  }
}

void UINotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UINotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UINotification_descriptor_;
}

const UINotification& UINotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

UINotification* UINotification::default_instance_ = NULL;

UINotification* UINotification::New() const {
  return new UINotification;
}

void UINotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_params()) {
      if (params_ != &::google::protobuf::internal::kEmptyString) {
        params_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UINotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_params;
        break;
      }

      // optional string params = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_params()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->params().data(), this->params().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UINotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional string params = 2;
  if (has_params()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->params().data(), this->params().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->params(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UINotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional string params = 2;
  if (has_params()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->params().data(), this->params().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->params(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UINotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional string params = 2;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->params());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UINotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UINotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UINotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UINotification::MergeFrom(const UINotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_params()) {
      set_params(from.params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UINotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UINotification::CopyFrom(const UINotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UINotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UINotification::Swap(UINotification* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(params_, other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UINotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UINotification_descriptor_;
  metadata.reflection = UINotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleTickParams::kBattleIdFieldNumber;
const int BattleTickParams::kPeriodFieldNumber;
const int BattleTickParams::kTickRateFieldNumber;
const int BattleTickParams::kControlModeFieldNumber;
const int BattleTickParams::kUserOrderFieldNumber;
const int BattleTickParams::kNotificationsFieldNumber;
const int BattleTickParams::kCastSkillsFieldNumber;
#endif  // !_MSC_VER

BattleTickParams::BattleTickParams()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleTickParams::InitAsDefaultInstance() {
  userorder_ = const_cast< ::UserOrder*>(&::UserOrder::default_instance());
}

BattleTickParams::BattleTickParams(const BattleTickParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleTickParams::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  period_ = 0;
  tickrate_ = 0;
  controlmode_ = 0;
  userorder_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleTickParams::~BattleTickParams() {
  SharedDtor();
}

void BattleTickParams::SharedDtor() {
  if (battleid_ != &::google::protobuf::internal::kEmptyString) {
    delete battleid_;
  }
  if (this != default_instance_) {
    delete userorder_;
  }
}

void BattleTickParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleTickParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleTickParams_descriptor_;
}

const BattleTickParams& BattleTickParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

BattleTickParams* BattleTickParams::default_instance_ = NULL;

BattleTickParams* BattleTickParams::New() const {
  return new BattleTickParams;
}

void BattleTickParams::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_battleid()) {
      if (battleid_ != &::google::protobuf::internal::kEmptyString) {
        battleid_->clear();
      }
    }
    period_ = 0;
    tickrate_ = 0;
    controlmode_ = 0;
    if (has_userorder()) {
      if (userorder_ != NULL) userorder_->::UserOrder::Clear();
    }
  }
  notifications_.Clear();
  castskills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleTickParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string battleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_battleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->battleid().data(), this->battleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_period;
        break;
      }

      // required int32 period = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &period_)));
          set_has_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tickRate;
        break;
      }

      // required int32 tickRate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tickRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tickrate_)));
          set_has_tickrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_controlMode;
        break;
      }

      // optional int32 controlMode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_controlMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &controlmode_)));
          set_has_controlmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_userOrder;
        break;
      }

      // optional .UserOrder userOrder = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userOrder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userorder()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_notifications;
        break;
      }

      // repeated .UINotification notifications = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notifications:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notifications()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_notifications;
        if (input->ExpectTag(82)) goto parse_castSkills;
        break;
      }

      // repeated .CastSkill castSkills = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_castSkills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_castskills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_castSkills;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleTickParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string battleId = 1;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->battleid().data(), this->battleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->battleid(), output);
  }

  // required int32 period = 2;
  if (has_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->period(), output);
  }

  // required int32 tickRate = 3;
  if (has_tickrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tickrate(), output);
  }

  // optional int32 controlMode = 4;
  if (has_controlmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->controlmode(), output);
  }

  // optional .UserOrder userOrder = 5;
  if (has_userorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->userorder(), output);
  }

  // repeated .UINotification notifications = 6;
  for (int i = 0; i < this->notifications_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->notifications(i), output);
  }

  // repeated .CastSkill castSkills = 10;
  for (int i = 0; i < this->castskills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->castskills(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleTickParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string battleId = 1;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->battleid().data(), this->battleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->battleid(), target);
  }

  // required int32 period = 2;
  if (has_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->period(), target);
  }

  // required int32 tickRate = 3;
  if (has_tickrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tickrate(), target);
  }

  // optional int32 controlMode = 4;
  if (has_controlmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->controlmode(), target);
  }

  // optional .UserOrder userOrder = 5;
  if (has_userorder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->userorder(), target);
  }

  // repeated .UINotification notifications = 6;
  for (int i = 0; i < this->notifications_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->notifications(i), target);
  }

  // repeated .CastSkill castSkills = 10;
  for (int i = 0; i < this->castskills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->castskills(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleTickParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string battleId = 1;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->battleid());
    }

    // required int32 period = 2;
    if (has_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->period());
    }

    // required int32 tickRate = 3;
    if (has_tickrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tickrate());
    }

    // optional int32 controlMode = 4;
    if (has_controlmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->controlmode());
    }

    // optional .UserOrder userOrder = 5;
    if (has_userorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userorder());
    }

  }
  // repeated .UINotification notifications = 6;
  total_size += 1 * this->notifications_size();
  for (int i = 0; i < this->notifications_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notifications(i));
  }

  // repeated .CastSkill castSkills = 10;
  total_size += 1 * this->castskills_size();
  for (int i = 0; i < this->castskills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->castskills(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleTickParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleTickParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleTickParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleTickParams::MergeFrom(const BattleTickParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  notifications_.MergeFrom(from.notifications_);
  castskills_.MergeFrom(from.castskills_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
    if (from.has_period()) {
      set_period(from.period());
    }
    if (from.has_tickrate()) {
      set_tickrate(from.tickrate());
    }
    if (from.has_controlmode()) {
      set_controlmode(from.controlmode());
    }
    if (from.has_userorder()) {
      mutable_userorder()->::UserOrder::MergeFrom(from.userorder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleTickParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleTickParams::CopyFrom(const BattleTickParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleTickParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_userorder()) {
    if (!this->userorder().IsInitialized()) return false;
  }
  for (int i = 0; i < notifications_size(); i++) {
    if (!this->notifications(i).IsInitialized()) return false;
  }
  for (int i = 0; i < castskills_size(); i++) {
    if (!this->castskills(i).IsInitialized()) return false;
  }
  return true;
}

void BattleTickParams::Swap(BattleTickParams* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    std::swap(period_, other->period_);
    std::swap(tickrate_, other->tickrate_);
    std::swap(controlmode_, other->controlmode_);
    std::swap(userorder_, other->userorder_);
    notifications_.Swap(&other->notifications_);
    castskills_.Swap(&other->castskills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleTickParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleTickParams_descriptor_;
  metadata.reflection = BattleTickParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InitAction::kPosFieldNumber;
const int InitAction::kUnitHpFieldNumber;
const int InitAction::kHpFieldNumber;
#endif  // !_MSC_VER

InitAction::InitAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InitAction::InitAsDefaultInstance() {
  pos_ = const_cast< ::UnitPos*>(&::UnitPos::default_instance());
}

InitAction::InitAction(const InitAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InitAction::SharedCtor() {
  _cached_size_ = 0;
  pos_ = NULL;
  unithp_ = 0;
  hp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitAction::~InitAction() {
  SharedDtor();
}

void InitAction::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void InitAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitAction_descriptor_;
}

const InitAction& InitAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

InitAction* InitAction::default_instance_ = NULL;

InitAction* InitAction::New() const {
  return new InitAction;
}

void InitAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pos()) {
      if (pos_ != NULL) pos_->::UnitPos::Clear();
    }
    unithp_ = 0;
    hp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .UnitPos pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unitHp;
        break;
      }

      // required int32 unitHp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unitHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unithp_)));
          set_has_unithp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hp;
        break;
      }

      // required int32 hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .UnitPos pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pos(), output);
  }

  // required int32 unitHp = 2;
  if (has_unithp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->unithp(), output);
  }

  // required int32 hp = 3;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InitAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .UnitPos pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pos(), target);
  }

  // required int32 unitHp = 2;
  if (has_unithp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->unithp(), target);
  }

  // required int32 hp = 3;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InitAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .UnitPos pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // required int32 unitHp = 2;
    if (has_unithp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unithp());
    }

    // required int32 hp = 3;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitAction::MergeFrom(const InitAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      mutable_pos()->::UnitPos::MergeFrom(from.pos());
    }
    if (from.has_unithp()) {
      set_unithp(from.unithp());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitAction::CopyFrom(const InitAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void InitAction::Swap(InitAction* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(unithp_, other->unithp_);
    std::swap(hp_, other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitAction_descriptor_;
  metadata.reflection = InitAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveAction::kTargetIdFieldNumber;
const int MoveAction::kCurPosFieldNumber;
const int MoveAction::kMovePosFieldNumber;
const int MoveAction::kMoveDirFieldNumber;
const int MoveAction::kMovePeriodFieldNumber;
const int MoveAction::kTurnPeriodFieldNumber;
#endif  // !_MSC_VER

MoveAction::MoveAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveAction::InitAsDefaultInstance() {
  curpos_ = const_cast< ::UnitPos*>(&::UnitPos::default_instance());
  movepos_ = const_cast< ::UnitPos*>(&::UnitPos::default_instance());
}

MoveAction::MoveAction(const MoveAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveAction::SharedCtor() {
  _cached_size_ = 0;
  targetid_ = 0;
  curpos_ = NULL;
  movepos_ = NULL;
  movedir_ = 0;
  moveperiod_ = 0;
  turnperiod_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveAction::~MoveAction() {
  SharedDtor();
}

void MoveAction::SharedDtor() {
  if (this != default_instance_) {
    delete curpos_;
    delete movepos_;
  }
}

void MoveAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveAction_descriptor_;
}

const MoveAction& MoveAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

MoveAction* MoveAction::default_instance_ = NULL;

MoveAction* MoveAction::New() const {
  return new MoveAction;
}

void MoveAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    targetid_ = 0;
    if (has_curpos()) {
      if (curpos_ != NULL) curpos_->::UnitPos::Clear();
    }
    if (has_movepos()) {
      if (movepos_ != NULL) movepos_->::UnitPos::Clear();
    }
    movedir_ = 0;
    moveperiod_ = 0;
    turnperiod_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 targetId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_curPos;
        break;
      }

      // required .UnitPos curPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_curPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_movePos;
        break;
      }

      // required .UnitPos movePos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_movePos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_movepos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_moveDir;
        break;
      }

      // required int32 moveDir = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveDir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movedir_)));
          set_has_movedir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_movePeriod;
        break;
      }

      // optional int32 movePeriod = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_movePeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moveperiod_)));
          set_has_moveperiod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_turnPeriod;
        break;
      }

      // optional int32 turnPeriod = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turnPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turnperiod_)));
          set_has_turnperiod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 targetId = 1;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->targetid(), output);
  }

  // required .UnitPos curPos = 2;
  if (has_curpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->curpos(), output);
  }

  // required .UnitPos movePos = 3;
  if (has_movepos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->movepos(), output);
  }

  // required int32 moveDir = 4;
  if (has_movedir()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->movedir(), output);
  }

  // optional int32 movePeriod = 5;
  if (has_moveperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->moveperiod(), output);
  }

  // optional int32 turnPeriod = 6;
  if (has_turnperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->turnperiod(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 targetId = 1;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->targetid(), target);
  }

  // required .UnitPos curPos = 2;
  if (has_curpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->curpos(), target);
  }

  // required .UnitPos movePos = 3;
  if (has_movepos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->movepos(), target);
  }

  // required int32 moveDir = 4;
  if (has_movedir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->movedir(), target);
  }

  // optional int32 movePeriod = 5;
  if (has_moveperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->moveperiod(), target);
  }

  // optional int32 turnPeriod = 6;
  if (has_turnperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->turnperiod(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 targetId = 1;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

    // required .UnitPos curPos = 2;
    if (has_curpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->curpos());
    }

    // required .UnitPos movePos = 3;
    if (has_movepos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->movepos());
    }

    // required int32 moveDir = 4;
    if (has_movedir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movedir());
    }

    // optional int32 movePeriod = 5;
    if (has_moveperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moveperiod());
    }

    // optional int32 turnPeriod = 6;
    if (has_turnperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turnperiod());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveAction::MergeFrom(const MoveAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_curpos()) {
      mutable_curpos()->::UnitPos::MergeFrom(from.curpos());
    }
    if (from.has_movepos()) {
      mutable_movepos()->::UnitPos::MergeFrom(from.movepos());
    }
    if (from.has_movedir()) {
      set_movedir(from.movedir());
    }
    if (from.has_moveperiod()) {
      set_moveperiod(from.moveperiod());
    }
    if (from.has_turnperiod()) {
      set_turnperiod(from.turnperiod());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveAction::CopyFrom(const MoveAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_curpos()) {
    if (!this->curpos().IsInitialized()) return false;
  }
  if (has_movepos()) {
    if (!this->movepos().IsInitialized()) return false;
  }
  return true;
}

void MoveAction::Swap(MoveAction* other) {
  if (other != this) {
    std::swap(targetid_, other->targetid_);
    std::swap(curpos_, other->curpos_);
    std::swap(movepos_, other->movepos_);
    std::swap(movedir_, other->movedir_);
    std::swap(moveperiod_, other->moveperiod_);
    std::swap(turnperiod_, other->turnperiod_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveAction_descriptor_;
  metadata.reflection = MoveAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlyAction::kTargetIdFieldNumber;
const int FlyAction::kFromPosFieldNumber;
const int FlyAction::kTargetPosFieldNumber;
const int FlyAction::kFlyTimeFieldNumber;
const int FlyAction::kFlyDistFieldNumber;
#endif  // !_MSC_VER

FlyAction::FlyAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlyAction::InitAsDefaultInstance() {
  frompos_ = const_cast< ::UnitPos*>(&::UnitPos::default_instance());
  targetpos_ = const_cast< ::UnitPos*>(&::UnitPos::default_instance());
}

FlyAction::FlyAction(const FlyAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlyAction::SharedCtor() {
  _cached_size_ = 0;
  targetid_ = 0;
  frompos_ = NULL;
  targetpos_ = NULL;
  flytime_ = 0;
  flydist_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlyAction::~FlyAction() {
  SharedDtor();
}

void FlyAction::SharedDtor() {
  if (this != default_instance_) {
    delete frompos_;
    delete targetpos_;
  }
}

void FlyAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlyAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlyAction_descriptor_;
}

const FlyAction& FlyAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

FlyAction* FlyAction::default_instance_ = NULL;

FlyAction* FlyAction::New() const {
  return new FlyAction;
}

void FlyAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    targetid_ = 0;
    if (has_frompos()) {
      if (frompos_ != NULL) frompos_->::UnitPos::Clear();
    }
    if (has_targetpos()) {
      if (targetpos_ != NULL) targetpos_->::UnitPos::Clear();
    }
    flytime_ = 0;
    flydist_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlyAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 targetId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fromPos;
        break;
      }

      // required .UnitPos fromPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fromPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frompos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_targetPos;
        break;
      }

      // required .UnitPos targetPos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_flyTime;
        break;
      }

      // required int32 flyTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flytime_)));
          set_has_flytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_flyDist;
        break;
      }

      // required int32 flyDist = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flyDist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flydist_)));
          set_has_flydist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlyAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 targetId = 1;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->targetid(), output);
  }

  // required .UnitPos fromPos = 2;
  if (has_frompos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->frompos(), output);
  }

  // required .UnitPos targetPos = 3;
  if (has_targetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->targetpos(), output);
  }

  // required int32 flyTime = 4;
  if (has_flytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->flytime(), output);
  }

  // required int32 flyDist = 5;
  if (has_flydist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->flydist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlyAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 targetId = 1;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->targetid(), target);
  }

  // required .UnitPos fromPos = 2;
  if (has_frompos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->frompos(), target);
  }

  // required .UnitPos targetPos = 3;
  if (has_targetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->targetpos(), target);
  }

  // required int32 flyTime = 4;
  if (has_flytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->flytime(), target);
  }

  // required int32 flyDist = 5;
  if (has_flydist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->flydist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlyAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 targetId = 1;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

    // required .UnitPos fromPos = 2;
    if (has_frompos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frompos());
    }

    // required .UnitPos targetPos = 3;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetpos());
    }

    // required int32 flyTime = 4;
    if (has_flytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flytime());
    }

    // required int32 flyDist = 5;
    if (has_flydist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flydist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlyAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlyAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlyAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlyAction::MergeFrom(const FlyAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_frompos()) {
      mutable_frompos()->::UnitPos::MergeFrom(from.frompos());
    }
    if (from.has_targetpos()) {
      mutable_targetpos()->::UnitPos::MergeFrom(from.targetpos());
    }
    if (from.has_flytime()) {
      set_flytime(from.flytime());
    }
    if (from.has_flydist()) {
      set_flydist(from.flydist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlyAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlyAction::CopyFrom(const FlyAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlyAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_frompos()) {
    if (!this->frompos().IsInitialized()) return false;
  }
  if (has_targetpos()) {
    if (!this->targetpos().IsInitialized()) return false;
  }
  return true;
}

void FlyAction::Swap(FlyAction* other) {
  if (other != this) {
    std::swap(targetid_, other->targetid_);
    std::swap(frompos_, other->frompos_);
    std::swap(targetpos_, other->targetpos_);
    std::swap(flytime_, other->flytime_);
    std::swap(flydist_, other->flydist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlyAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlyAction_descriptor_;
  metadata.reflection = FlyAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlyAttackAction::kFromPosFieldNumber;
const int FlyAttackAction::kTargetIdFieldNumber;
const int FlyAttackAction::kTargetPosFieldNumber;
const int FlyAttackAction::kFlyTimeFieldNumber;
const int FlyAttackAction::kFlyDistFieldNumber;
const int FlyAttackAction::kFlyBackPosFieldNumber;
const int FlyAttackAction::kFlyBackTimeFieldNumber;
const int FlyAttackAction::kFlyBackDistFieldNumber;
#endif  // !_MSC_VER

FlyAttackAction::FlyAttackAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlyAttackAction::InitAsDefaultInstance() {
  frompos_ = const_cast< ::UnitPos*>(&::UnitPos::default_instance());
  targetpos_ = const_cast< ::UnitPos*>(&::UnitPos::default_instance());
  flybackpos_ = const_cast< ::UnitPos*>(&::UnitPos::default_instance());
}

FlyAttackAction::FlyAttackAction(const FlyAttackAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlyAttackAction::SharedCtor() {
  _cached_size_ = 0;
  frompos_ = NULL;
  targetid_ = 0;
  targetpos_ = NULL;
  flytime_ = 0;
  flydist_ = 0;
  flybackpos_ = NULL;
  flybacktime_ = 0;
  flybackdist_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlyAttackAction::~FlyAttackAction() {
  SharedDtor();
}

void FlyAttackAction::SharedDtor() {
  if (this != default_instance_) {
    delete frompos_;
    delete targetpos_;
    delete flybackpos_;
  }
}

void FlyAttackAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlyAttackAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlyAttackAction_descriptor_;
}

const FlyAttackAction& FlyAttackAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

FlyAttackAction* FlyAttackAction::default_instance_ = NULL;

FlyAttackAction* FlyAttackAction::New() const {
  return new FlyAttackAction;
}

void FlyAttackAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_frompos()) {
      if (frompos_ != NULL) frompos_->::UnitPos::Clear();
    }
    targetid_ = 0;
    if (has_targetpos()) {
      if (targetpos_ != NULL) targetpos_->::UnitPos::Clear();
    }
    flytime_ = 0;
    flydist_ = 0;
    if (has_flybackpos()) {
      if (flybackpos_ != NULL) flybackpos_->::UnitPos::Clear();
    }
    flybacktime_ = 0;
    flybackdist_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlyAttackAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .UnitPos fromPos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frompos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetId;
        break;
      }

      // optional int32 targetId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_targetPos;
        break;
      }

      // required .UnitPos targetPos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_flyTime;
        break;
      }

      // required int32 flyTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flytime_)));
          set_has_flytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_flyDist;
        break;
      }

      // required int32 flyDist = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flyDist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flydist_)));
          set_has_flydist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_flyBackPos;
        break;
      }

      // optional .UnitPos flyBackPos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flyBackPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flybackpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_flyBackTime;
        break;
      }

      // optional int32 flyBackTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flyBackTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flybacktime_)));
          set_has_flybacktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_flyBackDist;
        break;
      }

      // optional int32 flyBackDist = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flyBackDist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flybackdist_)));
          set_has_flybackdist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlyAttackAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .UnitPos fromPos = 1;
  if (has_frompos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->frompos(), output);
  }

  // optional int32 targetId = 2;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->targetid(), output);
  }

  // required .UnitPos targetPos = 3;
  if (has_targetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->targetpos(), output);
  }

  // required int32 flyTime = 4;
  if (has_flytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->flytime(), output);
  }

  // required int32 flyDist = 5;
  if (has_flydist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->flydist(), output);
  }

  // optional .UnitPos flyBackPos = 6;
  if (has_flybackpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->flybackpos(), output);
  }

  // optional int32 flyBackTime = 7;
  if (has_flybacktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->flybacktime(), output);
  }

  // optional int32 flyBackDist = 8;
  if (has_flybackdist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->flybackdist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlyAttackAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .UnitPos fromPos = 1;
  if (has_frompos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->frompos(), target);
  }

  // optional int32 targetId = 2;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->targetid(), target);
  }

  // required .UnitPos targetPos = 3;
  if (has_targetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->targetpos(), target);
  }

  // required int32 flyTime = 4;
  if (has_flytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->flytime(), target);
  }

  // required int32 flyDist = 5;
  if (has_flydist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->flydist(), target);
  }

  // optional .UnitPos flyBackPos = 6;
  if (has_flybackpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->flybackpos(), target);
  }

  // optional int32 flyBackTime = 7;
  if (has_flybacktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->flybacktime(), target);
  }

  // optional int32 flyBackDist = 8;
  if (has_flybackdist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->flybackdist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlyAttackAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .UnitPos fromPos = 1;
    if (has_frompos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frompos());
    }

    // optional int32 targetId = 2;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

    // required .UnitPos targetPos = 3;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetpos());
    }

    // required int32 flyTime = 4;
    if (has_flytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flytime());
    }

    // required int32 flyDist = 5;
    if (has_flydist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flydist());
    }

    // optional .UnitPos flyBackPos = 6;
    if (has_flybackpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flybackpos());
    }

    // optional int32 flyBackTime = 7;
    if (has_flybacktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flybacktime());
    }

    // optional int32 flyBackDist = 8;
    if (has_flybackdist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flybackdist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlyAttackAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlyAttackAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlyAttackAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlyAttackAction::MergeFrom(const FlyAttackAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frompos()) {
      mutable_frompos()->::UnitPos::MergeFrom(from.frompos());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_targetpos()) {
      mutable_targetpos()->::UnitPos::MergeFrom(from.targetpos());
    }
    if (from.has_flytime()) {
      set_flytime(from.flytime());
    }
    if (from.has_flydist()) {
      set_flydist(from.flydist());
    }
    if (from.has_flybackpos()) {
      mutable_flybackpos()->::UnitPos::MergeFrom(from.flybackpos());
    }
    if (from.has_flybacktime()) {
      set_flybacktime(from.flybacktime());
    }
    if (from.has_flybackdist()) {
      set_flybackdist(from.flybackdist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlyAttackAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlyAttackAction::CopyFrom(const FlyAttackAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlyAttackAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  if (has_frompos()) {
    if (!this->frompos().IsInitialized()) return false;
  }
  if (has_targetpos()) {
    if (!this->targetpos().IsInitialized()) return false;
  }
  if (has_flybackpos()) {
    if (!this->flybackpos().IsInitialized()) return false;
  }
  return true;
}

void FlyAttackAction::Swap(FlyAttackAction* other) {
  if (other != this) {
    std::swap(frompos_, other->frompos_);
    std::swap(targetid_, other->targetid_);
    std::swap(targetpos_, other->targetpos_);
    std::swap(flytime_, other->flytime_);
    std::swap(flydist_, other->flydist_);
    std::swap(flybackpos_, other->flybackpos_);
    std::swap(flybacktime_, other->flybacktime_);
    std::swap(flybackdist_, other->flybackdist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlyAttackAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlyAttackAction_descriptor_;
  metadata.reflection = FlyAttackAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GlideAction::kGlideTimeFieldNumber;
const int GlideAction::kGlidePosFieldNumber;
#endif  // !_MSC_VER

GlideAction::GlideAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlideAction::InitAsDefaultInstance() {
  glidepos_ = const_cast< ::UnitPos*>(&::UnitPos::default_instance());
}

GlideAction::GlideAction(const GlideAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlideAction::SharedCtor() {
  _cached_size_ = 0;
  glidetime_ = 0;
  glidepos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlideAction::~GlideAction() {
  SharedDtor();
}

void GlideAction::SharedDtor() {
  if (this != default_instance_) {
    delete glidepos_;
  }
}

void GlideAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlideAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlideAction_descriptor_;
}

const GlideAction& GlideAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

GlideAction* GlideAction::default_instance_ = NULL;

GlideAction* GlideAction::New() const {
  return new GlideAction;
}

void GlideAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    glidetime_ = 0;
    if (has_glidepos()) {
      if (glidepos_ != NULL) glidepos_->::UnitPos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlideAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 glideTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &glidetime_)));
          set_has_glidetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_glidePos;
        break;
      }

      // optional .UnitPos glidePos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_glidePos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_glidepos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlideAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 glideTime = 1;
  if (has_glidetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->glidetime(), output);
  }

  // optional .UnitPos glidePos = 2;
  if (has_glidepos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->glidepos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlideAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 glideTime = 1;
  if (has_glidetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->glidetime(), target);
  }

  // optional .UnitPos glidePos = 2;
  if (has_glidepos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->glidepos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlideAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 glideTime = 1;
    if (has_glidetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->glidetime());
    }

    // optional .UnitPos glidePos = 2;
    if (has_glidepos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->glidepos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlideAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlideAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlideAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlideAction::MergeFrom(const GlideAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_glidetime()) {
      set_glidetime(from.glidetime());
    }
    if (from.has_glidepos()) {
      mutable_glidepos()->::UnitPos::MergeFrom(from.glidepos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlideAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlideAction::CopyFrom(const GlideAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlideAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_glidepos()) {
    if (!this->glidepos().IsInitialized()) return false;
  }
  return true;
}

void GlideAction::Swap(GlideAction* other) {
  if (other != this) {
    std::swap(glidetime_, other->glidetime_);
    std::swap(glidepos_, other->glidepos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlideAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlideAction_descriptor_;
  metadata.reflection = GlideAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StopAction::kCurPosFieldNumber;
#endif  // !_MSC_VER

StopAction::StopAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StopAction::InitAsDefaultInstance() {
  curpos_ = const_cast< ::UnitPos*>(&::UnitPos::default_instance());
}

StopAction::StopAction(const StopAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StopAction::SharedCtor() {
  _cached_size_ = 0;
  curpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopAction::~StopAction() {
  SharedDtor();
}

void StopAction::SharedDtor() {
  if (this != default_instance_) {
    delete curpos_;
  }
}

void StopAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopAction_descriptor_;
}

const StopAction& StopAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

StopAction* StopAction::default_instance_ = NULL;

StopAction* StopAction::New() const {
  return new StopAction;
}

void StopAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_curpos()) {
      if (curpos_ != NULL) curpos_->::UnitPos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .UnitPos curPos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StopAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .UnitPos curPos = 1;
  if (has_curpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->curpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StopAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .UnitPos curPos = 1;
  if (has_curpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->curpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StopAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .UnitPos curPos = 1;
    if (has_curpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->curpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopAction::MergeFrom(const StopAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curpos()) {
      mutable_curpos()->::UnitPos::MergeFrom(from.curpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopAction::CopyFrom(const StopAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_curpos()) {
    if (!this->curpos().IsInitialized()) return false;
  }
  return true;
}

void StopAction::Swap(StopAction* other) {
  if (other != this) {
    std::swap(curpos_, other->curpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopAction_descriptor_;
  metadata.reflection = StopAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttackAction::kSkillIdFieldNumber;
const int AttackAction::kTargetIdFieldNumber;
const int AttackAction::kBulletTimeFieldNumber;
const int AttackAction::kTargetPosFieldNumber;
const int AttackAction::kDamageFieldNumber;
#endif  // !_MSC_VER

AttackAction::AttackAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttackAction::InitAsDefaultInstance() {
  targetpos_ = const_cast< ::UnitPos*>(&::UnitPos::default_instance());
}

AttackAction::AttackAction(const AttackAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttackAction::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0;
  targetid_ = 0;
  bullettime_ = 0;
  targetpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttackAction::~AttackAction() {
  SharedDtor();
}

void AttackAction::SharedDtor() {
  if (this != default_instance_) {
    delete targetpos_;
  }
}

void AttackAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttackAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttackAction_descriptor_;
}

const AttackAction& AttackAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

AttackAction* AttackAction::default_instance_ = NULL;

AttackAction* AttackAction::New() const {
  return new AttackAction;
}

void AttackAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0;
    targetid_ = 0;
    bullettime_ = 0;
    if (has_targetpos()) {
      if (targetpos_ != NULL) targetpos_->::UnitPos::Clear();
    }
  }
  damage_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttackAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetId;
        break;
      }

      // required int32 targetId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bulletTime;
        break;
      }

      // required int32 bulletTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bulletTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullettime_)));
          set_has_bullettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_targetPos;
        break;
      }

      // required .UnitPos targetPos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_damage;
        break;
      }

      // repeated .UnitDamage damage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_damage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_damage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_damage;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttackAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 skillId = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }

  // required int32 targetId = 2;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->targetid(), output);
  }

  // required int32 bulletTime = 3;
  if (has_bullettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bullettime(), output);
  }

  // required .UnitPos targetPos = 4;
  if (has_targetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->targetpos(), output);
  }

  // repeated .UnitDamage damage = 5;
  for (int i = 0; i < this->damage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->damage(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttackAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 skillId = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }

  // required int32 targetId = 2;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->targetid(), target);
  }

  // required int32 bulletTime = 3;
  if (has_bullettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bullettime(), target);
  }

  // required .UnitPos targetPos = 4;
  if (has_targetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->targetpos(), target);
  }

  // repeated .UnitDamage damage = 5;
  for (int i = 0; i < this->damage_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->damage(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttackAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // required int32 targetId = 2;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

    // required int32 bulletTime = 3;
    if (has_bullettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bullettime());
    }

    // required .UnitPos targetPos = 4;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetpos());
    }

  }
  // repeated .UnitDamage damage = 5;
  total_size += 1 * this->damage_size();
  for (int i = 0; i < this->damage_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->damage(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttackAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttackAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttackAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttackAction::MergeFrom(const AttackAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  damage_.MergeFrom(from.damage_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_bullettime()) {
      set_bullettime(from.bullettime());
    }
    if (from.has_targetpos()) {
      mutable_targetpos()->::UnitPos::MergeFrom(from.targetpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttackAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttackAction::CopyFrom(const AttackAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttackAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_targetpos()) {
    if (!this->targetpos().IsInitialized()) return false;
  }
  for (int i = 0; i < damage_size(); i++) {
    if (!this->damage(i).IsInitialized()) return false;
  }
  return true;
}

void AttackAction::Swap(AttackAction* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(targetid_, other->targetid_);
    std::swap(bullettime_, other->bullettime_);
    std::swap(targetpos_, other->targetpos_);
    damage_.Swap(&other->damage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttackAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttackAction_descriptor_;
  metadata.reflection = AttackAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillCastAction::kSkillIdFieldNumber;
const int SkillCastAction::kTargetIdFieldNumber;
const int SkillCastAction::kTargetPosFieldNumber;
#endif  // !_MSC_VER

SkillCastAction::SkillCastAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillCastAction::InitAsDefaultInstance() {
  targetpos_ = const_cast< ::UnitPos*>(&::UnitPos::default_instance());
}

SkillCastAction::SkillCastAction(const SkillCastAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillCastAction::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0;
  targetid_ = 0;
  targetpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillCastAction::~SkillCastAction() {
  SharedDtor();
}

void SkillCastAction::SharedDtor() {
  if (this != default_instance_) {
    delete targetpos_;
  }
}

void SkillCastAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillCastAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillCastAction_descriptor_;
}

const SkillCastAction& SkillCastAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

SkillCastAction* SkillCastAction::default_instance_ = NULL;

SkillCastAction* SkillCastAction::New() const {
  return new SkillCastAction;
}

void SkillCastAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0;
    targetid_ = 0;
    if (has_targetpos()) {
      if (targetpos_ != NULL) targetpos_->::UnitPos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillCastAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetId;
        break;
      }

      // optional int32 targetId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_targetPos;
        break;
      }

      // optional .UnitPos targetPos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillCastAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 skillId = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }

  // optional int32 targetId = 2;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->targetid(), output);
  }

  // optional .UnitPos targetPos = 3;
  if (has_targetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->targetpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillCastAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 skillId = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }

  // optional int32 targetId = 2;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->targetid(), target);
  }

  // optional .UnitPos targetPos = 3;
  if (has_targetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->targetpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillCastAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional int32 targetId = 2;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

    // optional .UnitPos targetPos = 3;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillCastAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillCastAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillCastAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillCastAction::MergeFrom(const SkillCastAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_targetpos()) {
      mutable_targetpos()->::UnitPos::MergeFrom(from.targetpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillCastAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillCastAction::CopyFrom(const SkillCastAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillCastAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_targetpos()) {
    if (!this->targetpos().IsInitialized()) return false;
  }
  return true;
}

void SkillCastAction::Swap(SkillCastAction* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(targetid_, other->targetid_);
    std::swap(targetpos_, other->targetpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillCastAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillCastAction_descriptor_;
  metadata.reflection = SkillCastAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffAttachAction::kBuffFieldNumber;
const int BuffAttachAction::kPeriodFieldNumber;
#endif  // !_MSC_VER

BuffAttachAction::BuffAttachAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuffAttachAction::InitAsDefaultInstance() {
}

BuffAttachAction::BuffAttachAction(const BuffAttachAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuffAttachAction::SharedCtor() {
  _cached_size_ = 0;
  buff_ = 0;
  period_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffAttachAction::~BuffAttachAction() {
  SharedDtor();
}

void BuffAttachAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffAttachAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffAttachAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffAttachAction_descriptor_;
}

const BuffAttachAction& BuffAttachAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

BuffAttachAction* BuffAttachAction::default_instance_ = NULL;

BuffAttachAction* BuffAttachAction::New() const {
  return new BuffAttachAction;
}

void BuffAttachAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buff_ = 0;
    period_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffAttachAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 buff = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_)));
          set_has_buff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_period;
        break;
      }

      // required int32 period = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &period_)));
          set_has_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuffAttachAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 buff = 1;
  if (has_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buff(), output);
  }

  // required int32 period = 2;
  if (has_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->period(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuffAttachAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 buff = 1;
  if (has_buff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buff(), target);
  }

  // required int32 period = 2;
  if (has_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->period(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuffAttachAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 buff = 1;
    if (has_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff());
    }

    // required int32 period = 2;
    if (has_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->period());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffAttachAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffAttachAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffAttachAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffAttachAction::MergeFrom(const BuffAttachAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buff()) {
      set_buff(from.buff());
    }
    if (from.has_period()) {
      set_period(from.period());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffAttachAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffAttachAction::CopyFrom(const BuffAttachAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffAttachAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BuffAttachAction::Swap(BuffAttachAction* other) {
  if (other != this) {
    std::swap(buff_, other->buff_);
    std::swap(period_, other->period_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffAttachAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffAttachAction_descriptor_;
  metadata.reflection = BuffAttachAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffRemoveAction::kBuffFieldNumber;
#endif  // !_MSC_VER

BuffRemoveAction::BuffRemoveAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuffRemoveAction::InitAsDefaultInstance() {
}

BuffRemoveAction::BuffRemoveAction(const BuffRemoveAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuffRemoveAction::SharedCtor() {
  _cached_size_ = 0;
  buff_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffRemoveAction::~BuffRemoveAction() {
  SharedDtor();
}

void BuffRemoveAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffRemoveAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffRemoveAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffRemoveAction_descriptor_;
}

const BuffRemoveAction& BuffRemoveAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

BuffRemoveAction* BuffRemoveAction::default_instance_ = NULL;

BuffRemoveAction* BuffRemoveAction::New() const {
  return new BuffRemoveAction;
}

void BuffRemoveAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buff_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffRemoveAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 buff = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_)));
          set_has_buff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuffRemoveAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 buff = 1;
  if (has_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buff(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuffRemoveAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 buff = 1;
  if (has_buff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buff(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuffRemoveAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 buff = 1;
    if (has_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffRemoveAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffRemoveAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffRemoveAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffRemoveAction::MergeFrom(const BuffRemoveAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buff()) {
      set_buff(from.buff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffRemoveAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffRemoveAction::CopyFrom(const BuffRemoveAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffRemoveAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BuffRemoveAction::Swap(BuffRemoveAction* other) {
  if (other != this) {
    std::swap(buff_, other->buff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffRemoveAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffRemoveAction_descriptor_;
  metadata.reflection = BuffRemoveAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffAffectAction::kBuffFieldNumber;
const int BuffAffectAction::kDamageFieldNumber;
#endif  // !_MSC_VER

BuffAffectAction::BuffAffectAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuffAffectAction::InitAsDefaultInstance() {
}

BuffAffectAction::BuffAffectAction(const BuffAffectAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuffAffectAction::SharedCtor() {
  _cached_size_ = 0;
  buff_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffAffectAction::~BuffAffectAction() {
  SharedDtor();
}

void BuffAffectAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffAffectAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffAffectAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffAffectAction_descriptor_;
}

const BuffAffectAction& BuffAffectAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

BuffAffectAction* BuffAffectAction::default_instance_ = NULL;

BuffAffectAction* BuffAffectAction::New() const {
  return new BuffAffectAction;
}

void BuffAffectAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buff_ = 0;
  }
  damage_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffAffectAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 buff = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_)));
          set_has_buff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_damage;
        break;
      }

      // repeated .UnitDamage damage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_damage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_damage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_damage;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuffAffectAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 buff = 1;
  if (has_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buff(), output);
  }

  // repeated .UnitDamage damage = 2;
  for (int i = 0; i < this->damage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->damage(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuffAffectAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 buff = 1;
  if (has_buff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buff(), target);
  }

  // repeated .UnitDamage damage = 2;
  for (int i = 0; i < this->damage_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->damage(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuffAffectAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 buff = 1;
    if (has_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff());
    }

  }
  // repeated .UnitDamage damage = 2;
  total_size += 1 * this->damage_size();
  for (int i = 0; i < this->damage_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->damage(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffAffectAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffAffectAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffAffectAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffAffectAction::MergeFrom(const BuffAffectAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  damage_.MergeFrom(from.damage_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buff()) {
      set_buff(from.buff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffAffectAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffAffectAction::CopyFrom(const BuffAffectAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffAffectAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < damage_size(); i++) {
    if (!this->damage(i).IsInitialized()) return false;
  }
  return true;
}

void BuffAffectAction::Swap(BuffAffectAction* other) {
  if (other != this) {
    std::swap(buff_, other->buff_);
    damage_.Swap(&other->damage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffAffectAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffAffectAction_descriptor_;
  metadata.reflection = BuffAffectAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReviveAction::kPosFieldNumber;
const int ReviveAction::kCountFieldNumber;
const int ReviveAction::kHpFieldNumber;
#endif  // !_MSC_VER

ReviveAction::ReviveAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReviveAction::InitAsDefaultInstance() {
  pos_ = const_cast< ::UnitPos*>(&::UnitPos::default_instance());
}

ReviveAction::ReviveAction(const ReviveAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReviveAction::SharedCtor() {
  _cached_size_ = 0;
  pos_ = NULL;
  count_ = 0;
  hp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReviveAction::~ReviveAction() {
  SharedDtor();
}

void ReviveAction::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void ReviveAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReviveAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReviveAction_descriptor_;
}

const ReviveAction& ReviveAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

ReviveAction* ReviveAction::default_instance_ = NULL;

ReviveAction* ReviveAction::New() const {
  return new ReviveAction;
}

void ReviveAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pos()) {
      if (pos_ != NULL) pos_->::UnitPos::Clear();
    }
    count_ = 0;
    hp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReviveAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .UnitPos pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hp;
        break;
      }

      // required int32 hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReviveAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .UnitPos pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pos(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // required int32 hp = 3;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReviveAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .UnitPos pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pos(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // required int32 hp = 3;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReviveAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .UnitPos pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // required int32 hp = 3;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReviveAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReviveAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReviveAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReviveAction::MergeFrom(const ReviveAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      mutable_pos()->::UnitPos::MergeFrom(from.pos());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReviveAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReviveAction::CopyFrom(const ReviveAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReviveAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void ReviveAction::Swap(ReviveAction* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(count_, other->count_);
    std::swap(hp_, other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReviveAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReviveAction_descriptor_;
  metadata.reflection = ReviveAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateData::kUnitFieldNumber;
const int CreateData::kTargetPosFieldNumber;
const int CreateData::kTargetUnitFieldNumber;
#endif  // !_MSC_VER

CreateData::CreateData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateData::InitAsDefaultInstance() {
  unit_ = const_cast< ::UnitData*>(&::UnitData::default_instance());
  targetpos_ = const_cast< ::UnitPos*>(&::UnitPos::default_instance());
}

CreateData::CreateData(const CreateData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateData::SharedCtor() {
  _cached_size_ = 0;
  unit_ = NULL;
  targetpos_ = NULL;
  targetunit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateData::~CreateData() {
  SharedDtor();
}

void CreateData::SharedDtor() {
  if (this != default_instance_) {
    delete unit_;
    delete targetpos_;
  }
}

void CreateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateData_descriptor_;
}

const CreateData& CreateData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

CreateData* CreateData::default_instance_ = NULL;

CreateData* CreateData::New() const {
  return new CreateData;
}

void CreateData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_unit()) {
      if (unit_ != NULL) unit_->::UnitData::Clear();
    }
    if (has_targetpos()) {
      if (targetpos_ != NULL) targetpos_->::UnitPos::Clear();
    }
    targetunit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .UnitData unit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_targetPos;
        break;
      }

      // optional .UnitPos targetPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_targetUnit;
        break;
      }

      // optional int32 targetUnit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetUnit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetunit_)));
          set_has_targetunit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .UnitData unit = 1;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->unit(), output);
  }

  // optional .UnitPos targetPos = 2;
  if (has_targetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->targetpos(), output);
  }

  // optional int32 targetUnit = 3;
  if (has_targetunit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->targetunit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .UnitData unit = 1;
  if (has_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->unit(), target);
  }

  // optional .UnitPos targetPos = 2;
  if (has_targetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->targetpos(), target);
  }

  // optional int32 targetUnit = 3;
  if (has_targetunit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->targetunit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .UnitData unit = 1;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unit());
    }

    // optional .UnitPos targetPos = 2;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetpos());
    }

    // optional int32 targetUnit = 3;
    if (has_targetunit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetunit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateData::MergeFrom(const CreateData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unit()) {
      mutable_unit()->::UnitData::MergeFrom(from.unit());
    }
    if (from.has_targetpos()) {
      mutable_targetpos()->::UnitPos::MergeFrom(from.targetpos());
    }
    if (from.has_targetunit()) {
      set_targetunit(from.targetunit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateData::CopyFrom(const CreateData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_unit()) {
    if (!this->unit().IsInitialized()) return false;
  }
  if (has_targetpos()) {
    if (!this->targetpos().IsInitialized()) return false;
  }
  return true;
}

void CreateData::Swap(CreateData* other) {
  if (other != this) {
    std::swap(unit_, other->unit_);
    std::swap(targetpos_, other->targetpos_);
    std::swap(targetunit_, other->targetunit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateData_descriptor_;
  metadata.reflection = CreateData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateAction::kSkillIdFieldNumber;
const int CreateAction::kDataFieldNumber;
#endif  // !_MSC_VER

CreateAction::CreateAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateAction::InitAsDefaultInstance() {
}

CreateAction::CreateAction(const CreateAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateAction::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateAction::~CreateAction() {
  SharedDtor();
}

void CreateAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateAction_descriptor_;
}

const CreateAction& CreateAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

CreateAction* CreateAction::default_instance_ = NULL;

CreateAction* CreateAction::New() const {
  return new CreateAction;
}

void CreateAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .CreateData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 skillId = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }

  // repeated .CreateData data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 skillId = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }

  // repeated .CreateData data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

  }
  // repeated .CreateData data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateAction::MergeFrom(const CreateAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAction::CopyFrom(const CreateAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void CreateAction::Swap(CreateAction* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateAction_descriptor_;
  metadata.reflection = CreateAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DisappearAction::DisappearAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DisappearAction::InitAsDefaultInstance() {
}

DisappearAction::DisappearAction(const DisappearAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DisappearAction::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DisappearAction::~DisappearAction() {
  SharedDtor();
}

void DisappearAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DisappearAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisappearAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DisappearAction_descriptor_;
}

const DisappearAction& DisappearAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

DisappearAction* DisappearAction::default_instance_ = NULL;

DisappearAction* DisappearAction::New() const {
  return new DisappearAction;
}

void DisappearAction::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DisappearAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DisappearAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DisappearAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DisappearAction::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisappearAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DisappearAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DisappearAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DisappearAction::MergeFrom(const DisappearAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DisappearAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisappearAction::CopyFrom(const DisappearAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisappearAction::IsInitialized() const {

  return true;
}

void DisappearAction::Swap(DisappearAction* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DisappearAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DisappearAction_descriptor_;
  metadata.reflection = DisappearAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeadAction::kCountFieldNumber;
const int DeadAction::kHpFieldNumber;
#endif  // !_MSC_VER

DeadAction::DeadAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeadAction::InitAsDefaultInstance() {
}

DeadAction::DeadAction(const DeadAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeadAction::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  hp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeadAction::~DeadAction() {
  SharedDtor();
}

void DeadAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeadAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeadAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeadAction_descriptor_;
}

const DeadAction& DeadAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

DeadAction* DeadAction::default_instance_ = NULL;

DeadAction* DeadAction::New() const {
  return new DeadAction;
}

void DeadAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
    hp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeadAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hp;
        break;
      }

      // required int32 hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeadAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // required int32 hp = 2;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeadAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // required int32 hp = 2;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeadAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // required int32 hp = 2;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeadAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeadAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeadAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeadAction::MergeFrom(const DeadAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeadAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeadAction::CopyFrom(const DeadAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeadAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DeadAction::Swap(DeadAction* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(hp_, other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeadAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeadAction_descriptor_;
  metadata.reflection = DeadAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WarningAction::kTroopTypeFieldNumber;
#endif  // !_MSC_VER

WarningAction::WarningAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WarningAction::InitAsDefaultInstance() {
}

WarningAction::WarningAction(const WarningAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WarningAction::SharedCtor() {
  _cached_size_ = 0;
  trooptype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarningAction::~WarningAction() {
  SharedDtor();
}

void WarningAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WarningAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarningAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarningAction_descriptor_;
}

const WarningAction& WarningAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

WarningAction* WarningAction::default_instance_ = NULL;

WarningAction* WarningAction::New() const {
  return new WarningAction;
}

void WarningAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trooptype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarningAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 troopType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trooptype_)));
          set_has_trooptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarningAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 troopType = 1;
  if (has_trooptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trooptype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WarningAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 troopType = 1;
  if (has_trooptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trooptype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WarningAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 troopType = 1;
    if (has_trooptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trooptype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarningAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarningAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarningAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarningAction::MergeFrom(const WarningAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trooptype()) {
      set_trooptype(from.trooptype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarningAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarningAction::CopyFrom(const WarningAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarningAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WarningAction::Swap(WarningAction* other) {
  if (other != this) {
    std::swap(trooptype_, other->trooptype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WarningAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WarningAction_descriptor_;
  metadata.reflection = WarningAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FinishAction::kWinTroopFieldNumber;
const int FinishAction::kCastSkillsFieldNumber;
#endif  // !_MSC_VER

FinishAction::FinishAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FinishAction::InitAsDefaultInstance() {
}

FinishAction::FinishAction(const FinishAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FinishAction::SharedCtor() {
  _cached_size_ = 0;
  wintroop_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FinishAction::~FinishAction() {
  SharedDtor();
}

void FinishAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FinishAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FinishAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FinishAction_descriptor_;
}

const FinishAction& FinishAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

FinishAction* FinishAction::default_instance_ = NULL;

FinishAction* FinishAction::New() const {
  return new FinishAction;
}

void FinishAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wintroop_ = 0;
  }
  castskills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FinishAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 winTroop = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wintroop_)));
          set_has_wintroop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_castSkills;
        break;
      }

      // repeated .CastSkill castSkills = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_castSkills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_castskills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_castSkills;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FinishAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 winTroop = 1;
  if (has_wintroop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wintroop(), output);
  }

  // repeated .CastSkill castSkills = 2;
  for (int i = 0; i < this->castskills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->castskills(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FinishAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 winTroop = 1;
  if (has_wintroop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wintroop(), target);
  }

  // repeated .CastSkill castSkills = 2;
  for (int i = 0; i < this->castskills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->castskills(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FinishAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 winTroop = 1;
    if (has_wintroop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wintroop());
    }

  }
  // repeated .CastSkill castSkills = 2;
  total_size += 1 * this->castskills_size();
  for (int i = 0; i < this->castskills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->castskills(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FinishAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FinishAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FinishAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FinishAction::MergeFrom(const FinishAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  castskills_.MergeFrom(from.castskills_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wintroop()) {
      set_wintroop(from.wintroop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FinishAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinishAction::CopyFrom(const FinishAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinishAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < castskills_size(); i++) {
    if (!this->castskills(i).IsInitialized()) return false;
  }
  return true;
}

void FinishAction::Swap(FinishAction* other) {
  if (other != this) {
    std::swap(wintroop_, other->wintroop_);
    castskills_.Swap(&other->castskills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FinishAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FinishAction_descriptor_;
  metadata.reflection = FinishAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveDataUpdate::kMoveTargetIdFieldNumber;
const int MoveDataUpdate::kMoveTargetPosFieldNumber;
const int MoveDataUpdate::kMoveDirFieldNumber;
const int MoveDataUpdate::kMovePeriodFieldNumber;
const int MoveDataUpdate::kForwardTimeFieldNumber;
const int MoveDataUpdate::kTurnPeriodFieldNumber;
#endif  // !_MSC_VER

MoveDataUpdate::MoveDataUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveDataUpdate::InitAsDefaultInstance() {
  movetargetpos_ = const_cast< ::UnitPos*>(&::UnitPos::default_instance());
}

MoveDataUpdate::MoveDataUpdate(const MoveDataUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveDataUpdate::SharedCtor() {
  _cached_size_ = 0;
  movetargetid_ = 0;
  movetargetpos_ = NULL;
  movedir_ = 0;
  moveperiod_ = 0;
  forwardtime_ = 0;
  turnperiod_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveDataUpdate::~MoveDataUpdate() {
  SharedDtor();
}

void MoveDataUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete movetargetpos_;
  }
}

void MoveDataUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveDataUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveDataUpdate_descriptor_;
}

const MoveDataUpdate& MoveDataUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

MoveDataUpdate* MoveDataUpdate::default_instance_ = NULL;

MoveDataUpdate* MoveDataUpdate::New() const {
  return new MoveDataUpdate;
}

void MoveDataUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    movetargetid_ = 0;
    if (has_movetargetpos()) {
      if (movetargetpos_ != NULL) movetargetpos_->::UnitPos::Clear();
    }
    movedir_ = 0;
    moveperiod_ = 0;
    forwardtime_ = 0;
    turnperiod_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveDataUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 moveTargetId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movetargetid_)));
          set_has_movetargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_moveTargetPos;
        break;
      }

      // required .UnitPos moveTargetPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_moveTargetPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_movetargetpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_moveDir;
        break;
      }

      // required int32 moveDir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveDir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movedir_)));
          set_has_movedir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_movePeriod;
        break;
      }

      // required int32 movePeriod = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_movePeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moveperiod_)));
          set_has_moveperiod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_forwardTime;
        break;
      }

      // required int32 forwardTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forwardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &forwardtime_)));
          set_has_forwardtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_turnPeriod;
        break;
      }

      // optional int32 turnPeriod = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turnPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turnperiod_)));
          set_has_turnperiod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveDataUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 moveTargetId = 1;
  if (has_movetargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->movetargetid(), output);
  }

  // required .UnitPos moveTargetPos = 2;
  if (has_movetargetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->movetargetpos(), output);
  }

  // required int32 moveDir = 3;
  if (has_movedir()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->movedir(), output);
  }

  // required int32 movePeriod = 4;
  if (has_moveperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->moveperiod(), output);
  }

  // required int32 forwardTime = 5;
  if (has_forwardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->forwardtime(), output);
  }

  // optional int32 turnPeriod = 6;
  if (has_turnperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->turnperiod(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveDataUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 moveTargetId = 1;
  if (has_movetargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->movetargetid(), target);
  }

  // required .UnitPos moveTargetPos = 2;
  if (has_movetargetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->movetargetpos(), target);
  }

  // required int32 moveDir = 3;
  if (has_movedir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->movedir(), target);
  }

  // required int32 movePeriod = 4;
  if (has_moveperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->moveperiod(), target);
  }

  // required int32 forwardTime = 5;
  if (has_forwardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->forwardtime(), target);
  }

  // optional int32 turnPeriod = 6;
  if (has_turnperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->turnperiod(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveDataUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 moveTargetId = 1;
    if (has_movetargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movetargetid());
    }

    // required .UnitPos moveTargetPos = 2;
    if (has_movetargetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->movetargetpos());
    }

    // required int32 moveDir = 3;
    if (has_movedir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movedir());
    }

    // required int32 movePeriod = 4;
    if (has_moveperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moveperiod());
    }

    // required int32 forwardTime = 5;
    if (has_forwardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->forwardtime());
    }

    // optional int32 turnPeriod = 6;
    if (has_turnperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turnperiod());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveDataUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveDataUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveDataUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveDataUpdate::MergeFrom(const MoveDataUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_movetargetid()) {
      set_movetargetid(from.movetargetid());
    }
    if (from.has_movetargetpos()) {
      mutable_movetargetpos()->::UnitPos::MergeFrom(from.movetargetpos());
    }
    if (from.has_movedir()) {
      set_movedir(from.movedir());
    }
    if (from.has_moveperiod()) {
      set_moveperiod(from.moveperiod());
    }
    if (from.has_forwardtime()) {
      set_forwardtime(from.forwardtime());
    }
    if (from.has_turnperiod()) {
      set_turnperiod(from.turnperiod());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveDataUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveDataUpdate::CopyFrom(const MoveDataUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveDataUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_movetargetpos()) {
    if (!this->movetargetpos().IsInitialized()) return false;
  }
  return true;
}

void MoveDataUpdate::Swap(MoveDataUpdate* other) {
  if (other != this) {
    std::swap(movetargetid_, other->movetargetid_);
    std::swap(movetargetpos_, other->movetargetpos_);
    std::swap(movedir_, other->movedir_);
    std::swap(moveperiod_, other->moveperiod_);
    std::swap(forwardtime_, other->forwardtime_);
    std::swap(turnperiod_, other->turnperiod_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveDataUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveDataUpdate_descriptor_;
  metadata.reflection = MoveDataUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlyAttackDataUpdate::kTargetIdFieldNumber;
const int FlyAttackDataUpdate::kTargetPosFieldNumber;
const int FlyAttackDataUpdate::kDamageFieldNumber;
#endif  // !_MSC_VER

FlyAttackDataUpdate::FlyAttackDataUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlyAttackDataUpdate::InitAsDefaultInstance() {
  targetpos_ = const_cast< ::UnitPos*>(&::UnitPos::default_instance());
}

FlyAttackDataUpdate::FlyAttackDataUpdate(const FlyAttackDataUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlyAttackDataUpdate::SharedCtor() {
  _cached_size_ = 0;
  targetid_ = 0;
  targetpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlyAttackDataUpdate::~FlyAttackDataUpdate() {
  SharedDtor();
}

void FlyAttackDataUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete targetpos_;
  }
}

void FlyAttackDataUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlyAttackDataUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlyAttackDataUpdate_descriptor_;
}

const FlyAttackDataUpdate& FlyAttackDataUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

FlyAttackDataUpdate* FlyAttackDataUpdate::default_instance_ = NULL;

FlyAttackDataUpdate* FlyAttackDataUpdate::New() const {
  return new FlyAttackDataUpdate;
}

void FlyAttackDataUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    targetid_ = 0;
    if (has_targetpos()) {
      if (targetpos_ != NULL) targetpos_->::UnitPos::Clear();
    }
  }
  damage_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlyAttackDataUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 targetId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_targetPos;
        break;
      }

      // required .UnitPos targetPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_damage;
        break;
      }

      // repeated .UnitDamage damage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_damage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_damage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_damage;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlyAttackDataUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 targetId = 1;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->targetid(), output);
  }

  // required .UnitPos targetPos = 2;
  if (has_targetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->targetpos(), output);
  }

  // repeated .UnitDamage damage = 3;
  for (int i = 0; i < this->damage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->damage(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlyAttackDataUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 targetId = 1;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->targetid(), target);
  }

  // required .UnitPos targetPos = 2;
  if (has_targetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->targetpos(), target);
  }

  // repeated .UnitDamage damage = 3;
  for (int i = 0; i < this->damage_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->damage(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlyAttackDataUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 targetId = 1;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

    // required .UnitPos targetPos = 2;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetpos());
    }

  }
  // repeated .UnitDamage damage = 3;
  total_size += 1 * this->damage_size();
  for (int i = 0; i < this->damage_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->damage(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlyAttackDataUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlyAttackDataUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlyAttackDataUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlyAttackDataUpdate::MergeFrom(const FlyAttackDataUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  damage_.MergeFrom(from.damage_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_targetpos()) {
      mutable_targetpos()->::UnitPos::MergeFrom(from.targetpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlyAttackDataUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlyAttackDataUpdate::CopyFrom(const FlyAttackDataUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlyAttackDataUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_targetpos()) {
    if (!this->targetpos().IsInitialized()) return false;
  }
  for (int i = 0; i < damage_size(); i++) {
    if (!this->damage(i).IsInitialized()) return false;
  }
  return true;
}

void FlyAttackDataUpdate::Swap(FlyAttackDataUpdate* other) {
  if (other != this) {
    std::swap(targetid_, other->targetid_);
    std::swap(targetpos_, other->targetpos_);
    damage_.Swap(&other->damage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlyAttackDataUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlyAttackDataUpdate_descriptor_;
  metadata.reflection = FlyAttackDataUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StateDataUpdateAction::kUpdateActionFieldNumber;
const int StateDataUpdateAction::kMoveDataFieldNumber;
const int StateDataUpdateAction::kFlyAttackDataFieldNumber;
#endif  // !_MSC_VER

StateDataUpdateAction::StateDataUpdateAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StateDataUpdateAction::InitAsDefaultInstance() {
  movedata_ = const_cast< ::MoveDataUpdate*>(&::MoveDataUpdate::default_instance());
  flyattackdata_ = const_cast< ::FlyAttackDataUpdate*>(&::FlyAttackDataUpdate::default_instance());
}

StateDataUpdateAction::StateDataUpdateAction(const StateDataUpdateAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StateDataUpdateAction::SharedCtor() {
  _cached_size_ = 0;
  updateaction_ = 0;
  movedata_ = NULL;
  flyattackdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateDataUpdateAction::~StateDataUpdateAction() {
  SharedDtor();
}

void StateDataUpdateAction::SharedDtor() {
  if (this != default_instance_) {
    delete movedata_;
    delete flyattackdata_;
  }
}

void StateDataUpdateAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateDataUpdateAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateDataUpdateAction_descriptor_;
}

const StateDataUpdateAction& StateDataUpdateAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

StateDataUpdateAction* StateDataUpdateAction::default_instance_ = NULL;

StateDataUpdateAction* StateDataUpdateAction::New() const {
  return new StateDataUpdateAction;
}

void StateDataUpdateAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    updateaction_ = 0;
    if (has_movedata()) {
      if (movedata_ != NULL) movedata_->::MoveDataUpdate::Clear();
    }
    if (has_flyattackdata()) {
      if (flyattackdata_ != NULL) flyattackdata_->::FlyAttackDataUpdate::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StateDataUpdateAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 updateAction = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updateaction_)));
          set_has_updateaction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_moveData;
        break;
      }

      // optional .MoveDataUpdate moveData = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_moveData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_movedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_flyAttackData;
        break;
      }

      // optional .FlyAttackDataUpdate flyAttackData = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flyAttackData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flyattackdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StateDataUpdateAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 updateAction = 1;
  if (has_updateaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->updateaction(), output);
  }

  // optional .MoveDataUpdate moveData = 10;
  if (has_movedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->movedata(), output);
  }

  // optional .FlyAttackDataUpdate flyAttackData = 11;
  if (has_flyattackdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->flyattackdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StateDataUpdateAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 updateAction = 1;
  if (has_updateaction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->updateaction(), target);
  }

  // optional .MoveDataUpdate moveData = 10;
  if (has_movedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->movedata(), target);
  }

  // optional .FlyAttackDataUpdate flyAttackData = 11;
  if (has_flyattackdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->flyattackdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StateDataUpdateAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 updateAction = 1;
    if (has_updateaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updateaction());
    }

    // optional .MoveDataUpdate moveData = 10;
    if (has_movedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->movedata());
    }

    // optional .FlyAttackDataUpdate flyAttackData = 11;
    if (has_flyattackdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flyattackdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateDataUpdateAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StateDataUpdateAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StateDataUpdateAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StateDataUpdateAction::MergeFrom(const StateDataUpdateAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_updateaction()) {
      set_updateaction(from.updateaction());
    }
    if (from.has_movedata()) {
      mutable_movedata()->::MoveDataUpdate::MergeFrom(from.movedata());
    }
    if (from.has_flyattackdata()) {
      mutable_flyattackdata()->::FlyAttackDataUpdate::MergeFrom(from.flyattackdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StateDataUpdateAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateDataUpdateAction::CopyFrom(const StateDataUpdateAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateDataUpdateAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_movedata()) {
    if (!this->movedata().IsInitialized()) return false;
  }
  if (has_flyattackdata()) {
    if (!this->flyattackdata().IsInitialized()) return false;
  }
  return true;
}

void StateDataUpdateAction::Swap(StateDataUpdateAction* other) {
  if (other != this) {
    std::swap(updateaction_, other->updateaction_);
    std::swap(movedata_, other->movedata_);
    std::swap(flyattackdata_, other->flyattackdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StateDataUpdateAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateDataUpdateAction_descriptor_;
  metadata.reflection = StateDataUpdateAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BusyAction::kBusyTypeFieldNumber;
const int BusyAction::kDurationFieldNumber;
const int BusyAction::kExtParamsFieldNumber;
#endif  // !_MSC_VER

BusyAction::BusyAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BusyAction::InitAsDefaultInstance() {
}

BusyAction::BusyAction(const BusyAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BusyAction::SharedCtor() {
  _cached_size_ = 0;
  busytype_ = 1;
  duration_ = 0;
  extparams_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BusyAction::~BusyAction() {
  SharedDtor();
}

void BusyAction::SharedDtor() {
  if (extparams_ != &::google::protobuf::internal::kEmptyString) {
    delete extparams_;
  }
  if (this != default_instance_) {
  }
}

void BusyAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BusyAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BusyAction_descriptor_;
}

const BusyAction& BusyAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

BusyAction* BusyAction::default_instance_ = NULL;

BusyAction* BusyAction::New() const {
  return new BusyAction;
}

void BusyAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    busytype_ = 1;
    duration_ = 0;
    if (has_extparams()) {
      if (extparams_ != &::google::protobuf::internal::kEmptyString) {
        extparams_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BusyAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .BusyType busyType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BusyType_IsValid(value)) {
            set_busytype(static_cast< ::BusyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duration;
        break;
      }

      // required int32 duration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_extParams;
        break;
      }

      // optional string extParams = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extParams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extparams()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extparams().data(), this->extparams().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BusyAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .BusyType busyType = 1;
  if (has_busytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->busytype(), output);
  }

  // required int32 duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duration(), output);
  }

  // optional string extParams = 3;
  if (has_extparams()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extparams().data(), this->extparams().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->extparams(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BusyAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .BusyType busyType = 1;
  if (has_busytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->busytype(), target);
  }

  // required int32 duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duration(), target);
  }

  // optional string extParams = 3;
  if (has_extparams()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extparams().data(), this->extparams().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->extparams(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BusyAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .BusyType busyType = 1;
    if (has_busytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->busytype());
    }

    // required int32 duration = 2;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional string extParams = 3;
    if (has_extparams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extparams());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BusyAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BusyAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BusyAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BusyAction::MergeFrom(const BusyAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_busytype()) {
      set_busytype(from.busytype());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_extparams()) {
      set_extparams(from.extparams());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BusyAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BusyAction::CopyFrom(const BusyAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusyAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BusyAction::Swap(BusyAction* other) {
  if (other != this) {
    std::swap(busytype_, other->busytype_);
    std::swap(duration_, other->duration_);
    std::swap(extparams_, other->extparams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BusyAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BusyAction_descriptor_;
  metadata.reflection = BusyAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeTroopAction::kTroopTypeFieldNumber;
#endif  // !_MSC_VER

ChangeTroopAction::ChangeTroopAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeTroopAction::InitAsDefaultInstance() {
}

ChangeTroopAction::ChangeTroopAction(const ChangeTroopAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeTroopAction::SharedCtor() {
  _cached_size_ = 0;
  trooptype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeTroopAction::~ChangeTroopAction() {
  SharedDtor();
}

void ChangeTroopAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeTroopAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeTroopAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeTroopAction_descriptor_;
}

const ChangeTroopAction& ChangeTroopAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

ChangeTroopAction* ChangeTroopAction::default_instance_ = NULL;

ChangeTroopAction* ChangeTroopAction::New() const {
  return new ChangeTroopAction;
}

void ChangeTroopAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trooptype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeTroopAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 troopType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trooptype_)));
          set_has_trooptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeTroopAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 troopType = 1;
  if (has_trooptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trooptype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeTroopAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 troopType = 1;
  if (has_trooptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trooptype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeTroopAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 troopType = 1;
    if (has_trooptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trooptype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeTroopAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeTroopAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeTroopAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeTroopAction::MergeFrom(const ChangeTroopAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trooptype()) {
      set_trooptype(from.trooptype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeTroopAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeTroopAction::CopyFrom(const ChangeTroopAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeTroopAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChangeTroopAction::Swap(ChangeTroopAction* other) {
  if (other != this) {
    std::swap(trooptype_, other->trooptype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeTroopAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeTroopAction_descriptor_;
  metadata.reflection = ChangeTroopAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeExtendStateAction::kEsfPrevFieldNumber;
const int ChangeExtendStateAction::kEsfNewFieldNumber;
#endif  // !_MSC_VER

ChangeExtendStateAction::ChangeExtendStateAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeExtendStateAction::InitAsDefaultInstance() {
}

ChangeExtendStateAction::ChangeExtendStateAction(const ChangeExtendStateAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeExtendStateAction::SharedCtor() {
  _cached_size_ = 0;
  esfprev_ = 0;
  esfnew_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeExtendStateAction::~ChangeExtendStateAction() {
  SharedDtor();
}

void ChangeExtendStateAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeExtendStateAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeExtendStateAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeExtendStateAction_descriptor_;
}

const ChangeExtendStateAction& ChangeExtendStateAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

ChangeExtendStateAction* ChangeExtendStateAction::default_instance_ = NULL;

ChangeExtendStateAction* ChangeExtendStateAction::New() const {
  return new ChangeExtendStateAction;
}

void ChangeExtendStateAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    esfprev_ = 0;
    esfnew_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeExtendStateAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 esfPrev = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &esfprev_)));
          set_has_esfprev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_esfNew;
        break;
      }

      // required int32 esfNew = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_esfNew:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &esfnew_)));
          set_has_esfnew();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeExtendStateAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 esfPrev = 1;
  if (has_esfprev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->esfprev(), output);
  }

  // required int32 esfNew = 2;
  if (has_esfnew()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->esfnew(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeExtendStateAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 esfPrev = 1;
  if (has_esfprev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->esfprev(), target);
  }

  // required int32 esfNew = 2;
  if (has_esfnew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->esfnew(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeExtendStateAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 esfPrev = 1;
    if (has_esfprev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->esfprev());
    }

    // required int32 esfNew = 2;
    if (has_esfnew()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->esfnew());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeExtendStateAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeExtendStateAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeExtendStateAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeExtendStateAction::MergeFrom(const ChangeExtendStateAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_esfprev()) {
      set_esfprev(from.esfprev());
    }
    if (from.has_esfnew()) {
      set_esfnew(from.esfnew());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeExtendStateAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeExtendStateAction::CopyFrom(const ChangeExtendStateAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeExtendStateAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChangeExtendStateAction::Swap(ChangeExtendStateAction* other) {
  if (other != this) {
    std::swap(esfprev_, other->esfprev_);
    std::swap(esfnew_, other->esfnew_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeExtendStateAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeExtendStateAction_descriptor_;
  metadata.reflection = ChangeExtendStateAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleAction::kTimeFieldNumber;
const int BattleAction::kTypeFieldNumber;
const int BattleAction::kUnitIdFieldNumber;
const int BattleAction::kInitFieldNumber;
const int BattleAction::kMoveFieldNumber;
const int BattleAction::kFlyFieldNumber;
const int BattleAction::kFlyAttackFieldNumber;
const int BattleAction::kAttackFieldNumber;
const int BattleAction::kStopFieldNumber;
const int BattleAction::kDeadFieldNumber;
const int BattleAction::kBuffAttachFieldNumber;
const int BattleAction::kBuffRemoveFieldNumber;
const int BattleAction::kBuffAffectFieldNumber;
const int BattleAction::kDisappearFieldNumber;
const int BattleAction::kCreateFieldNumber;
const int BattleAction::kFinishFieldNumber;
const int BattleAction::kSkillCastFieldNumber;
const int BattleAction::kReviveFieldNumber;
const int BattleAction::kGlideFieldNumber;
const int BattleAction::kWarningFieldNumber;
const int BattleAction::kBusyFieldNumber;
const int BattleAction::kChangeTroopFieldNumber;
const int BattleAction::kStateDataUpdateFieldNumber;
const int BattleAction::kChangeExtendStateFieldNumber;
#endif  // !_MSC_VER

BattleAction::BattleAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleAction::InitAsDefaultInstance() {
  init_ = const_cast< ::InitAction*>(&::InitAction::default_instance());
  move_ = const_cast< ::MoveAction*>(&::MoveAction::default_instance());
  fly_ = const_cast< ::FlyAction*>(&::FlyAction::default_instance());
  flyattack_ = const_cast< ::FlyAttackAction*>(&::FlyAttackAction::default_instance());
  attack_ = const_cast< ::AttackAction*>(&::AttackAction::default_instance());
  stop_ = const_cast< ::StopAction*>(&::StopAction::default_instance());
  dead_ = const_cast< ::DeadAction*>(&::DeadAction::default_instance());
  buffattach_ = const_cast< ::BuffAttachAction*>(&::BuffAttachAction::default_instance());
  buffremove_ = const_cast< ::BuffRemoveAction*>(&::BuffRemoveAction::default_instance());
  buffaffect_ = const_cast< ::BuffAffectAction*>(&::BuffAffectAction::default_instance());
  disappear_ = const_cast< ::DisappearAction*>(&::DisappearAction::default_instance());
  create_ = const_cast< ::CreateAction*>(&::CreateAction::default_instance());
  finish_ = const_cast< ::FinishAction*>(&::FinishAction::default_instance());
  skillcast_ = const_cast< ::SkillCastAction*>(&::SkillCastAction::default_instance());
  revive_ = const_cast< ::ReviveAction*>(&::ReviveAction::default_instance());
  glide_ = const_cast< ::GlideAction*>(&::GlideAction::default_instance());
  warning_ = const_cast< ::WarningAction*>(&::WarningAction::default_instance());
  busy_ = const_cast< ::BusyAction*>(&::BusyAction::default_instance());
  changetroop_ = const_cast< ::ChangeTroopAction*>(&::ChangeTroopAction::default_instance());
  statedataupdate_ = const_cast< ::StateDataUpdateAction*>(&::StateDataUpdateAction::default_instance());
  changeextendstate_ = const_cast< ::ChangeExtendStateAction*>(&::ChangeExtendStateAction::default_instance());
}

BattleAction::BattleAction(const BattleAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleAction::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0;
  type_ = 0;
  unitid_ = 0;
  init_ = NULL;
  move_ = NULL;
  fly_ = NULL;
  flyattack_ = NULL;
  attack_ = NULL;
  stop_ = NULL;
  dead_ = NULL;
  buffattach_ = NULL;
  buffremove_ = NULL;
  buffaffect_ = NULL;
  disappear_ = NULL;
  create_ = NULL;
  finish_ = NULL;
  skillcast_ = NULL;
  revive_ = NULL;
  glide_ = NULL;
  warning_ = NULL;
  busy_ = NULL;
  changetroop_ = NULL;
  statedataupdate_ = NULL;
  changeextendstate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleAction::~BattleAction() {
  SharedDtor();
}

void BattleAction::SharedDtor() {
  if (this != default_instance_) {
    delete init_;
    delete move_;
    delete fly_;
    delete flyattack_;
    delete attack_;
    delete stop_;
    delete dead_;
    delete buffattach_;
    delete buffremove_;
    delete buffaffect_;
    delete disappear_;
    delete create_;
    delete finish_;
    delete skillcast_;
    delete revive_;
    delete glide_;
    delete warning_;
    delete busy_;
    delete changetroop_;
    delete statedataupdate_;
    delete changeextendstate_;
  }
}

void BattleAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleAction_descriptor_;
}

const BattleAction& BattleAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

BattleAction* BattleAction::default_instance_ = NULL;

BattleAction* BattleAction::New() const {
  return new BattleAction;
}

void BattleAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0;
    type_ = 0;
    unitid_ = 0;
    if (has_init()) {
      if (init_ != NULL) init_->::InitAction::Clear();
    }
    if (has_move()) {
      if (move_ != NULL) move_->::MoveAction::Clear();
    }
    if (has_fly()) {
      if (fly_ != NULL) fly_->::FlyAction::Clear();
    }
    if (has_flyattack()) {
      if (flyattack_ != NULL) flyattack_->::FlyAttackAction::Clear();
    }
    if (has_attack()) {
      if (attack_ != NULL) attack_->::AttackAction::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_stop()) {
      if (stop_ != NULL) stop_->::StopAction::Clear();
    }
    if (has_dead()) {
      if (dead_ != NULL) dead_->::DeadAction::Clear();
    }
    if (has_buffattach()) {
      if (buffattach_ != NULL) buffattach_->::BuffAttachAction::Clear();
    }
    if (has_buffremove()) {
      if (buffremove_ != NULL) buffremove_->::BuffRemoveAction::Clear();
    }
    if (has_buffaffect()) {
      if (buffaffect_ != NULL) buffaffect_->::BuffAffectAction::Clear();
    }
    if (has_disappear()) {
      if (disappear_ != NULL) disappear_->::DisappearAction::Clear();
    }
    if (has_create()) {
      if (create_ != NULL) create_->::CreateAction::Clear();
    }
    if (has_finish()) {
      if (finish_ != NULL) finish_->::FinishAction::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_skillcast()) {
      if (skillcast_ != NULL) skillcast_->::SkillCastAction::Clear();
    }
    if (has_revive()) {
      if (revive_ != NULL) revive_->::ReviveAction::Clear();
    }
    if (has_glide()) {
      if (glide_ != NULL) glide_->::GlideAction::Clear();
    }
    if (has_warning()) {
      if (warning_ != NULL) warning_->::WarningAction::Clear();
    }
    if (has_busy()) {
      if (busy_ != NULL) busy_->::BusyAction::Clear();
    }
    if (has_changetroop()) {
      if (changetroop_ != NULL) changetroop_->::ChangeTroopAction::Clear();
    }
    if (has_statedataupdate()) {
      if (statedataupdate_ != NULL) statedataupdate_->::StateDataUpdateAction::Clear();
    }
    if (has_changeextendstate()) {
      if (changeextendstate_ != NULL) changeextendstate_->::ChangeExtendStateAction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_unitId;
        break;
      }

      // required int32 unitId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unitId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unitid_)));
          set_has_unitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_init;
        break;
      }

      // optional .InitAction init = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_init:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_move;
        break;
      }

      // optional .MoveAction move = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_move:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_move()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_fly;
        break;
      }

      // optional .FlyAction fly = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fly:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fly()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_flyAttack;
        break;
      }

      // optional .FlyAttackAction flyAttack = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flyAttack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flyattack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_attack;
        break;
      }

      // optional .AttackAction attack = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_stop;
        break;
      }

      // optional .StopAction stop = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_dead;
        break;
      }

      // optional .DeadAction dead = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dead:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dead()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_buffAttach;
        break;
      }

      // optional .BuffAttachAction buffAttach = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buffAttach:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffattach()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_buffRemove;
        break;
      }

      // optional .BuffRemoveAction buffRemove = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buffRemove:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffremove()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_buffAffect;
        break;
      }

      // optional .BuffAffectAction buffAffect = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buffAffect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffaffect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_disappear;
        break;
      }

      // optional .DisappearAction disappear = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disappear:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_disappear()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_create;
        break;
      }

      // optional .CreateAction create = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_create:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_finish;
        break;
      }

      // optional .FinishAction finish = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_finish:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_finish()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_skillCast;
        break;
      }

      // optional .SkillCastAction skillCast = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillCast:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skillcast()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_revive;
        break;
      }

      // optional .ReviveAction revive = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_revive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_revive()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_glide;
        break;
      }

      // optional .GlideAction glide = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_glide:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_glide()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_warning;
        break;
      }

      // optional .WarningAction warning = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_warning:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_warning()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_busy;
        break;
      }

      // optional .BusyAction busy = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_busy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_busy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_changeTroop;
        break;
      }

      // optional .ChangeTroopAction changeTroop = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_changeTroop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_changetroop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_stateDataUpdate;
        break;
      }

      // optional .StateDataUpdateAction stateDataUpdate = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stateDataUpdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statedataupdate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_changeExtendState;
        break;
      }

      // optional .ChangeExtendStateAction changeExtendState = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_changeExtendState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_changeextendstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 unitId = 3;
  if (has_unitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->unitid(), output);
  }

  // optional .InitAction init = 10;
  if (has_init()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->init(), output);
  }

  // optional .MoveAction move = 11;
  if (has_move()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->move(), output);
  }

  // optional .FlyAction fly = 12;
  if (has_fly()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->fly(), output);
  }

  // optional .FlyAttackAction flyAttack = 13;
  if (has_flyattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->flyattack(), output);
  }

  // optional .AttackAction attack = 14;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->attack(), output);
  }

  // optional .StopAction stop = 15;
  if (has_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->stop(), output);
  }

  // optional .DeadAction dead = 16;
  if (has_dead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->dead(), output);
  }

  // optional .BuffAttachAction buffAttach = 17;
  if (has_buffattach()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->buffattach(), output);
  }

  // optional .BuffRemoveAction buffRemove = 18;
  if (has_buffremove()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->buffremove(), output);
  }

  // optional .BuffAffectAction buffAffect = 19;
  if (has_buffaffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->buffaffect(), output);
  }

  // optional .DisappearAction disappear = 21;
  if (has_disappear()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->disappear(), output);
  }

  // optional .CreateAction create = 22;
  if (has_create()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->create(), output);
  }

  // optional .FinishAction finish = 23;
  if (has_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->finish(), output);
  }

  // optional .SkillCastAction skillCast = 24;
  if (has_skillcast()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->skillcast(), output);
  }

  // optional .ReviveAction revive = 25;
  if (has_revive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->revive(), output);
  }

  // optional .GlideAction glide = 26;
  if (has_glide()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->glide(), output);
  }

  // optional .WarningAction warning = 27;
  if (has_warning()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->warning(), output);
  }

  // optional .BusyAction busy = 28;
  if (has_busy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->busy(), output);
  }

  // optional .ChangeTroopAction changeTroop = 29;
  if (has_changetroop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->changetroop(), output);
  }

  // optional .StateDataUpdateAction stateDataUpdate = 30;
  if (has_statedataupdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->statedataupdate(), output);
  }

  // optional .ChangeExtendStateAction changeExtendState = 31;
  if (has_changeextendstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->changeextendstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 unitId = 3;
  if (has_unitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->unitid(), target);
  }

  // optional .InitAction init = 10;
  if (has_init()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->init(), target);
  }

  // optional .MoveAction move = 11;
  if (has_move()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->move(), target);
  }

  // optional .FlyAction fly = 12;
  if (has_fly()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->fly(), target);
  }

  // optional .FlyAttackAction flyAttack = 13;
  if (has_flyattack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->flyattack(), target);
  }

  // optional .AttackAction attack = 14;
  if (has_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->attack(), target);
  }

  // optional .StopAction stop = 15;
  if (has_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->stop(), target);
  }

  // optional .DeadAction dead = 16;
  if (has_dead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->dead(), target);
  }

  // optional .BuffAttachAction buffAttach = 17;
  if (has_buffattach()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->buffattach(), target);
  }

  // optional .BuffRemoveAction buffRemove = 18;
  if (has_buffremove()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->buffremove(), target);
  }

  // optional .BuffAffectAction buffAffect = 19;
  if (has_buffaffect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->buffaffect(), target);
  }

  // optional .DisappearAction disappear = 21;
  if (has_disappear()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->disappear(), target);
  }

  // optional .CreateAction create = 22;
  if (has_create()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->create(), target);
  }

  // optional .FinishAction finish = 23;
  if (has_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->finish(), target);
  }

  // optional .SkillCastAction skillCast = 24;
  if (has_skillcast()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->skillcast(), target);
  }

  // optional .ReviveAction revive = 25;
  if (has_revive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->revive(), target);
  }

  // optional .GlideAction glide = 26;
  if (has_glide()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->glide(), target);
  }

  // optional .WarningAction warning = 27;
  if (has_warning()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->warning(), target);
  }

  // optional .BusyAction busy = 28;
  if (has_busy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->busy(), target);
  }

  // optional .ChangeTroopAction changeTroop = 29;
  if (has_changetroop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->changetroop(), target);
  }

  // optional .StateDataUpdateAction stateDataUpdate = 30;
  if (has_statedataupdate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->statedataupdate(), target);
  }

  // optional .ChangeExtendStateAction changeExtendState = 31;
  if (has_changeextendstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->changeextendstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 unitId = 3;
    if (has_unitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unitid());
    }

    // optional .InitAction init = 10;
    if (has_init()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->init());
    }

    // optional .MoveAction move = 11;
    if (has_move()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->move());
    }

    // optional .FlyAction fly = 12;
    if (has_fly()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fly());
    }

    // optional .FlyAttackAction flyAttack = 13;
    if (has_flyattack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flyattack());
    }

    // optional .AttackAction attack = 14;
    if (has_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attack());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .StopAction stop = 15;
    if (has_stop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stop());
    }

    // optional .DeadAction dead = 16;
    if (has_dead()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dead());
    }

    // optional .BuffAttachAction buffAttach = 17;
    if (has_buffattach()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffattach());
    }

    // optional .BuffRemoveAction buffRemove = 18;
    if (has_buffremove()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffremove());
    }

    // optional .BuffAffectAction buffAffect = 19;
    if (has_buffaffect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffaffect());
    }

    // optional .DisappearAction disappear = 21;
    if (has_disappear()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->disappear());
    }

    // optional .CreateAction create = 22;
    if (has_create()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->create());
    }

    // optional .FinishAction finish = 23;
    if (has_finish()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->finish());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .SkillCastAction skillCast = 24;
    if (has_skillcast()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skillcast());
    }

    // optional .ReviveAction revive = 25;
    if (has_revive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->revive());
    }

    // optional .GlideAction glide = 26;
    if (has_glide()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->glide());
    }

    // optional .WarningAction warning = 27;
    if (has_warning()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->warning());
    }

    // optional .BusyAction busy = 28;
    if (has_busy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->busy());
    }

    // optional .ChangeTroopAction changeTroop = 29;
    if (has_changetroop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->changetroop());
    }

    // optional .StateDataUpdateAction stateDataUpdate = 30;
    if (has_statedataupdate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statedataupdate());
    }

    // optional .ChangeExtendStateAction changeExtendState = 31;
    if (has_changeextendstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->changeextendstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleAction::MergeFrom(const BattleAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_unitid()) {
      set_unitid(from.unitid());
    }
    if (from.has_init()) {
      mutable_init()->::InitAction::MergeFrom(from.init());
    }
    if (from.has_move()) {
      mutable_move()->::MoveAction::MergeFrom(from.move());
    }
    if (from.has_fly()) {
      mutable_fly()->::FlyAction::MergeFrom(from.fly());
    }
    if (from.has_flyattack()) {
      mutable_flyattack()->::FlyAttackAction::MergeFrom(from.flyattack());
    }
    if (from.has_attack()) {
      mutable_attack()->::AttackAction::MergeFrom(from.attack());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_stop()) {
      mutable_stop()->::StopAction::MergeFrom(from.stop());
    }
    if (from.has_dead()) {
      mutable_dead()->::DeadAction::MergeFrom(from.dead());
    }
    if (from.has_buffattach()) {
      mutable_buffattach()->::BuffAttachAction::MergeFrom(from.buffattach());
    }
    if (from.has_buffremove()) {
      mutable_buffremove()->::BuffRemoveAction::MergeFrom(from.buffremove());
    }
    if (from.has_buffaffect()) {
      mutable_buffaffect()->::BuffAffectAction::MergeFrom(from.buffaffect());
    }
    if (from.has_disappear()) {
      mutable_disappear()->::DisappearAction::MergeFrom(from.disappear());
    }
    if (from.has_create()) {
      mutable_create()->::CreateAction::MergeFrom(from.create());
    }
    if (from.has_finish()) {
      mutable_finish()->::FinishAction::MergeFrom(from.finish());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_skillcast()) {
      mutable_skillcast()->::SkillCastAction::MergeFrom(from.skillcast());
    }
    if (from.has_revive()) {
      mutable_revive()->::ReviveAction::MergeFrom(from.revive());
    }
    if (from.has_glide()) {
      mutable_glide()->::GlideAction::MergeFrom(from.glide());
    }
    if (from.has_warning()) {
      mutable_warning()->::WarningAction::MergeFrom(from.warning());
    }
    if (from.has_busy()) {
      mutable_busy()->::BusyAction::MergeFrom(from.busy());
    }
    if (from.has_changetroop()) {
      mutable_changetroop()->::ChangeTroopAction::MergeFrom(from.changetroop());
    }
    if (from.has_statedataupdate()) {
      mutable_statedataupdate()->::StateDataUpdateAction::MergeFrom(from.statedataupdate());
    }
    if (from.has_changeextendstate()) {
      mutable_changeextendstate()->::ChangeExtendStateAction::MergeFrom(from.changeextendstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleAction::CopyFrom(const BattleAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_init()) {
    if (!this->init().IsInitialized()) return false;
  }
  if (has_move()) {
    if (!this->move().IsInitialized()) return false;
  }
  if (has_fly()) {
    if (!this->fly().IsInitialized()) return false;
  }
  if (has_flyattack()) {
    if (!this->flyattack().IsInitialized()) return false;
  }
  if (has_attack()) {
    if (!this->attack().IsInitialized()) return false;
  }
  if (has_stop()) {
    if (!this->stop().IsInitialized()) return false;
  }
  if (has_dead()) {
    if (!this->dead().IsInitialized()) return false;
  }
  if (has_buffattach()) {
    if (!this->buffattach().IsInitialized()) return false;
  }
  if (has_buffremove()) {
    if (!this->buffremove().IsInitialized()) return false;
  }
  if (has_buffaffect()) {
    if (!this->buffaffect().IsInitialized()) return false;
  }
  if (has_create()) {
    if (!this->create().IsInitialized()) return false;
  }
  if (has_finish()) {
    if (!this->finish().IsInitialized()) return false;
  }
  if (has_skillcast()) {
    if (!this->skillcast().IsInitialized()) return false;
  }
  if (has_revive()) {
    if (!this->revive().IsInitialized()) return false;
  }
  if (has_glide()) {
    if (!this->glide().IsInitialized()) return false;
  }
  if (has_warning()) {
    if (!this->warning().IsInitialized()) return false;
  }
  if (has_busy()) {
    if (!this->busy().IsInitialized()) return false;
  }
  if (has_changetroop()) {
    if (!this->changetroop().IsInitialized()) return false;
  }
  if (has_statedataupdate()) {
    if (!this->statedataupdate().IsInitialized()) return false;
  }
  if (has_changeextendstate()) {
    if (!this->changeextendstate().IsInitialized()) return false;
  }
  return true;
}

void BattleAction::Swap(BattleAction* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(type_, other->type_);
    std::swap(unitid_, other->unitid_);
    std::swap(init_, other->init_);
    std::swap(move_, other->move_);
    std::swap(fly_, other->fly_);
    std::swap(flyattack_, other->flyattack_);
    std::swap(attack_, other->attack_);
    std::swap(stop_, other->stop_);
    std::swap(dead_, other->dead_);
    std::swap(buffattach_, other->buffattach_);
    std::swap(buffremove_, other->buffremove_);
    std::swap(buffaffect_, other->buffaffect_);
    std::swap(disappear_, other->disappear_);
    std::swap(create_, other->create_);
    std::swap(finish_, other->finish_);
    std::swap(skillcast_, other->skillcast_);
    std::swap(revive_, other->revive_);
    std::swap(glide_, other->glide_);
    std::swap(warning_, other->warning_);
    std::swap(busy_, other->busy_);
    std::swap(changetroop_, other->changetroop_);
    std::swap(statedataupdate_, other->statedataupdate_);
    std::swap(changeextendstate_, other->changeextendstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleAction_descriptor_;
  metadata.reflection = BattleAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleDetail::kActionsFieldNumber;
#endif  // !_MSC_VER

BattleDetail::BattleDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleDetail::InitAsDefaultInstance() {
}

BattleDetail::BattleDetail(const BattleDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleDetail::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleDetail::~BattleDetail() {
  SharedDtor();
}

void BattleDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleDetail_descriptor_;
}

const BattleDetail& BattleDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

BattleDetail* BattleDetail::default_instance_ = NULL;

BattleDetail* BattleDetail::New() const {
  return new BattleDetail;
}

void BattleDetail::Clear() {
  actions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BattleAction actions = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_actions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .BattleAction actions = 1;
  for (int i = 0; i < this->actions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->actions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .BattleAction actions = 1;
  for (int i = 0; i < this->actions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->actions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleDetail::ByteSize() const {
  int total_size = 0;

  // repeated .BattleAction actions = 1;
  total_size += 1 * this->actions_size();
  for (int i = 0; i < this->actions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleDetail::MergeFrom(const BattleDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  actions_.MergeFrom(from.actions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleDetail::CopyFrom(const BattleDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleDetail::IsInitialized() const {

  for (int i = 0; i < actions_size(); i++) {
    if (!this->actions(i).IsInitialized()) return false;
  }
  return true;
}

void BattleDetail::Swap(BattleDetail* other) {
  if (other != this) {
    actions_.Swap(&other->actions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleDetail_descriptor_;
  metadata.reflection = BattleDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleBulletin::kBattleIdFieldNumber;
const int BattleBulletin::kResultFieldNumber;
const int BattleBulletin::kCalcTimeFieldNumber;
const int BattleBulletin::kBattleTimeFieldNumber;
const int BattleBulletin::kAttackerFieldNumber;
const int BattleBulletin::kDefenderFieldNumber;
#endif  // !_MSC_VER

BattleBulletin::BattleBulletin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleBulletin::InitAsDefaultInstance() {
  attacker_ = const_cast< ::BattleTroop*>(&::BattleTroop::default_instance());
  defender_ = const_cast< ::BattleTroop*>(&::BattleTroop::default_instance());
}

BattleBulletin::BattleBulletin(const BattleBulletin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleBulletin::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = 0;
  calctime_ = 0;
  battletime_ = 0;
  attacker_ = NULL;
  defender_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleBulletin::~BattleBulletin() {
  SharedDtor();
}

void BattleBulletin::SharedDtor() {
  if (battleid_ != &::google::protobuf::internal::kEmptyString) {
    delete battleid_;
  }
  if (this != default_instance_) {
    delete attacker_;
    delete defender_;
  }
}

void BattleBulletin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleBulletin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleBulletin_descriptor_;
}

const BattleBulletin& BattleBulletin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

BattleBulletin* BattleBulletin::default_instance_ = NULL;

BattleBulletin* BattleBulletin::New() const {
  return new BattleBulletin;
}

void BattleBulletin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_battleid()) {
      if (battleid_ != &::google::protobuf::internal::kEmptyString) {
        battleid_->clear();
      }
    }
    result_ = 0;
    calctime_ = 0;
    battletime_ = 0;
    if (has_attacker()) {
      if (attacker_ != NULL) attacker_->::BattleTroop::Clear();
    }
    if (has_defender()) {
      if (defender_ != NULL) defender_->::BattleTroop::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleBulletin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string battleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_battleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->battleid().data(), this->battleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_calcTime;
        break;
      }

      // optional int32 calcTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_calcTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &calctime_)));
          set_has_calctime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_battleTime;
        break;
      }

      // optional int32 battleTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battleTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battletime_)));
          set_has_battletime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attacker;
        break;
      }

      // optional .BattleTroop attacker = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attacker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attacker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_defender;
        break;
      }

      // optional .BattleTroop defender = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defender()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleBulletin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string battleId = 1;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->battleid().data(), this->battleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->battleid(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional int32 calcTime = 3;
  if (has_calctime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->calctime(), output);
  }

  // optional int32 battleTime = 4;
  if (has_battletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->battletime(), output);
  }

  // optional .BattleTroop attacker = 5;
  if (has_attacker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->attacker(), output);
  }

  // optional .BattleTroop defender = 6;
  if (has_defender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->defender(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleBulletin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string battleId = 1;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->battleid().data(), this->battleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->battleid(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional int32 calcTime = 3;
  if (has_calctime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->calctime(), target);
  }

  // optional int32 battleTime = 4;
  if (has_battletime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->battletime(), target);
  }

  // optional .BattleTroop attacker = 5;
  if (has_attacker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->attacker(), target);
  }

  // optional .BattleTroop defender = 6;
  if (has_defender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->defender(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleBulletin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string battleId = 1;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->battleid());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 calcTime = 3;
    if (has_calctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->calctime());
    }

    // optional int32 battleTime = 4;
    if (has_battletime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battletime());
    }

    // optional .BattleTroop attacker = 5;
    if (has_attacker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attacker());
    }

    // optional .BattleTroop defender = 6;
    if (has_defender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defender());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleBulletin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleBulletin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleBulletin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleBulletin::MergeFrom(const BattleBulletin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_calctime()) {
      set_calctime(from.calctime());
    }
    if (from.has_battletime()) {
      set_battletime(from.battletime());
    }
    if (from.has_attacker()) {
      mutable_attacker()->::BattleTroop::MergeFrom(from.attacker());
    }
    if (from.has_defender()) {
      mutable_defender()->::BattleTroop::MergeFrom(from.defender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleBulletin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleBulletin::CopyFrom(const BattleBulletin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleBulletin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_attacker()) {
    if (!this->attacker().IsInitialized()) return false;
  }
  if (has_defender()) {
    if (!this->defender().IsInitialized()) return false;
  }
  return true;
}

void BattleBulletin::Swap(BattleBulletin* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    std::swap(result_, other->result_);
    std::swap(calctime_, other->calctime_);
    std::swap(battletime_, other->battletime_);
    std::swap(attacker_, other->attacker_);
    std::swap(defender_, other->defender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleBulletin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleBulletin_descriptor_;
  metadata.reflection = BattleBulletin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderAStarPath::kOrderUnitIdFieldNumber;
const int OrderAStarPath::kIsAttackFieldNumber;
const int OrderAStarPath::kNodeListFieldNumber;
#endif  // !_MSC_VER

OrderAStarPath::OrderAStarPath()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderAStarPath::InitAsDefaultInstance() {
}

OrderAStarPath::OrderAStarPath(const OrderAStarPath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderAStarPath::SharedCtor() {
  _cached_size_ = 0;
  orderunitid_ = 0;
  isattack_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderAStarPath::~OrderAStarPath() {
  SharedDtor();
}

void OrderAStarPath::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrderAStarPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderAStarPath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderAStarPath_descriptor_;
}

const OrderAStarPath& OrderAStarPath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

OrderAStarPath* OrderAStarPath::default_instance_ = NULL;

OrderAStarPath* OrderAStarPath::New() const {
  return new OrderAStarPath;
}

void OrderAStarPath::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    orderunitid_ = 0;
    isattack_ = false;
  }
  nodelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderAStarPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 orderUnitId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderunitid_)));
          set_has_orderunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isAttack;
        break;
      }

      // required bool isAttack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAttack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isattack_)));
          set_has_isattack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nodeList;
        break;
      }

      // repeated .UnitPos nodeList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodeList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nodeList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderAStarPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 orderUnitId = 1;
  if (has_orderunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->orderunitid(), output);
  }

  // required bool isAttack = 2;
  if (has_isattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isattack(), output);
  }

  // repeated .UnitPos nodeList = 3;
  for (int i = 0; i < this->nodelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->nodelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderAStarPath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 orderUnitId = 1;
  if (has_orderunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->orderunitid(), target);
  }

  // required bool isAttack = 2;
  if (has_isattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isattack(), target);
  }

  // repeated .UnitPos nodeList = 3;
  for (int i = 0; i < this->nodelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->nodelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderAStarPath::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 orderUnitId = 1;
    if (has_orderunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderunitid());
    }

    // required bool isAttack = 2;
    if (has_isattack()) {
      total_size += 1 + 1;
    }

  }
  // repeated .UnitPos nodeList = 3;
  total_size += 1 * this->nodelist_size();
  for (int i = 0; i < this->nodelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderAStarPath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderAStarPath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderAStarPath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderAStarPath::MergeFrom(const OrderAStarPath& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodelist_.MergeFrom(from.nodelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderunitid()) {
      set_orderunitid(from.orderunitid());
    }
    if (from.has_isattack()) {
      set_isattack(from.isattack());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderAStarPath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderAStarPath::CopyFrom(const OrderAStarPath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderAStarPath::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < nodelist_size(); i++) {
    if (!this->nodelist(i).IsInitialized()) return false;
  }
  return true;
}

void OrderAStarPath::Swap(OrderAStarPath* other) {
  if (other != this) {
    std::swap(orderunitid_, other->orderunitid_);
    std::swap(isattack_, other->isattack_);
    nodelist_.Swap(&other->nodelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderAStarPath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderAStarPath_descriptor_;
  metadata.reflection = OrderAStarPath_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderTargetPos::kObjIdFieldNumber;
const int OrderTargetPos::kTargetPosFieldNumber;
#endif  // !_MSC_VER

OrderTargetPos::OrderTargetPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderTargetPos::InitAsDefaultInstance() {
  targetpos_ = const_cast< ::UnitPos*>(&::UnitPos::default_instance());
}

OrderTargetPos::OrderTargetPos(const OrderTargetPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderTargetPos::SharedCtor() {
  _cached_size_ = 0;
  objid_ = 0;
  targetpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderTargetPos::~OrderTargetPos() {
  SharedDtor();
}

void OrderTargetPos::SharedDtor() {
  if (this != default_instance_) {
    delete targetpos_;
  }
}

void OrderTargetPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderTargetPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderTargetPos_descriptor_;
}

const OrderTargetPos& OrderTargetPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

OrderTargetPos* OrderTargetPos::default_instance_ = NULL;

OrderTargetPos* OrderTargetPos::New() const {
  return new OrderTargetPos;
}

void OrderTargetPos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = 0;
    if (has_targetpos()) {
      if (targetpos_ != NULL) targetpos_->::UnitPos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderTargetPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_targetPos;
        break;
      }

      // required .UnitPos targetPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderTargetPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  // required .UnitPos targetPos = 2;
  if (has_targetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->targetpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderTargetPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  // required .UnitPos targetPos = 2;
  if (has_targetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->targetpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderTargetPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // required .UnitPos targetPos = 2;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderTargetPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderTargetPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderTargetPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderTargetPos::MergeFrom(const OrderTargetPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_targetpos()) {
      mutable_targetpos()->::UnitPos::MergeFrom(from.targetpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderTargetPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderTargetPos::CopyFrom(const OrderTargetPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderTargetPos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_targetpos()) {
    if (!this->targetpos().IsInitialized()) return false;
  }
  return true;
}

void OrderTargetPos::Swap(OrderTargetPos* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(targetpos_, other->targetpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderTargetPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderTargetPos_descriptor_;
  metadata.reflection = OrderTargetPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TriggerActionToLua::kActionIdFieldNumber;
const int TriggerActionToLua::kActionTypeFieldNumber;
const int TriggerActionToLua::kActionParamFieldNumber;
#endif  // !_MSC_VER

TriggerActionToLua::TriggerActionToLua()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TriggerActionToLua::InitAsDefaultInstance() {
}

TriggerActionToLua::TriggerActionToLua(const TriggerActionToLua& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TriggerActionToLua::SharedCtor() {
  _cached_size_ = 0;
  actionid_ = 0;
  actiontype_ = 0;
  actionparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TriggerActionToLua::~TriggerActionToLua() {
  SharedDtor();
}

void TriggerActionToLua::SharedDtor() {
  if (actionparam_ != &::google::protobuf::internal::kEmptyString) {
    delete actionparam_;
  }
  if (this != default_instance_) {
  }
}

void TriggerActionToLua::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TriggerActionToLua::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TriggerActionToLua_descriptor_;
}

const TriggerActionToLua& TriggerActionToLua::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

TriggerActionToLua* TriggerActionToLua::default_instance_ = NULL;

TriggerActionToLua* TriggerActionToLua::New() const {
  return new TriggerActionToLua;
}

void TriggerActionToLua::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    actionid_ = 0;
    actiontype_ = 0;
    if (has_actionparam()) {
      if (actionparam_ != &::google::protobuf::internal::kEmptyString) {
        actionparam_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TriggerActionToLua::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 actionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionid_)));
          set_has_actionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_actionType;
        break;
      }

      // required int32 actionType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actiontype_)));
          set_has_actiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_actionParam;
        break;
      }

      // optional string actionParam = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actionParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_actionparam()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->actionparam().data(), this->actionparam().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TriggerActionToLua::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 actionId = 1;
  if (has_actionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->actionid(), output);
  }

  // required int32 actionType = 2;
  if (has_actiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->actiontype(), output);
  }

  // optional string actionParam = 3;
  if (has_actionparam()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->actionparam().data(), this->actionparam().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->actionparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TriggerActionToLua::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 actionId = 1;
  if (has_actionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->actionid(), target);
  }

  // required int32 actionType = 2;
  if (has_actiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->actiontype(), target);
  }

  // optional string actionParam = 3;
  if (has_actionparam()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->actionparam().data(), this->actionparam().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->actionparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TriggerActionToLua::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 actionId = 1;
    if (has_actionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actionid());
    }

    // required int32 actionType = 2;
    if (has_actiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actiontype());
    }

    // optional string actionParam = 3;
    if (has_actionparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->actionparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TriggerActionToLua::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TriggerActionToLua* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TriggerActionToLua*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TriggerActionToLua::MergeFrom(const TriggerActionToLua& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actionid()) {
      set_actionid(from.actionid());
    }
    if (from.has_actiontype()) {
      set_actiontype(from.actiontype());
    }
    if (from.has_actionparam()) {
      set_actionparam(from.actionparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TriggerActionToLua::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TriggerActionToLua::CopyFrom(const TriggerActionToLua& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TriggerActionToLua::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TriggerActionToLua::Swap(TriggerActionToLua* other) {
  if (other != this) {
    std::swap(actionid_, other->actionid_);
    std::swap(actiontype_, other->actiontype_);
    std::swap(actionparam_, other->actionparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TriggerActionToLua::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TriggerActionToLua_descriptor_;
  metadata.reflection = TriggerActionToLua_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleResult::kResultFieldNumber;
const int BattleResult::kGameStateFieldNumber;
const int BattleResult::kDetailFieldNumber;
const int BattleResult::kBulletinFieldNumber;
const int BattleResult::kTargetInvulnerableFieldNumber;
const int BattleResult::kTriggerActionListFieldNumber;
const int BattleResult::kOrderPathListFieldNumber;
const int BattleResult::kOrderTargetPosListFieldNumber;
const int BattleResult::kFinishedOrderListFieldNumber;
const int BattleResult::kDebugInfoFieldNumber;
#endif  // !_MSC_VER

BattleResult::BattleResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleResult::InitAsDefaultInstance() {
  detail_ = const_cast< ::BattleDetail*>(&::BattleDetail::default_instance());
  bulletin_ = const_cast< ::BattleBulletin*>(&::BattleBulletin::default_instance());
}

BattleResult::BattleResult(const BattleResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  gamestate_ = 0;
  detail_ = NULL;
  bulletin_ = NULL;
  targetinvulnerable_ = false;
  debuginfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleResult::~BattleResult() {
  SharedDtor();
}

void BattleResult::SharedDtor() {
  if (debuginfo_ != &::google::protobuf::internal::kEmptyString) {
    delete debuginfo_;
  }
  if (this != default_instance_) {
    delete detail_;
    delete bulletin_;
  }
}

void BattleResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleResult_descriptor_;
}

const BattleResult& BattleResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

BattleResult* BattleResult::default_instance_ = NULL;

BattleResult* BattleResult::New() const {
  return new BattleResult;
}

void BattleResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    gamestate_ = 0;
    if (has_detail()) {
      if (detail_ != NULL) detail_->::BattleDetail::Clear();
    }
    if (has_bulletin()) {
      if (bulletin_ != NULL) bulletin_->::BattleBulletin::Clear();
    }
    targetinvulnerable_ = false;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (has_debuginfo()) {
      if (debuginfo_ != &::google::protobuf::internal::kEmptyString) {
        debuginfo_->clear();
      }
    }
  }
  triggeractionlist_.Clear();
  orderpathlist_.Clear();
  ordertargetposlist_.Clear();
  finishedorderlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameState;
        break;
      }

      // required int32 gameState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamestate_)));
          set_has_gamestate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_detail;
        break;
      }

      // optional .BattleDetail detail = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bulletin;
        break;
      }

      // optional .BattleBulletin bulletin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bulletin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bulletin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_targetInvulnerable;
        break;
      }

      // optional bool targetInvulnerable = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetInvulnerable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &targetinvulnerable_)));
          set_has_targetinvulnerable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_triggerActionList;
        break;
      }

      // repeated .TriggerActionToLua triggerActionList = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_triggerActionList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_triggeractionlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_triggerActionList;
        if (input->ExpectTag(58)) goto parse_orderPathList;
        break;
      }

      // repeated .OrderAStarPath orderPathList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orderPathList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_orderpathlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_orderPathList;
        if (input->ExpectTag(66)) goto parse_orderTargetPosList;
        break;
      }

      // repeated .OrderTargetPos orderTargetPosList = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orderTargetPosList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ordertargetposlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_orderTargetPosList;
        if (input->ExpectTag(72)) goto parse_finishedOrderList;
        break;
      }

      // repeated int32 finishedOrderList = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finishedOrderList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_finishedorderlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_finishedorderlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_finishedOrderList;
        if (input->ExpectTag(82)) goto parse_debugInfo;
        break;
      }

      // optional string debugInfo = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debugInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debuginfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->debuginfo().data(), this->debuginfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 gameState = 2;
  if (has_gamestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gamestate(), output);
  }

  // optional .BattleDetail detail = 3;
  if (has_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->detail(), output);
  }

  // optional .BattleBulletin bulletin = 4;
  if (has_bulletin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bulletin(), output);
  }

  // optional bool targetInvulnerable = 5;
  if (has_targetinvulnerable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->targetinvulnerable(), output);
  }

  // repeated .TriggerActionToLua triggerActionList = 6;
  for (int i = 0; i < this->triggeractionlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->triggeractionlist(i), output);
  }

  // repeated .OrderAStarPath orderPathList = 7;
  for (int i = 0; i < this->orderpathlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->orderpathlist(i), output);
  }

  // repeated .OrderTargetPos orderTargetPosList = 8;
  for (int i = 0; i < this->ordertargetposlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->ordertargetposlist(i), output);
  }

  // repeated int32 finishedOrderList = 9;
  for (int i = 0; i < this->finishedorderlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->finishedorderlist(i), output);
  }

  // optional string debugInfo = 10;
  if (has_debuginfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debuginfo().data(), this->debuginfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->debuginfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 gameState = 2;
  if (has_gamestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gamestate(), target);
  }

  // optional .BattleDetail detail = 3;
  if (has_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->detail(), target);
  }

  // optional .BattleBulletin bulletin = 4;
  if (has_bulletin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bulletin(), target);
  }

  // optional bool targetInvulnerable = 5;
  if (has_targetinvulnerable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->targetinvulnerable(), target);
  }

  // repeated .TriggerActionToLua triggerActionList = 6;
  for (int i = 0; i < this->triggeractionlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->triggeractionlist(i), target);
  }

  // repeated .OrderAStarPath orderPathList = 7;
  for (int i = 0; i < this->orderpathlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->orderpathlist(i), target);
  }

  // repeated .OrderTargetPos orderTargetPosList = 8;
  for (int i = 0; i < this->ordertargetposlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->ordertargetposlist(i), target);
  }

  // repeated int32 finishedOrderList = 9;
  for (int i = 0; i < this->finishedorderlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->finishedorderlist(i), target);
  }

  // optional string debugInfo = 10;
  if (has_debuginfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debuginfo().data(), this->debuginfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->debuginfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 gameState = 2;
    if (has_gamestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamestate());
    }

    // optional .BattleDetail detail = 3;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detail());
    }

    // optional .BattleBulletin bulletin = 4;
    if (has_bulletin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bulletin());
    }

    // optional bool targetInvulnerable = 5;
    if (has_targetinvulnerable()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional string debugInfo = 10;
    if (has_debuginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debuginfo());
    }

  }
  // repeated .TriggerActionToLua triggerActionList = 6;
  total_size += 1 * this->triggeractionlist_size();
  for (int i = 0; i < this->triggeractionlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->triggeractionlist(i));
  }

  // repeated .OrderAStarPath orderPathList = 7;
  total_size += 1 * this->orderpathlist_size();
  for (int i = 0; i < this->orderpathlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->orderpathlist(i));
  }

  // repeated .OrderTargetPos orderTargetPosList = 8;
  total_size += 1 * this->ordertargetposlist_size();
  for (int i = 0; i < this->ordertargetposlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ordertargetposlist(i));
  }

  // repeated int32 finishedOrderList = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->finishedorderlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->finishedorderlist(i));
    }
    total_size += 1 * this->finishedorderlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleResult::MergeFrom(const BattleResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  triggeractionlist_.MergeFrom(from.triggeractionlist_);
  orderpathlist_.MergeFrom(from.orderpathlist_);
  ordertargetposlist_.MergeFrom(from.ordertargetposlist_);
  finishedorderlist_.MergeFrom(from.finishedorderlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_gamestate()) {
      set_gamestate(from.gamestate());
    }
    if (from.has_detail()) {
      mutable_detail()->::BattleDetail::MergeFrom(from.detail());
    }
    if (from.has_bulletin()) {
      mutable_bulletin()->::BattleBulletin::MergeFrom(from.bulletin());
    }
    if (from.has_targetinvulnerable()) {
      set_targetinvulnerable(from.targetinvulnerable());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_debuginfo()) {
      set_debuginfo(from.debuginfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleResult::CopyFrom(const BattleResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_detail()) {
    if (!this->detail().IsInitialized()) return false;
  }
  if (has_bulletin()) {
    if (!this->bulletin().IsInitialized()) return false;
  }
  for (int i = 0; i < triggeractionlist_size(); i++) {
    if (!this->triggeractionlist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < orderpathlist_size(); i++) {
    if (!this->orderpathlist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < ordertargetposlist_size(); i++) {
    if (!this->ordertargetposlist(i).IsInitialized()) return false;
  }
  return true;
}

void BattleResult::Swap(BattleResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(gamestate_, other->gamestate_);
    std::swap(detail_, other->detail_);
    std::swap(bulletin_, other->bulletin_);
    std::swap(targetinvulnerable_, other->targetinvulnerable_);
    triggeractionlist_.Swap(&other->triggeractionlist_);
    orderpathlist_.Swap(&other->orderpathlist_);
    ordertargetposlist_.Swap(&other->ordertargetposlist_);
    finishedorderlist_.Swap(&other->finishedorderlist_);
    std::swap(debuginfo_, other->debuginfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleResult_descriptor_;
  metadata.reflection = BattleResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
