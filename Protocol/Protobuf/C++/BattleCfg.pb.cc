// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BattleCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SkillShape_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillShape_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnitSize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnitSize_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnitPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnitPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnitAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnitAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnitData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnitData_reflection_ = NULL;
const ::google::protobuf::Descriptor* KillData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KillData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BFMapCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BFMapCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* BFMissionCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BFMissionCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeployRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeployRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* MissionUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissionUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* BFUnitCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BFUnitCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* BFMonsterCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BFMonsterCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* BFSkillCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BFSkillCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* BFBuffCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BFBuffCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffDmgCalc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffDmgCalc_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BFConst_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BFCfgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MissionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ValueType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UnitType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SkillTrigType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SkillCampType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CastCheckType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ModifyUnitAttrType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TriggerActionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SkillShapeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SkillType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BuffType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DamageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_BattleCfg_2eproto() {
  protobuf_AddDesc_BattleCfg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BattleCfg.proto");
  GOOGLE_CHECK(file != NULL);
  SkillShape_descriptor_ = file->message_type(0);
  static const int SkillShape_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillShape, shapetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillShape, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillShape, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillShape, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillShape, angle_),
  };
  SkillShape_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillShape_descriptor_,
      SkillShape::default_instance_,
      SkillShape_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillShape, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillShape, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillShape));
  UnitSize_descriptor_ = file->message_type(1);
  static const int UnitSize_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitSize, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitSize, height_),
  };
  UnitSize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnitSize_descriptor_,
      UnitSize::default_instance_,
      UnitSize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitSize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitSize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnitSize));
  UnitPos_descriptor_ = file->message_type(2);
  static const int UnitPos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitPos, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitPos, y_),
  };
  UnitPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnitPos_descriptor_,
      UnitPos::default_instance_,
      UnitPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnitPos));
  UnitAttr_descriptor_ = file->message_type(3);
  static const int UnitAttr_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitAttr, unithp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitAttr, unitattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitAttr, unitdefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitAttr, unithit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitAttr, unitmiss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitAttr, unitcrit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitAttr, unitanticrit_),
  };
  UnitAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnitAttr_descriptor_,
      UnitAttr::default_instance_,
      UnitAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnitAttr));
  UnitData_descriptor_ = file->message_type(4);
  static const int UnitData_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitData, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitData, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitData, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitData, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitData, unitattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitData, trooptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitData, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitData, extendstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitData, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitData, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitData, skilldatas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitData, killdatas_),
  };
  UnitData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnitData_descriptor_,
      UnitData::default_instance_,
      UnitData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnitData));
  KillData_descriptor_ = file->message_type(5);
  static const int KillData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillData, count_),
  };
  KillData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KillData_descriptor_,
      KillData::default_instance_,
      KillData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KillData));
  SkillData_descriptor_ = file->message_type(6);
  static const int SkillData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, level_),
  };
  SkillData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillData_descriptor_,
      SkillData::default_instance_,
      SkillData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillData));
  BFMapCfg_descriptor_ = file->message_type(7);
  static const int BFMapCfg_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFMapCfg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFMapCfg, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFMapCfg, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFMapCfg, tilewidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFMapCfg, tileheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFMapCfg, atkpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFMapCfg, defpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFMapCfg, warpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFMapCfg, hovertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFMapCfg, maxfindstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFMapCfg, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFMapCfg, navmeshes_),
  };
  BFMapCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BFMapCfg_descriptor_,
      BFMapCfg::default_instance_,
      BFMapCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFMapCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFMapCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BFMapCfg));
  BFMissionCfg_descriptor_ = file->message_type(8);
  static const int BFMissionCfg_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFMissionCfg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFMissionCfg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFMissionCfg, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFMissionCfg, timelimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFMissionCfg, atkwarningy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFMissionCfg, defwarningy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFMissionCfg, atktargetitems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFMissionCfg, deftargetitems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFMissionCfg, atkunits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFMissionCfg, defunits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFMissionCfg, deployrangelist_),
  };
  BFMissionCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BFMissionCfg_descriptor_,
      BFMissionCfg::default_instance_,
      BFMissionCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFMissionCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFMissionCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BFMissionCfg));
  DeployRange_descriptor_ = file->message_type(9);
  static const int DeployRange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeployRange, reserved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeployRange, rmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeployRange, rmax_),
  };
  DeployRange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeployRange_descriptor_,
      DeployRange::default_instance_,
      DeployRange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeployRange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeployRange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeployRange));
  MissionUnit_descriptor_ = file->message_type(10);
  static const int MissionUnit_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionUnit, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionUnit, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionUnit, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionUnit, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionUnit, initdir_),
  };
  MissionUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissionUnit_descriptor_,
      MissionUnit::default_instance_,
      MissionUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissionUnit));
  BFUnitCfg_descriptor_ = file->message_type(11);
  static const int BFUnitCfg_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFUnitCfg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFUnitCfg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFUnitCfg, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFUnitCfg, posprior_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFUnitCfg, viewrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFUnitCfg, trackrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFUnitCfg, idleperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFUnitCfg, moveperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFUnitCfg, turnperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFUnitCfg, movestep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFUnitCfg, freefly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFUnitCfg, skilldatas_),
  };
  BFUnitCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BFUnitCfg_descriptor_,
      BFUnitCfg::default_instance_,
      BFUnitCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFUnitCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFUnitCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BFUnitCfg));
  BFMonsterCfg_descriptor_ = file->message_type(12);
  static const int BFMonsterCfg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFMonsterCfg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFMonsterCfg, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFMonsterCfg, unitattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFMonsterCfg, skilldatas_),
  };
  BFMonsterCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BFMonsterCfg_descriptor_,
      BFMonsterCfg::default_instance_,
      BFMonsterCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFMonsterCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFMonsterCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BFMonsterCfg));
  BFSkillCfg_descriptor_ = file->message_type(13);
  static const int BFSkillCfg_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFSkillCfg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFSkillCfg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFSkillCfg, triggertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFSkillCfg, castchecktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFSkillCfg, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFSkillCfg, skillcd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFSkillCfg, cdteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFSkillCfg, affectcamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFSkillCfg, attackdismin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFSkillCfg, attackdislow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFSkillCfg, attackdisup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFSkillCfg, waittime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFSkillCfg, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFSkillCfg, bulletspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFSkillCfg, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFSkillCfg, enemyids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFSkillCfg, enemytypes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFSkillCfg, buffids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFSkillCfg, damagecnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFSkillCfg, damageper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFSkillCfg, postskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFSkillCfg, posttime_),
  };
  BFSkillCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BFSkillCfg_descriptor_,
      BFSkillCfg::default_instance_,
      BFSkillCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFSkillCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFSkillCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BFSkillCfg));
  BFBuffCfg_descriptor_ = file->message_type(14);
  static const int BFBuffCfg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFBuffCfg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFBuffCfg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFBuffCfg, valuetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFBuffCfg, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFBuffCfg, createunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFBuffCfg, createunitcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFBuffCfg, dmgcalc_),
  };
  BFBuffCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BFBuffCfg_descriptor_,
      BFBuffCfg::default_instance_,
      BFBuffCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFBuffCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFBuffCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BFBuffCfg));
  BuffDmgCalc_descriptor_ = file->message_type(15);
  static const int BuffDmgCalc_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDmgCalc, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDmgCalc, dmgparam1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDmgCalc, dmgparam2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDmgCalc, dmgparam3_),
  };
  BuffDmgCalc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffDmgCalc_descriptor_,
      BuffDmgCalc::default_instance_,
      BuffDmgCalc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDmgCalc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDmgCalc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffDmgCalc));
  BFConst_descriptor_ = file->enum_type(0);
  BFCfgType_descriptor_ = file->enum_type(1);
  MissionType_descriptor_ = file->enum_type(2);
  ValueType_descriptor_ = file->enum_type(3);
  UnitType_descriptor_ = file->enum_type(4);
  SkillTrigType_descriptor_ = file->enum_type(5);
  SkillCampType_descriptor_ = file->enum_type(6);
  CastCheckType_descriptor_ = file->enum_type(7);
  ModifyUnitAttrType_descriptor_ = file->enum_type(8);
  TriggerActionType_descriptor_ = file->enum_type(9);
  SkillShapeType_descriptor_ = file->enum_type(10);
  SkillType_descriptor_ = file->enum_type(11);
  BuffType_descriptor_ = file->enum_type(12);
  DamageType_descriptor_ = file->enum_type(13);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BattleCfg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillShape_descriptor_, &SkillShape::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnitSize_descriptor_, &UnitSize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnitPos_descriptor_, &UnitPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnitAttr_descriptor_, &UnitAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnitData_descriptor_, &UnitData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KillData_descriptor_, &KillData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillData_descriptor_, &SkillData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BFMapCfg_descriptor_, &BFMapCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BFMissionCfg_descriptor_, &BFMissionCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeployRange_descriptor_, &DeployRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissionUnit_descriptor_, &MissionUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BFUnitCfg_descriptor_, &BFUnitCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BFMonsterCfg_descriptor_, &BFMonsterCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BFSkillCfg_descriptor_, &BFSkillCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BFBuffCfg_descriptor_, &BFBuffCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffDmgCalc_descriptor_, &BuffDmgCalc::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BattleCfg_2eproto() {
  delete SkillShape::default_instance_;
  delete SkillShape_reflection_;
  delete UnitSize::default_instance_;
  delete UnitSize_reflection_;
  delete UnitPos::default_instance_;
  delete UnitPos_reflection_;
  delete UnitAttr::default_instance_;
  delete UnitAttr_reflection_;
  delete UnitData::default_instance_;
  delete UnitData_reflection_;
  delete KillData::default_instance_;
  delete KillData_reflection_;
  delete SkillData::default_instance_;
  delete SkillData_reflection_;
  delete BFMapCfg::default_instance_;
  delete BFMapCfg_reflection_;
  delete BFMissionCfg::default_instance_;
  delete BFMissionCfg_reflection_;
  delete DeployRange::default_instance_;
  delete DeployRange_reflection_;
  delete MissionUnit::default_instance_;
  delete MissionUnit_reflection_;
  delete BFUnitCfg::default_instance_;
  delete BFUnitCfg_reflection_;
  delete BFMonsterCfg::default_instance_;
  delete BFMonsterCfg_reflection_;
  delete BFSkillCfg::default_instance_;
  delete BFSkillCfg_reflection_;
  delete BFBuffCfg::default_instance_;
  delete BFBuffCfg_reflection_;
  delete BuffDmgCalc::default_instance_;
  delete BuffDmgCalc_reflection_;
}

void protobuf_AddDesc_BattleCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017BattleCfg.proto\"\\\n\nSkillShape\022\021\n\tshape"
    "Type\030\001 \002(\005\022\r\n\005width\030\002 \001(\005\022\016\n\006height\030\003 \001("
    "\005\022\r\n\005range\030\004 \001(\005\022\r\n\005angle\030\005 \001(\005\")\n\010UnitS"
    "ize\022\r\n\005width\030\001 \002(\005\022\016\n\006height\030\002 \002(\005\"\037\n\007Un"
    "itPos\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002(\005\"\216\001\n\010UnitAttr"
    "\022\016\n\006unitHp\030\001 \001(\005\022\022\n\nunitAttack\030\002 \001(\005\022\023\n\013"
    "unitDefence\030\003 \001(\005\022\017\n\007unitHit\030\004 \001(\005\022\020\n\010un"
    "itMiss\030\005 \001(\005\022\020\n\010unitCrit\030\006 \001(\005\022\024\n\014unitAn"
    "tiCrit\030\007 \001(\005\"\240\002\n\010UnitData\022\n\n\002id\030\001 \002(\005\022\016\n"
    "\006itemId\030\002 \002(\005\022\r\n\005count\030\003 \002(\005\022\n\n\002hp\030\004 \001(\005"
    "\022\021\n\tmonsterId\030\005 \001(\005\022\033\n\010unitAttr\030\006 \001(\0132\t."
    "UnitAttr\022\r\n\005level\030\007 \001(\005\022\021\n\ttroopType\030\010 \001"
    "(\005\022\017\n\007groupId\030\t \001(\005\022\023\n\013extendState\030\n \001(\005"
    "\022\020\n\010playerId\030\013 \001(\t\022\025\n\003pos\030\014 \001(\0132\010.UnitPo"
    "s\022\036\n\nskillDatas\030\r \003(\0132\n.SkillData\022\034\n\tkil"
    "lDatas\030\016 \003(\0132\t.KillData\"%\n\010KillData\022\n\n\002i"
    "d\030\001 \002(\005\022\r\n\005count\030\002 \002(\005\"&\n\tSkillData\022\n\n\002i"
    "d\030\001 \002(\005\022\r\n\005level\030\002 \002(\005\"\376\001\n\010BFMapCfg\022\n\n\002i"
    "d\030\001 \002(\005\022\r\n\005width\030\002 \002(\005\022\016\n\006height\030\003 \002(\005\022\021"
    "\n\ttileWidth\030\004 \002(\005\022\022\n\ntileHeight\030\005 \002(\005\022\030\n"
    "\006atkPos\030\n \002(\0132\010.UnitPos\022\030\n\006defPos\030\013 \002(\0132"
    "\010.UnitPos\022\030\n\006warPos\030\014 \001(\0132\010.UnitPos\022\021\n\th"
    "overTime\030\r \001(\005\022\023\n\013maxFindStep\030\016 \001(\005\022\r\n\005d"
    "atas\030\024 \003(\005\022\033\n\tnavmeshes\030\025 \003(\0132\010.UnitPos\""
    "\213\002\n\014BFMissionCfg\022\n\n\002id\030\001 \002(\005\022\014\n\004type\030\002 \002"
    "(\005\022\r\n\005mapId\030\003 \002(\005\022\021\n\ttimeLimit\030\004 \002(\005\022\023\n\013"
    "atkWarningY\030\006 \002(\005\022\023\n\013defWarningY\030\007 \002(\005\022\026"
    "\n\016atkTargetItems\030\013 \003(\005\022\026\n\016defTargetItems"
    "\030\014 \003(\005\022\036\n\010atkUnits\030\r \003(\0132\014.MissionUnit\022\036"
    "\n\010defUnits\030\016 \003(\0132\014.MissionUnit\022%\n\017deploy"
    "RangeList\030\017 \003(\0132\014.DeployRange\"O\n\013DeployR"
    "ange\022\020\n\010reserved\030\001 \002(\005\022\026\n\004rmin\030\002 \002(\0132\010.U"
    "nitPos\022\026\n\004rmax\030\003 \002(\0132\010.UnitPos\"a\n\013Missio"
    "nUnit\022\n\n\002id\030\001 \002(\005\022\r\n\005objId\030\002 \002(\005\022\017\n\007grou"
    "pId\030\003 \002(\005\022\025\n\003pos\030\004 \002(\0132\010.UnitPos\022\017\n\007init"
    "Dir\030\005 \002(\005\"\366\001\n\tBFUnitCfg\022\n\n\002id\030\001 \002(\005\022\014\n\004t"
    "ype\030\002 \002(\005\022\027\n\004size\030\003 \002(\0132\t.UnitSize\022\020\n\010po"
    "sPrior\030\004 \002(\005\022\021\n\tviewRange\030\005 \002(\005\022\022\n\ntrack"
    "Range\030\006 \002(\005\022\022\n\nidlePeriod\030\n \002(\005\022\022\n\nmoveP"
    "eriod\030\013 \002(\005\022\022\n\nturnPeriod\030\014 \001(\005\022\020\n\010moveS"
    "tep\030\r \001(\005\022\017\n\007freeFly\030\016 \001(\005\022\036\n\nskillDatas"
    "\030\024 \003(\0132\n.SkillData\"g\n\014BFMonsterCfg\022\n\n\002id"
    "\030\001 \002(\005\022\016\n\006itemId\030\002 \002(\005\022\033\n\010unitAttr\030\003 \002(\013"
    "2\t.UnitAttr\022\036\n\nskillDatas\030\004 \003(\0132\n.SkillD"
    "ata\"\261\003\n\nBFSkillCfg\022\n\n\002id\030\001 \002(\005\022\014\n\004type\030\002"
    " \001(\005\022\023\n\013triggerType\030\003 \001(\005\022\025\n\rcastCheckTy"
    "pe\030\004 \001(\005\022\020\n\010duration\030\005 \001(\005\022\017\n\007skillCd\030\006 "
    "\002(\005\022\016\n\006cdTeam\030\007 \001(\005\022\022\n\naffectCamp\030\n \002(\005\022"
    "\024\n\014attackDisMin\030\013 \002(\005\022\024\n\014attackDisLow\030\014 "
    "\002(\005\022\023\n\013attackDisUp\030\r \002(\005\022\020\n\010waitTime\030\016 \001"
    "(\005\022\020\n\010lastTime\030\017 \001(\005\022\023\n\013bulletSpeed\030\020 \001("
    "\005\022\032\n\005shape\030\024 \002(\0132\013.SkillShape\022\020\n\010enemyId"
    "s\030\025 \003(\005\022\022\n\nenemyTypes\030\026 \003(\005\022\017\n\007buffIds\030\027"
    " \003(\005\022\021\n\tdamageCnt\030\030 \002(\005\022\021\n\tdamagePer\030\031 \001"
    "(\005\022\021\n\tpostSkill\030\036 \001(\005\022\020\n\010postTime\030\037 \001(\005\""
    "\226\001\n\tBFBuffCfg\022\n\n\002id\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022"
    "\021\n\tvalueType\030\003 \002(\005\022\020\n\010duration\030\004 \002(\005\022\024\n\014"
    "createUnitId\030\n \001(\005\022\025\n\rcreateUnitCnt\030\013 \001("
    "\005\022\035\n\007dmgCalc\030\024 \003(\0132\014.BuffDmgCalc\"U\n\013Buff"
    "DmgCalc\022\r\n\005level\030\001 \002(\005\022\021\n\tdmgParam1\030\002 \002("
    "\002\022\021\n\tdmgParam2\030\003 \002(\002\022\021\n\tdmgParam3\030\004 \002(\002*"
    "\252\003\n\007BFConst\022\023\n\rMAX_TICK_TIME\020\300\317$\022\027\n\022TROO"
    "P_UNIT_TYPE_ID\020\350\007\022\021\n\rMAX_TICK_RATE\020\005\022\023\n\017"
    "FRONT_DIR_COUNT\020\010\022\025\n\020ATTACK_CRIT_RATE\020\230u"
    "\022\026\n\022BATTLE_TICK_PERIOD\0202\022\025\n\020BUFF_TICK_PE"
    "RIOD\020\350\007\022\026\n\021SKILL_TICK_PERIOD\020\350\007\022\020\n\013DEAD_"
    "PERIOD\020\310\001\022\025\n\020DISAPPEAR_PERIOD\020\210\'\022\026\n\021HERO"
    "_ENTER_CD_PER\020\210\'\022\022\n\016HERO_PUBLIC_CD\020\000\022\023\n\016"
    "USA_SOLDIER_ID\020\375U\022\025\n\020USA_SOLDIER_ID_2\020\200V"
    "\022\025\n\020USA_SOLDIER_ID_3\020\202V\022\023\n\016SITDOWN_PERIO"
    "D\020\364\003\022\023\n\017MODEL_COUNT_ONE\020\001\022\023\n\017MODEL_COUNT"
    "_PVE\020d\022\024\n\017MODEL_COUNT_PVP\020\350\007*e\n\tBFCfgTyp"
    "e\022\013\n\007CFG_MAP\020\001\022\017\n\013CFG_MISSION\020\002\022\017\n\013CFG_M"
    "ONSTER\020\003\022\014\n\010CFG_UNIT\020\004\022\r\n\tCFG_SKILL\020\005\022\014\n"
    "\010CFG_BUFF\020\006*/\n\013MissionType\022\017\n\013MISSION_AT"
    "K\020\001\022\017\n\013MISSION_DEF\020\002*0\n\tValueType\022\021\n\rVAL"
    "UE_PERCENT\020\001\022\020\n\014VALUE_NUMBER\020\002*\206\002\n\010UnitT"
    "ype\022\022\n\016UNIT_HERO_FOOT\020\001\022\022\n\016UNIT_HERO_TAN"
    "K\020\002\022\023\n\017UNIT_HERO_PLANE\020\003\022\r\n\tUNIT_FOOT\020\013\022"
    "\r\n\tUNIT_TANK\020\014\022\016\n\nUNIT_PLANE\020\r\022\021\n\rUNIT_A"
    "IR_FOOT\020\016\022\017\n\013UNIT_PTROOP\020\017\022\020\n\014UNIT_MISSI"
    "LE\020\025\022\017\n\013UNIT_BOMBER\020\026\022\021\n\rUNIT_BUILDING\020\036"
    "\022\020\n\014UNIT_DEFENCE\020(\022\021\n\rUNIT_ORNAMENT\0202\022\020\n"
    "\014UNIT_VIRTUAL\020<*_\n\rSkillTrigType\022\017\n\013TRIG"
    "_MANUAL\020\001\022\r\n\tTRIG_POST\020\002\022\r\n\tTRIG_DEAD\020\003\022"
    "\016\n\nTRIG_ENTER\020\004\022\017\n\013TRIG_ATTACK\020\005*i\n\rSkil"
    "lCampType\022\024\n\020SKILL_CAMP_ENEMY\020\001\022\026\n\022SKILL"
    "_CAMP_OWNSIDE\020\002\022\025\n\021SKILL_CAMP_FRIEND\020\003\022\023"
    "\n\017SKILL_CAMP_SELF\020\004*\232\001\n\rCastCheckType\022\025\n"
    "\021CHECK_X_UNIT_SELF\020\001\022\024\n\020CHECK_X_POS_SELF"
    "\020\002\022\025\n\021CHECK_Y_UNIT_SELF\020\003\022\027\n\023CHECK_Y_UNI"
    "T_TARGET\020\004\022\024\n\020CHECK_Y_POS_SELF\020\005\022\026\n\022CHEC"
    "K_Y_POS_TARGET\020\006*D\n\022ModifyUnitAttrType\022\r"
    "\n\tUAT_TROOP\020\001\022\r\n\tUAT_GROUP\020\002\022\020\n\014UAT_UNIT"
    "LIST\020\003*\316\002\n\021TriggerActionType\022\021\n\rA_SetUni"
    "tMove\020\001\022\023\n\017A_SetUnitAttack\020\002\022\022\n\016A_SetUni"
    "tState\020\003\022\025\n\021A_SetTriggerState\020\004\022\022\n\016A_Set"
    "GameState\020\005\022\023\n\017A_SetUnitRevive\020\006\022\025\n\021A_Se"
    "tUnitProgress\020\007\022\021\n\rA_SendUIEvent\020\010\022\027\n\023A_"
    "SetUnitGroupState\020\t\022\022\n\016A_SetUnitTroop\020\n\022"
    "\020\n\014A_CreateUnit\020\013\022\025\n\021A_ModifyUnitGroup\020\014"
    "\022\024\n\020A_ModifyUnitAttr\020\r\022\021\n\rA_SetVariable\020"
    "\016\022\024\n\020A_ModifyVariable\020\017*~\n\016SkillShapeTyp"
    "e\022\024\n\020SKILL_SHAPE_NULL\020\000\022\026\n\022SKILL_SHAPE_C"
    "IRCLE\020\001\022\024\n\020SKILL_SHAPE_RECT\020\002\022\023\n\017SKILL_S"
    "HAPE_FAN\020\003\022\023\n\017SKILL_SHAPE_ALL\020\t*9\n\tSkill"
    "Type\022\025\n\021SKILL_TYPE_ATTACK\020\000\022\025\n\021SKILL_TYP"
    "E_COMMON\020\001*\241\002\n\010BuffType\022\016\n\tBUFF_HURT\020\350\007\022"
    "\014\n\007BUFF_HP\020\351\007\022\020\n\013BUFF_ATTACK\020\354\007\022\021\n\014BUFF_"
    "DEFANCE\020\355\007\022\016\n\tBUFF_CIRT\020\356\007\022\022\n\rBUFF_ANTIC"
    "IRT\020\357\007\022\r\n\010BUFF_HIT\020\360\007\022\016\n\tBUFF_MISS\020\361\007\022\026\n"
    "\021BUFF_ATTACKPERIOD\020\362\007\022\024\n\017BUFF_MOVEPERIOD"
    "\020\363\007\022\023\n\016BUFF_INVISIBLE\020\374\007\022\020\n\013BUFF_SHIELD\020"
    "\375\007\022\017\n\nBUFF_TAUNT\020\376\007\022\020\n\013BUFF_CREATE\020\206\010\022\027\n"
    "\022BUFF_CREATE_EXTEND\020\207\010*G\n\nDamageType\022\016\n\n"
    "DMG_NORMAL\020\001\022\014\n\010DMG_MISS\020\002\022\014\n\010DMG_CRIT\020\003"
    "\022\r\n\tDMG_SKILL\020\004B\030\n\026com.hawk.game.protoco"
    "l", 4681);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BattleCfg.proto", &protobuf_RegisterTypes);
  SkillShape::default_instance_ = new SkillShape();
  UnitSize::default_instance_ = new UnitSize();
  UnitPos::default_instance_ = new UnitPos();
  UnitAttr::default_instance_ = new UnitAttr();
  UnitData::default_instance_ = new UnitData();
  KillData::default_instance_ = new KillData();
  SkillData::default_instance_ = new SkillData();
  BFMapCfg::default_instance_ = new BFMapCfg();
  BFMissionCfg::default_instance_ = new BFMissionCfg();
  DeployRange::default_instance_ = new DeployRange();
  MissionUnit::default_instance_ = new MissionUnit();
  BFUnitCfg::default_instance_ = new BFUnitCfg();
  BFMonsterCfg::default_instance_ = new BFMonsterCfg();
  BFSkillCfg::default_instance_ = new BFSkillCfg();
  BFBuffCfg::default_instance_ = new BFBuffCfg();
  BuffDmgCalc::default_instance_ = new BuffDmgCalc();
  SkillShape::default_instance_->InitAsDefaultInstance();
  UnitSize::default_instance_->InitAsDefaultInstance();
  UnitPos::default_instance_->InitAsDefaultInstance();
  UnitAttr::default_instance_->InitAsDefaultInstance();
  UnitData::default_instance_->InitAsDefaultInstance();
  KillData::default_instance_->InitAsDefaultInstance();
  SkillData::default_instance_->InitAsDefaultInstance();
  BFMapCfg::default_instance_->InitAsDefaultInstance();
  BFMissionCfg::default_instance_->InitAsDefaultInstance();
  DeployRange::default_instance_->InitAsDefaultInstance();
  MissionUnit::default_instance_->InitAsDefaultInstance();
  BFUnitCfg::default_instance_->InitAsDefaultInstance();
  BFMonsterCfg::default_instance_->InitAsDefaultInstance();
  BFSkillCfg::default_instance_->InitAsDefaultInstance();
  BFBuffCfg::default_instance_->InitAsDefaultInstance();
  BuffDmgCalc::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BattleCfg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BattleCfg_2eproto {
  StaticDescriptorInitializer_BattleCfg_2eproto() {
    protobuf_AddDesc_BattleCfg_2eproto();
  }
} static_descriptor_initializer_BattleCfg_2eproto_;
const ::google::protobuf::EnumDescriptor* BFConst_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BFConst_descriptor_;
}
bool BFConst_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 5:
    case 8:
    case 50:
    case 100:
    case 200:
    case 500:
    case 1000:
    case 5000:
    case 11005:
    case 11008:
    case 11010:
    case 15000:
    case 600000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BFCfgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BFCfgType_descriptor_;
}
bool BFCfgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MissionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionType_descriptor_;
}
bool MissionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ValueType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ValueType_descriptor_;
}
bool ValueType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UnitType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitType_descriptor_;
}
bool UnitType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 21:
    case 22:
    case 30:
    case 40:
    case 50:
    case 60:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SkillTrigType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillTrigType_descriptor_;
}
bool SkillTrigType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SkillCampType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillCampType_descriptor_;
}
bool SkillCampType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CastCheckType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CastCheckType_descriptor_;
}
bool CastCheckType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ModifyUnitAttrType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyUnitAttrType_descriptor_;
}
bool ModifyUnitAttrType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TriggerActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TriggerActionType_descriptor_;
}
bool TriggerActionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SkillShapeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillShapeType_descriptor_;
}
bool SkillShapeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SkillType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillType_descriptor_;
}
bool SkillType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BuffType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffType_descriptor_;
}
bool BuffType_IsValid(int value) {
  switch(value) {
    case 1000:
    case 1001:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1020:
    case 1021:
    case 1022:
    case 1030:
    case 1031:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DamageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DamageType_descriptor_;
}
bool DamageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SkillShape::kShapeTypeFieldNumber;
const int SkillShape::kWidthFieldNumber;
const int SkillShape::kHeightFieldNumber;
const int SkillShape::kRangeFieldNumber;
const int SkillShape::kAngleFieldNumber;
#endif  // !_MSC_VER

SkillShape::SkillShape()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillShape::InitAsDefaultInstance() {
}

SkillShape::SkillShape(const SkillShape& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillShape::SharedCtor() {
  _cached_size_ = 0;
  shapetype_ = 0;
  width_ = 0;
  height_ = 0;
  range_ = 0;
  angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillShape::~SkillShape() {
  SharedDtor();
}

void SkillShape::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillShape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillShape::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillShape_descriptor_;
}

const SkillShape& SkillShape::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleCfg_2eproto();
  return *default_instance_;
}

SkillShape* SkillShape::default_instance_ = NULL;

SkillShape* SkillShape::New() const {
  return new SkillShape;
}

void SkillShape::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shapetype_ = 0;
    width_ = 0;
    height_ = 0;
    range_ = 0;
    angle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 shapeType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shapetype_)));
          set_has_shapetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // optional int32 width = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional int32 height = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_range;
        break;
      }

      // optional int32 range = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_angle;
        break;
      }

      // optional int32 angle = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 shapeType = 1;
  if (has_shapetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->shapetype(), output);
  }

  // optional int32 width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // optional int32 height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // optional int32 range = 4;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->range(), output);
  }

  // optional int32 angle = 5;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillShape::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 shapeType = 1;
  if (has_shapetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->shapetype(), target);
  }

  // optional int32 width = 2;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // optional int32 height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // optional int32 range = 4;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->range(), target);
  }

  // optional int32 angle = 5;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillShape::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 shapeType = 1;
    if (has_shapetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shapetype());
    }

    // optional int32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 range = 4;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->range());
    }

    // optional int32 angle = 5;
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->angle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillShape::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillShape* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillShape*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillShape::MergeFrom(const SkillShape& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shapetype()) {
      set_shapetype(from.shapetype());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillShape::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillShape::CopyFrom(const SkillShape& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillShape::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SkillShape::Swap(SkillShape* other) {
  if (other != this) {
    std::swap(shapetype_, other->shapetype_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(range_, other->range_);
    std::swap(angle_, other->angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillShape::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillShape_descriptor_;
  metadata.reflection = SkillShape_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnitSize::kWidthFieldNumber;
const int UnitSize::kHeightFieldNumber;
#endif  // !_MSC_VER

UnitSize::UnitSize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnitSize::InitAsDefaultInstance() {
}

UnitSize::UnitSize(const UnitSize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnitSize::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitSize::~UnitSize() {
  SharedDtor();
}

void UnitSize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnitSize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnitSize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitSize_descriptor_;
}

const UnitSize& UnitSize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleCfg_2eproto();
  return *default_instance_;
}

UnitSize* UnitSize::default_instance_ = NULL;

UnitSize* UnitSize::New() const {
  return new UnitSize;
}

void UnitSize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    width_ = 0;
    height_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnitSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 width = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // required int32 height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnitSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // required int32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnitSize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->width(), target);
  }

  // required int32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnitSize::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // required int32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnitSize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnitSize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnitSize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnitSize::MergeFrom(const UnitSize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnitSize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitSize::CopyFrom(const UnitSize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitSize::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UnitSize::Swap(UnitSize* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnitSize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnitSize_descriptor_;
  metadata.reflection = UnitSize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnitPos::kXFieldNumber;
const int UnitPos::kYFieldNumber;
#endif  // !_MSC_VER

UnitPos::UnitPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnitPos::InitAsDefaultInstance() {
}

UnitPos::UnitPos(const UnitPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnitPos::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitPos::~UnitPos() {
  SharedDtor();
}

void UnitPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnitPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnitPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitPos_descriptor_;
}

const UnitPos& UnitPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleCfg_2eproto();
  return *default_instance_;
}

UnitPos* UnitPos::default_instance_ = NULL;

UnitPos* UnitPos::New() const {
  return new UnitPos;
}

void UnitPos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnitPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnitPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnitPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnitPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnitPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnitPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnitPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnitPos::MergeFrom(const UnitPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnitPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitPos::CopyFrom(const UnitPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitPos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UnitPos::Swap(UnitPos* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnitPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnitPos_descriptor_;
  metadata.reflection = UnitPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnitAttr::kUnitHpFieldNumber;
const int UnitAttr::kUnitAttackFieldNumber;
const int UnitAttr::kUnitDefenceFieldNumber;
const int UnitAttr::kUnitHitFieldNumber;
const int UnitAttr::kUnitMissFieldNumber;
const int UnitAttr::kUnitCritFieldNumber;
const int UnitAttr::kUnitAntiCritFieldNumber;
#endif  // !_MSC_VER

UnitAttr::UnitAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnitAttr::InitAsDefaultInstance() {
}

UnitAttr::UnitAttr(const UnitAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnitAttr::SharedCtor() {
  _cached_size_ = 0;
  unithp_ = 0;
  unitattack_ = 0;
  unitdefence_ = 0;
  unithit_ = 0;
  unitmiss_ = 0;
  unitcrit_ = 0;
  unitanticrit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitAttr::~UnitAttr() {
  SharedDtor();
}

void UnitAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnitAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnitAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitAttr_descriptor_;
}

const UnitAttr& UnitAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleCfg_2eproto();
  return *default_instance_;
}

UnitAttr* UnitAttr::default_instance_ = NULL;

UnitAttr* UnitAttr::New() const {
  return new UnitAttr;
}

void UnitAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unithp_ = 0;
    unitattack_ = 0;
    unitdefence_ = 0;
    unithit_ = 0;
    unitmiss_ = 0;
    unitcrit_ = 0;
    unitanticrit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnitAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 unitHp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unithp_)));
          set_has_unithp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unitAttack;
        break;
      }

      // optional int32 unitAttack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unitAttack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unitattack_)));
          set_has_unitattack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_unitDefence;
        break;
      }

      // optional int32 unitDefence = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unitDefence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unitdefence_)));
          set_has_unitdefence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_unitHit;
        break;
      }

      // optional int32 unitHit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unitHit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unithit_)));
          set_has_unithit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_unitMiss;
        break;
      }

      // optional int32 unitMiss = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unitMiss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unitmiss_)));
          set_has_unitmiss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_unitCrit;
        break;
      }

      // optional int32 unitCrit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unitCrit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unitcrit_)));
          set_has_unitcrit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_unitAntiCrit;
        break;
      }

      // optional int32 unitAntiCrit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unitAntiCrit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unitanticrit_)));
          set_has_unitanticrit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnitAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 unitHp = 1;
  if (has_unithp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->unithp(), output);
  }

  // optional int32 unitAttack = 2;
  if (has_unitattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->unitattack(), output);
  }

  // optional int32 unitDefence = 3;
  if (has_unitdefence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->unitdefence(), output);
  }

  // optional int32 unitHit = 4;
  if (has_unithit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->unithit(), output);
  }

  // optional int32 unitMiss = 5;
  if (has_unitmiss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->unitmiss(), output);
  }

  // optional int32 unitCrit = 6;
  if (has_unitcrit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->unitcrit(), output);
  }

  // optional int32 unitAntiCrit = 7;
  if (has_unitanticrit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->unitanticrit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnitAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 unitHp = 1;
  if (has_unithp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->unithp(), target);
  }

  // optional int32 unitAttack = 2;
  if (has_unitattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->unitattack(), target);
  }

  // optional int32 unitDefence = 3;
  if (has_unitdefence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->unitdefence(), target);
  }

  // optional int32 unitHit = 4;
  if (has_unithit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->unithit(), target);
  }

  // optional int32 unitMiss = 5;
  if (has_unitmiss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->unitmiss(), target);
  }

  // optional int32 unitCrit = 6;
  if (has_unitcrit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->unitcrit(), target);
  }

  // optional int32 unitAntiCrit = 7;
  if (has_unitanticrit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->unitanticrit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnitAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 unitHp = 1;
    if (has_unithp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unithp());
    }

    // optional int32 unitAttack = 2;
    if (has_unitattack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unitattack());
    }

    // optional int32 unitDefence = 3;
    if (has_unitdefence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unitdefence());
    }

    // optional int32 unitHit = 4;
    if (has_unithit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unithit());
    }

    // optional int32 unitMiss = 5;
    if (has_unitmiss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unitmiss());
    }

    // optional int32 unitCrit = 6;
    if (has_unitcrit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unitcrit());
    }

    // optional int32 unitAntiCrit = 7;
    if (has_unitanticrit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unitanticrit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnitAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnitAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnitAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnitAttr::MergeFrom(const UnitAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unithp()) {
      set_unithp(from.unithp());
    }
    if (from.has_unitattack()) {
      set_unitattack(from.unitattack());
    }
    if (from.has_unitdefence()) {
      set_unitdefence(from.unitdefence());
    }
    if (from.has_unithit()) {
      set_unithit(from.unithit());
    }
    if (from.has_unitmiss()) {
      set_unitmiss(from.unitmiss());
    }
    if (from.has_unitcrit()) {
      set_unitcrit(from.unitcrit());
    }
    if (from.has_unitanticrit()) {
      set_unitanticrit(from.unitanticrit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnitAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitAttr::CopyFrom(const UnitAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitAttr::IsInitialized() const {

  return true;
}

void UnitAttr::Swap(UnitAttr* other) {
  if (other != this) {
    std::swap(unithp_, other->unithp_);
    std::swap(unitattack_, other->unitattack_);
    std::swap(unitdefence_, other->unitdefence_);
    std::swap(unithit_, other->unithit_);
    std::swap(unitmiss_, other->unitmiss_);
    std::swap(unitcrit_, other->unitcrit_);
    std::swap(unitanticrit_, other->unitanticrit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnitAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnitAttr_descriptor_;
  metadata.reflection = UnitAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnitData::kIdFieldNumber;
const int UnitData::kItemIdFieldNumber;
const int UnitData::kCountFieldNumber;
const int UnitData::kHpFieldNumber;
const int UnitData::kMonsterIdFieldNumber;
const int UnitData::kUnitAttrFieldNumber;
const int UnitData::kLevelFieldNumber;
const int UnitData::kTroopTypeFieldNumber;
const int UnitData::kGroupIdFieldNumber;
const int UnitData::kExtendStateFieldNumber;
const int UnitData::kPlayerIdFieldNumber;
const int UnitData::kPosFieldNumber;
const int UnitData::kSkillDatasFieldNumber;
const int UnitData::kKillDatasFieldNumber;
#endif  // !_MSC_VER

UnitData::UnitData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnitData::InitAsDefaultInstance() {
  unitattr_ = const_cast< ::UnitAttr*>(&::UnitAttr::default_instance());
  pos_ = const_cast< ::UnitPos*>(&::UnitPos::default_instance());
}

UnitData::UnitData(const UnitData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnitData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  itemid_ = 0;
  count_ = 0;
  hp_ = 0;
  monsterid_ = 0;
  unitattr_ = NULL;
  level_ = 0;
  trooptype_ = 0;
  groupid_ = 0;
  extendstate_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitData::~UnitData() {
  SharedDtor();
}

void UnitData::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
    delete unitattr_;
    delete pos_;
  }
}

void UnitData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnitData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitData_descriptor_;
}

const UnitData& UnitData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleCfg_2eproto();
  return *default_instance_;
}

UnitData* UnitData::default_instance_ = NULL;

UnitData* UnitData::New() const {
  return new UnitData;
}

void UnitData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    itemid_ = 0;
    count_ = 0;
    hp_ = 0;
    monsterid_ = 0;
    if (has_unitattr()) {
      if (unitattr_ != NULL) unitattr_->::UnitAttr::Clear();
    }
    level_ = 0;
    trooptype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    groupid_ = 0;
    extendstate_ = 0;
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::UnitPos::Clear();
    }
  }
  skilldatas_.Clear();
  killdatas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnitData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // required int32 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hp;
        break;
      }

      // optional int32 hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_monsterId;
        break;
      }

      // optional int32 monsterId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monsterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_unitAttr;
        break;
      }

      // optional .UnitAttr unitAttr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unitattr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional int32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_troopType;
        break;
      }

      // optional int32 troopType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_troopType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trooptype_)));
          set_has_trooptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_groupId;
        break;
      }

      // optional int32 groupId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_extendState;
        break;
      }

      // optional int32 extendState = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extendState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extendstate_)));
          set_has_extendstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_playerId;
        break;
      }

      // optional string playerId = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_pos;
        break;
      }

      // optional .UnitPos pos = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_skillDatas;
        break;
      }

      // repeated .SkillData skillDatas = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillDatas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skilldatas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_skillDatas;
        if (input->ExpectTag(114)) goto parse_killDatas;
        break;
      }

      // repeated .KillData killDatas = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_killDatas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_killdatas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_killDatas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnitData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // required int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // optional int32 hp = 4;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hp(), output);
  }

  // optional int32 monsterId = 5;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->monsterid(), output);
  }

  // optional .UnitAttr unitAttr = 6;
  if (has_unitattr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->unitattr(), output);
  }

  // optional int32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->level(), output);
  }

  // optional int32 troopType = 8;
  if (has_trooptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->trooptype(), output);
  }

  // optional int32 groupId = 9;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->groupid(), output);
  }

  // optional int32 extendState = 10;
  if (has_extendstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->extendstate(), output);
  }

  // optional string playerId = 11;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->playerid(), output);
  }

  // optional .UnitPos pos = 12;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->pos(), output);
  }

  // repeated .SkillData skillDatas = 13;
  for (int i = 0; i < this->skilldatas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->skilldatas(i), output);
  }

  // repeated .KillData killDatas = 14;
  for (int i = 0; i < this->killdatas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->killdatas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnitData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }

  // required int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // optional int32 hp = 4;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hp(), target);
  }

  // optional int32 monsterId = 5;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->monsterid(), target);
  }

  // optional .UnitAttr unitAttr = 6;
  if (has_unitattr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->unitattr(), target);
  }

  // optional int32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->level(), target);
  }

  // optional int32 troopType = 8;
  if (has_trooptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->trooptype(), target);
  }

  // optional int32 groupId = 9;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->groupid(), target);
  }

  // optional int32 extendState = 10;
  if (has_extendstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->extendstate(), target);
  }

  // optional string playerId = 11;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->playerid(), target);
  }

  // optional .UnitPos pos = 12;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->pos(), target);
  }

  // repeated .SkillData skillDatas = 13;
  for (int i = 0; i < this->skilldatas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->skilldatas(i), target);
  }

  // repeated .KillData killDatas = 14;
  for (int i = 0; i < this->killdatas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->killdatas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnitData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // required int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 hp = 4;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 monsterId = 5;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monsterid());
    }

    // optional .UnitAttr unitAttr = 6;
    if (has_unitattr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unitattr());
    }

    // optional int32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 troopType = 8;
    if (has_trooptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trooptype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 groupId = 9;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // optional int32 extendState = 10;
    if (has_extendstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extendstate());
    }

    // optional string playerId = 11;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional .UnitPos pos = 12;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  // repeated .SkillData skillDatas = 13;
  total_size += 1 * this->skilldatas_size();
  for (int i = 0; i < this->skilldatas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skilldatas(i));
  }

  // repeated .KillData killDatas = 14;
  total_size += 1 * this->killdatas_size();
  for (int i = 0; i < this->killdatas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->killdatas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnitData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnitData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnitData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnitData::MergeFrom(const UnitData& from) {
  GOOGLE_CHECK_NE(&from, this);
  skilldatas_.MergeFrom(from.skilldatas_);
  killdatas_.MergeFrom(from.killdatas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_unitattr()) {
      mutable_unitattr()->::UnitAttr::MergeFrom(from.unitattr());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_trooptype()) {
      set_trooptype(from.trooptype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_extendstate()) {
      set_extendstate(from.extendstate());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_pos()) {
      mutable_pos()->::UnitPos::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnitData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitData::CopyFrom(const UnitData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  for (int i = 0; i < skilldatas_size(); i++) {
    if (!this->skilldatas(i).IsInitialized()) return false;
  }
  for (int i = 0; i < killdatas_size(); i++) {
    if (!this->killdatas(i).IsInitialized()) return false;
  }
  return true;
}

void UnitData::Swap(UnitData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    std::swap(hp_, other->hp_);
    std::swap(monsterid_, other->monsterid_);
    std::swap(unitattr_, other->unitattr_);
    std::swap(level_, other->level_);
    std::swap(trooptype_, other->trooptype_);
    std::swap(groupid_, other->groupid_);
    std::swap(extendstate_, other->extendstate_);
    std::swap(playerid_, other->playerid_);
    std::swap(pos_, other->pos_);
    skilldatas_.Swap(&other->skilldatas_);
    killdatas_.Swap(&other->killdatas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnitData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnitData_descriptor_;
  metadata.reflection = UnitData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KillData::kIdFieldNumber;
const int KillData::kCountFieldNumber;
#endif  // !_MSC_VER

KillData::KillData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KillData::InitAsDefaultInstance() {
}

KillData::KillData(const KillData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KillData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KillData::~KillData() {
  SharedDtor();
}

void KillData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KillData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KillData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KillData_descriptor_;
}

const KillData& KillData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleCfg_2eproto();
  return *default_instance_;
}

KillData* KillData::default_instance_ = NULL;

KillData* KillData::New() const {
  return new KillData;
}

void KillData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KillData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KillData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KillData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KillData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KillData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KillData::MergeFrom(const KillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KillData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KillData::CopyFrom(const KillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KillData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void KillData::Swap(KillData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KillData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KillData_descriptor_;
  metadata.reflection = KillData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillData::kIdFieldNumber;
const int SkillData::kLevelFieldNumber;
#endif  // !_MSC_VER

SkillData::SkillData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillData::InitAsDefaultInstance() {
}

SkillData::SkillData(const SkillData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillData::~SkillData() {
  SharedDtor();
}

void SkillData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillData_descriptor_;
}

const SkillData& SkillData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleCfg_2eproto();
  return *default_instance_;
}

SkillData* SkillData::default_instance_ = NULL;

SkillData* SkillData::New() const {
  return new SkillData;
}

void SkillData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillData::MergeFrom(const SkillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillData::CopyFrom(const SkillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SkillData::Swap(SkillData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillData_descriptor_;
  metadata.reflection = SkillData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BFMapCfg::kIdFieldNumber;
const int BFMapCfg::kWidthFieldNumber;
const int BFMapCfg::kHeightFieldNumber;
const int BFMapCfg::kTileWidthFieldNumber;
const int BFMapCfg::kTileHeightFieldNumber;
const int BFMapCfg::kAtkPosFieldNumber;
const int BFMapCfg::kDefPosFieldNumber;
const int BFMapCfg::kWarPosFieldNumber;
const int BFMapCfg::kHoverTimeFieldNumber;
const int BFMapCfg::kMaxFindStepFieldNumber;
const int BFMapCfg::kDatasFieldNumber;
const int BFMapCfg::kNavmeshesFieldNumber;
#endif  // !_MSC_VER

BFMapCfg::BFMapCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BFMapCfg::InitAsDefaultInstance() {
  atkpos_ = const_cast< ::UnitPos*>(&::UnitPos::default_instance());
  defpos_ = const_cast< ::UnitPos*>(&::UnitPos::default_instance());
  warpos_ = const_cast< ::UnitPos*>(&::UnitPos::default_instance());
}

BFMapCfg::BFMapCfg(const BFMapCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BFMapCfg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  width_ = 0;
  height_ = 0;
  tilewidth_ = 0;
  tileheight_ = 0;
  atkpos_ = NULL;
  defpos_ = NULL;
  warpos_ = NULL;
  hovertime_ = 0;
  maxfindstep_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BFMapCfg::~BFMapCfg() {
  SharedDtor();
}

void BFMapCfg::SharedDtor() {
  if (this != default_instance_) {
    delete atkpos_;
    delete defpos_;
    delete warpos_;
  }
}

void BFMapCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BFMapCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BFMapCfg_descriptor_;
}

const BFMapCfg& BFMapCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleCfg_2eproto();
  return *default_instance_;
}

BFMapCfg* BFMapCfg::default_instance_ = NULL;

BFMapCfg* BFMapCfg::New() const {
  return new BFMapCfg;
}

void BFMapCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    width_ = 0;
    height_ = 0;
    tilewidth_ = 0;
    tileheight_ = 0;
    if (has_atkpos()) {
      if (atkpos_ != NULL) atkpos_->::UnitPos::Clear();
    }
    if (has_defpos()) {
      if (defpos_ != NULL) defpos_->::UnitPos::Clear();
    }
    if (has_warpos()) {
      if (warpos_ != NULL) warpos_->::UnitPos::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hovertime_ = 0;
    maxfindstep_ = 0;
  }
  datas_.Clear();
  navmeshes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BFMapCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // required int32 width = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // required int32 height = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tileWidth;
        break;
      }

      // required int32 tileWidth = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tileWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tilewidth_)));
          set_has_tilewidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tileHeight;
        break;
      }

      // required int32 tileHeight = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tileHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tileheight_)));
          set_has_tileheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_atkPos;
        break;
      }

      // required .UnitPos atkPos = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_atkPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_atkpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_defPos;
        break;
      }

      // required .UnitPos defPos = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_warPos;
        break;
      }

      // optional .UnitPos warPos = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_warPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_warpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_hoverTime;
        break;
      }

      // optional int32 hoverTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hoverTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hovertime_)));
          set_has_hovertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_maxFindStep;
        break;
      }

      // optional int32 maxFindStep = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxFindStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxfindstep_)));
          set_has_maxfindstep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_datas;
        break;
      }

      // repeated int32 datas = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_datas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 160, input, this->mutable_datas())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_datas())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_datas;
        if (input->ExpectTag(170)) goto parse_navmeshes;
        break;
      }

      // repeated .UnitPos navmeshes = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_navmeshes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_navmeshes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_navmeshes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BFMapCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // required int32 height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // required int32 tileWidth = 4;
  if (has_tilewidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tilewidth(), output);
  }

  // required int32 tileHeight = 5;
  if (has_tileheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tileheight(), output);
  }

  // required .UnitPos atkPos = 10;
  if (has_atkpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->atkpos(), output);
  }

  // required .UnitPos defPos = 11;
  if (has_defpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->defpos(), output);
  }

  // optional .UnitPos warPos = 12;
  if (has_warpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->warpos(), output);
  }

  // optional int32 hoverTime = 13;
  if (has_hovertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->hovertime(), output);
  }

  // optional int32 maxFindStep = 14;
  if (has_maxfindstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->maxfindstep(), output);
  }

  // repeated int32 datas = 20;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      20, this->datas(i), output);
  }

  // repeated .UnitPos navmeshes = 21;
  for (int i = 0; i < this->navmeshes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->navmeshes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BFMapCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 width = 2;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // required int32 height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // required int32 tileWidth = 4;
  if (has_tilewidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tilewidth(), target);
  }

  // required int32 tileHeight = 5;
  if (has_tileheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tileheight(), target);
  }

  // required .UnitPos atkPos = 10;
  if (has_atkpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->atkpos(), target);
  }

  // required .UnitPos defPos = 11;
  if (has_defpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->defpos(), target);
  }

  // optional .UnitPos warPos = 12;
  if (has_warpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->warpos(), target);
  }

  // optional int32 hoverTime = 13;
  if (has_hovertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->hovertime(), target);
  }

  // optional int32 maxFindStep = 14;
  if (has_maxfindstep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->maxfindstep(), target);
  }

  // repeated int32 datas = 20;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(20, this->datas(i), target);
  }

  // repeated .UnitPos navmeshes = 21;
  for (int i = 0; i < this->navmeshes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->navmeshes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BFMapCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // required int32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // required int32 tileWidth = 4;
    if (has_tilewidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tilewidth());
    }

    // required int32 tileHeight = 5;
    if (has_tileheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tileheight());
    }

    // required .UnitPos atkPos = 10;
    if (has_atkpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->atkpos());
    }

    // required .UnitPos defPos = 11;
    if (has_defpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defpos());
    }

    // optional .UnitPos warPos = 12;
    if (has_warpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->warpos());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 hoverTime = 13;
    if (has_hovertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hovertime());
    }

    // optional int32 maxFindStep = 14;
    if (has_maxfindstep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxfindstep());
    }

  }
  // repeated int32 datas = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->datas_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->datas(i));
    }
    total_size += 2 * this->datas_size() + data_size;
  }

  // repeated .UnitPos navmeshes = 21;
  total_size += 2 * this->navmeshes_size();
  for (int i = 0; i < this->navmeshes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->navmeshes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BFMapCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BFMapCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BFMapCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BFMapCfg::MergeFrom(const BFMapCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  navmeshes_.MergeFrom(from.navmeshes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_tilewidth()) {
      set_tilewidth(from.tilewidth());
    }
    if (from.has_tileheight()) {
      set_tileheight(from.tileheight());
    }
    if (from.has_atkpos()) {
      mutable_atkpos()->::UnitPos::MergeFrom(from.atkpos());
    }
    if (from.has_defpos()) {
      mutable_defpos()->::UnitPos::MergeFrom(from.defpos());
    }
    if (from.has_warpos()) {
      mutable_warpos()->::UnitPos::MergeFrom(from.warpos());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hovertime()) {
      set_hovertime(from.hovertime());
    }
    if (from.has_maxfindstep()) {
      set_maxfindstep(from.maxfindstep());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BFMapCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BFMapCfg::CopyFrom(const BFMapCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BFMapCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_atkpos()) {
    if (!this->atkpos().IsInitialized()) return false;
  }
  if (has_defpos()) {
    if (!this->defpos().IsInitialized()) return false;
  }
  if (has_warpos()) {
    if (!this->warpos().IsInitialized()) return false;
  }
  for (int i = 0; i < navmeshes_size(); i++) {
    if (!this->navmeshes(i).IsInitialized()) return false;
  }
  return true;
}

void BFMapCfg::Swap(BFMapCfg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(tilewidth_, other->tilewidth_);
    std::swap(tileheight_, other->tileheight_);
    std::swap(atkpos_, other->atkpos_);
    std::swap(defpos_, other->defpos_);
    std::swap(warpos_, other->warpos_);
    std::swap(hovertime_, other->hovertime_);
    std::swap(maxfindstep_, other->maxfindstep_);
    datas_.Swap(&other->datas_);
    navmeshes_.Swap(&other->navmeshes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BFMapCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BFMapCfg_descriptor_;
  metadata.reflection = BFMapCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BFMissionCfg::kIdFieldNumber;
const int BFMissionCfg::kTypeFieldNumber;
const int BFMissionCfg::kMapIdFieldNumber;
const int BFMissionCfg::kTimeLimitFieldNumber;
const int BFMissionCfg::kAtkWarningYFieldNumber;
const int BFMissionCfg::kDefWarningYFieldNumber;
const int BFMissionCfg::kAtkTargetItemsFieldNumber;
const int BFMissionCfg::kDefTargetItemsFieldNumber;
const int BFMissionCfg::kAtkUnitsFieldNumber;
const int BFMissionCfg::kDefUnitsFieldNumber;
const int BFMissionCfg::kDeployRangeListFieldNumber;
#endif  // !_MSC_VER

BFMissionCfg::BFMissionCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BFMissionCfg::InitAsDefaultInstance() {
}

BFMissionCfg::BFMissionCfg(const BFMissionCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BFMissionCfg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  mapid_ = 0;
  timelimit_ = 0;
  atkwarningy_ = 0;
  defwarningy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BFMissionCfg::~BFMissionCfg() {
  SharedDtor();
}

void BFMissionCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BFMissionCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BFMissionCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BFMissionCfg_descriptor_;
}

const BFMissionCfg& BFMissionCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleCfg_2eproto();
  return *default_instance_;
}

BFMissionCfg* BFMissionCfg::default_instance_ = NULL;

BFMissionCfg* BFMissionCfg::New() const {
  return new BFMissionCfg;
}

void BFMissionCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    mapid_ = 0;
    timelimit_ = 0;
    atkwarningy_ = 0;
    defwarningy_ = 0;
  }
  atktargetitems_.Clear();
  deftargetitems_.Clear();
  atkunits_.Clear();
  defunits_.Clear();
  deployrangelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BFMissionCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mapId;
        break;
      }

      // required int32 mapId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timeLimit;
        break;
      }

      // required int32 timeLimit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timelimit_)));
          set_has_timelimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_atkWarningY;
        break;
      }

      // required int32 atkWarningY = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atkWarningY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atkwarningy_)));
          set_has_atkwarningy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_defWarningY;
        break;
      }

      // required int32 defWarningY = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defWarningY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defwarningy_)));
          set_has_defwarningy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_atkTargetItems;
        break;
      }

      // repeated int32 atkTargetItems = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atkTargetItems:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_atktargetitems())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_atktargetitems())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_atkTargetItems;
        if (input->ExpectTag(96)) goto parse_defTargetItems;
        break;
      }

      // repeated int32 defTargetItems = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defTargetItems:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_deftargetitems())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_deftargetitems())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_defTargetItems;
        if (input->ExpectTag(106)) goto parse_atkUnits;
        break;
      }

      // repeated .MissionUnit atkUnits = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_atkUnits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_atkunits()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_atkUnits;
        if (input->ExpectTag(114)) goto parse_defUnits;
        break;
      }

      // repeated .MissionUnit defUnits = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defUnits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_defunits()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_defUnits;
        if (input->ExpectTag(122)) goto parse_deployRangeList;
        break;
      }

      // repeated .DeployRange deployRangeList = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deployRangeList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_deployrangelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_deployRangeList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BFMissionCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 mapId = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mapid(), output);
  }

  // required int32 timeLimit = 4;
  if (has_timelimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timelimit(), output);
  }

  // required int32 atkWarningY = 6;
  if (has_atkwarningy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->atkwarningy(), output);
  }

  // required int32 defWarningY = 7;
  if (has_defwarningy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->defwarningy(), output);
  }

  // repeated int32 atkTargetItems = 11;
  for (int i = 0; i < this->atktargetitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->atktargetitems(i), output);
  }

  // repeated int32 defTargetItems = 12;
  for (int i = 0; i < this->deftargetitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->deftargetitems(i), output);
  }

  // repeated .MissionUnit atkUnits = 13;
  for (int i = 0; i < this->atkunits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->atkunits(i), output);
  }

  // repeated .MissionUnit defUnits = 14;
  for (int i = 0; i < this->defunits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->defunits(i), output);
  }

  // repeated .DeployRange deployRangeList = 15;
  for (int i = 0; i < this->deployrangelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->deployrangelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BFMissionCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 mapId = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mapid(), target);
  }

  // required int32 timeLimit = 4;
  if (has_timelimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timelimit(), target);
  }

  // required int32 atkWarningY = 6;
  if (has_atkwarningy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->atkwarningy(), target);
  }

  // required int32 defWarningY = 7;
  if (has_defwarningy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->defwarningy(), target);
  }

  // repeated int32 atkTargetItems = 11;
  for (int i = 0; i < this->atktargetitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->atktargetitems(i), target);
  }

  // repeated int32 defTargetItems = 12;
  for (int i = 0; i < this->deftargetitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->deftargetitems(i), target);
  }

  // repeated .MissionUnit atkUnits = 13;
  for (int i = 0; i < this->atkunits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->atkunits(i), target);
  }

  // repeated .MissionUnit defUnits = 14;
  for (int i = 0; i < this->defunits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->defunits(i), target);
  }

  // repeated .DeployRange deployRangeList = 15;
  for (int i = 0; i < this->deployrangelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->deployrangelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BFMissionCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 mapId = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // required int32 timeLimit = 4;
    if (has_timelimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timelimit());
    }

    // required int32 atkWarningY = 6;
    if (has_atkwarningy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atkwarningy());
    }

    // required int32 defWarningY = 7;
    if (has_defwarningy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defwarningy());
    }

  }
  // repeated int32 atkTargetItems = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->atktargetitems_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->atktargetitems(i));
    }
    total_size += 1 * this->atktargetitems_size() + data_size;
  }

  // repeated int32 defTargetItems = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->deftargetitems_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->deftargetitems(i));
    }
    total_size += 1 * this->deftargetitems_size() + data_size;
  }

  // repeated .MissionUnit atkUnits = 13;
  total_size += 1 * this->atkunits_size();
  for (int i = 0; i < this->atkunits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->atkunits(i));
  }

  // repeated .MissionUnit defUnits = 14;
  total_size += 1 * this->defunits_size();
  for (int i = 0; i < this->defunits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->defunits(i));
  }

  // repeated .DeployRange deployRangeList = 15;
  total_size += 1 * this->deployrangelist_size();
  for (int i = 0; i < this->deployrangelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deployrangelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BFMissionCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BFMissionCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BFMissionCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BFMissionCfg::MergeFrom(const BFMissionCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  atktargetitems_.MergeFrom(from.atktargetitems_);
  deftargetitems_.MergeFrom(from.deftargetitems_);
  atkunits_.MergeFrom(from.atkunits_);
  defunits_.MergeFrom(from.defunits_);
  deployrangelist_.MergeFrom(from.deployrangelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_timelimit()) {
      set_timelimit(from.timelimit());
    }
    if (from.has_atkwarningy()) {
      set_atkwarningy(from.atkwarningy());
    }
    if (from.has_defwarningy()) {
      set_defwarningy(from.defwarningy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BFMissionCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BFMissionCfg::CopyFrom(const BFMissionCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BFMissionCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  for (int i = 0; i < atkunits_size(); i++) {
    if (!this->atkunits(i).IsInitialized()) return false;
  }
  for (int i = 0; i < defunits_size(); i++) {
    if (!this->defunits(i).IsInitialized()) return false;
  }
  for (int i = 0; i < deployrangelist_size(); i++) {
    if (!this->deployrangelist(i).IsInitialized()) return false;
  }
  return true;
}

void BFMissionCfg::Swap(BFMissionCfg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(mapid_, other->mapid_);
    std::swap(timelimit_, other->timelimit_);
    std::swap(atkwarningy_, other->atkwarningy_);
    std::swap(defwarningy_, other->defwarningy_);
    atktargetitems_.Swap(&other->atktargetitems_);
    deftargetitems_.Swap(&other->deftargetitems_);
    atkunits_.Swap(&other->atkunits_);
    defunits_.Swap(&other->defunits_);
    deployrangelist_.Swap(&other->deployrangelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BFMissionCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BFMissionCfg_descriptor_;
  metadata.reflection = BFMissionCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeployRange::kReservedFieldNumber;
const int DeployRange::kRminFieldNumber;
const int DeployRange::kRmaxFieldNumber;
#endif  // !_MSC_VER

DeployRange::DeployRange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeployRange::InitAsDefaultInstance() {
  rmin_ = const_cast< ::UnitPos*>(&::UnitPos::default_instance());
  rmax_ = const_cast< ::UnitPos*>(&::UnitPos::default_instance());
}

DeployRange::DeployRange(const DeployRange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeployRange::SharedCtor() {
  _cached_size_ = 0;
  reserved_ = 0;
  rmin_ = NULL;
  rmax_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeployRange::~DeployRange() {
  SharedDtor();
}

void DeployRange::SharedDtor() {
  if (this != default_instance_) {
    delete rmin_;
    delete rmax_;
  }
}

void DeployRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeployRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeployRange_descriptor_;
}

const DeployRange& DeployRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleCfg_2eproto();
  return *default_instance_;
}

DeployRange* DeployRange::default_instance_ = NULL;

DeployRange* DeployRange::New() const {
  return new DeployRange;
}

void DeployRange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reserved_ = 0;
    if (has_rmin()) {
      if (rmin_ != NULL) rmin_->::UnitPos::Clear();
    }
    if (has_rmax()) {
      if (rmax_ != NULL) rmax_->::UnitPos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeployRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 reserved = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_)));
          set_has_reserved();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rmin;
        break;
      }

      // required .UnitPos rmin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rmin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rmin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rmax;
        break;
      }

      // required .UnitPos rmax = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rmax:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rmax()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeployRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 reserved = 1;
  if (has_reserved()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reserved(), output);
  }

  // required .UnitPos rmin = 2;
  if (has_rmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rmin(), output);
  }

  // required .UnitPos rmax = 3;
  if (has_rmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rmax(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeployRange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 reserved = 1;
  if (has_reserved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reserved(), target);
  }

  // required .UnitPos rmin = 2;
  if (has_rmin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rmin(), target);
  }

  // required .UnitPos rmax = 3;
  if (has_rmax()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rmax(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeployRange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 reserved = 1;
    if (has_reserved()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved());
    }

    // required .UnitPos rmin = 2;
    if (has_rmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rmin());
    }

    // required .UnitPos rmax = 3;
    if (has_rmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rmax());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeployRange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeployRange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeployRange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeployRange::MergeFrom(const DeployRange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reserved()) {
      set_reserved(from.reserved());
    }
    if (from.has_rmin()) {
      mutable_rmin()->::UnitPos::MergeFrom(from.rmin());
    }
    if (from.has_rmax()) {
      mutable_rmax()->::UnitPos::MergeFrom(from.rmax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeployRange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeployRange::CopyFrom(const DeployRange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeployRange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_rmin()) {
    if (!this->rmin().IsInitialized()) return false;
  }
  if (has_rmax()) {
    if (!this->rmax().IsInitialized()) return false;
  }
  return true;
}

void DeployRange::Swap(DeployRange* other) {
  if (other != this) {
    std::swap(reserved_, other->reserved_);
    std::swap(rmin_, other->rmin_);
    std::swap(rmax_, other->rmax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeployRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeployRange_descriptor_;
  metadata.reflection = DeployRange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MissionUnit::kIdFieldNumber;
const int MissionUnit::kObjIdFieldNumber;
const int MissionUnit::kGroupIdFieldNumber;
const int MissionUnit::kPosFieldNumber;
const int MissionUnit::kInitDirFieldNumber;
#endif  // !_MSC_VER

MissionUnit::MissionUnit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MissionUnit::InitAsDefaultInstance() {
  pos_ = const_cast< ::UnitPos*>(&::UnitPos::default_instance());
}

MissionUnit::MissionUnit(const MissionUnit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MissionUnit::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  objid_ = 0;
  groupid_ = 0;
  pos_ = NULL;
  initdir_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionUnit::~MissionUnit() {
  SharedDtor();
}

void MissionUnit::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void MissionUnit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionUnit_descriptor_;
}

const MissionUnit& MissionUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleCfg_2eproto();
  return *default_instance_;
}

MissionUnit* MissionUnit::default_instance_ = NULL;

MissionUnit* MissionUnit::New() const {
  return new MissionUnit;
}

void MissionUnit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    objid_ = 0;
    groupid_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::UnitPos::Clear();
    }
    initdir_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MissionUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_objId;
        break;
      }

      // required int32 objId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_groupId;
        break;
      }

      // required int32 groupId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pos;
        break;
      }

      // required .UnitPos pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_initDir;
        break;
      }

      // required int32 initDir = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_initDir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &initdir_)));
          set_has_initdir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MissionUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 objId = 2;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->objid(), output);
  }

  // required int32 groupId = 3;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->groupid(), output);
  }

  // required .UnitPos pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pos(), output);
  }

  // required int32 initDir = 5;
  if (has_initdir()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->initdir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MissionUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 objId = 2;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->objid(), target);
  }

  // required int32 groupId = 3;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->groupid(), target);
  }

  // required .UnitPos pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pos(), target);
  }

  // required int32 initDir = 5;
  if (has_initdir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->initdir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MissionUnit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 objId = 2;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // required int32 groupId = 3;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // required .UnitPos pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // required int32 initDir = 5;
    if (has_initdir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->initdir());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissionUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissionUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MissionUnit::MergeFrom(const MissionUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_pos()) {
      mutable_pos()->::UnitPos::MergeFrom(from.pos());
    }
    if (from.has_initdir()) {
      set_initdir(from.initdir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MissionUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionUnit::CopyFrom(const MissionUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionUnit::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void MissionUnit::Swap(MissionUnit* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(objid_, other->objid_);
    std::swap(groupid_, other->groupid_);
    std::swap(pos_, other->pos_);
    std::swap(initdir_, other->initdir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MissionUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissionUnit_descriptor_;
  metadata.reflection = MissionUnit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BFUnitCfg::kIdFieldNumber;
const int BFUnitCfg::kTypeFieldNumber;
const int BFUnitCfg::kSizeFieldNumber;
const int BFUnitCfg::kPosPriorFieldNumber;
const int BFUnitCfg::kViewRangeFieldNumber;
const int BFUnitCfg::kTrackRangeFieldNumber;
const int BFUnitCfg::kIdlePeriodFieldNumber;
const int BFUnitCfg::kMovePeriodFieldNumber;
const int BFUnitCfg::kTurnPeriodFieldNumber;
const int BFUnitCfg::kMoveStepFieldNumber;
const int BFUnitCfg::kFreeFlyFieldNumber;
const int BFUnitCfg::kSkillDatasFieldNumber;
#endif  // !_MSC_VER

BFUnitCfg::BFUnitCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BFUnitCfg::InitAsDefaultInstance() {
  size_ = const_cast< ::UnitSize*>(&::UnitSize::default_instance());
}

BFUnitCfg::BFUnitCfg(const BFUnitCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BFUnitCfg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  size_ = NULL;
  posprior_ = 0;
  viewrange_ = 0;
  trackrange_ = 0;
  idleperiod_ = 0;
  moveperiod_ = 0;
  turnperiod_ = 0;
  movestep_ = 0;
  freefly_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BFUnitCfg::~BFUnitCfg() {
  SharedDtor();
}

void BFUnitCfg::SharedDtor() {
  if (this != default_instance_) {
    delete size_;
  }
}

void BFUnitCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BFUnitCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BFUnitCfg_descriptor_;
}

const BFUnitCfg& BFUnitCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleCfg_2eproto();
  return *default_instance_;
}

BFUnitCfg* BFUnitCfg::default_instance_ = NULL;

BFUnitCfg* BFUnitCfg::New() const {
  return new BFUnitCfg;
}

void BFUnitCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    if (has_size()) {
      if (size_ != NULL) size_->::UnitSize::Clear();
    }
    posprior_ = 0;
    viewrange_ = 0;
    trackrange_ = 0;
    idleperiod_ = 0;
    moveperiod_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    turnperiod_ = 0;
    movestep_ = 0;
    freefly_ = 0;
  }
  skilldatas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BFUnitCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_size;
        break;
      }

      // required .UnitSize size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_posPrior;
        break;
      }

      // required int32 posPrior = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posPrior:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posprior_)));
          set_has_posprior();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_viewRange;
        break;
      }

      // required int32 viewRange = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viewRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viewrange_)));
          set_has_viewrange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_trackRange;
        break;
      }

      // required int32 trackRange = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trackRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trackrange_)));
          set_has_trackrange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_idlePeriod;
        break;
      }

      // required int32 idlePeriod = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idlePeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idleperiod_)));
          set_has_idleperiod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_movePeriod;
        break;
      }

      // required int32 movePeriod = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_movePeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moveperiod_)));
          set_has_moveperiod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_turnPeriod;
        break;
      }

      // optional int32 turnPeriod = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turnPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turnperiod_)));
          set_has_turnperiod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_moveStep;
        break;
      }

      // optional int32 moveStep = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movestep_)));
          set_has_movestep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_freeFly;
        break;
      }

      // optional int32 freeFly = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeFly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freefly_)));
          set_has_freefly();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_skillDatas;
        break;
      }

      // repeated .SkillData skillDatas = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillDatas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skilldatas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_skillDatas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BFUnitCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required .UnitSize size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->size(), output);
  }

  // required int32 posPrior = 4;
  if (has_posprior()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->posprior(), output);
  }

  // required int32 viewRange = 5;
  if (has_viewrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->viewrange(), output);
  }

  // required int32 trackRange = 6;
  if (has_trackrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->trackrange(), output);
  }

  // required int32 idlePeriod = 10;
  if (has_idleperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->idleperiod(), output);
  }

  // required int32 movePeriod = 11;
  if (has_moveperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->moveperiod(), output);
  }

  // optional int32 turnPeriod = 12;
  if (has_turnperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->turnperiod(), output);
  }

  // optional int32 moveStep = 13;
  if (has_movestep()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->movestep(), output);
  }

  // optional int32 freeFly = 14;
  if (has_freefly()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->freefly(), output);
  }

  // repeated .SkillData skillDatas = 20;
  for (int i = 0; i < this->skilldatas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->skilldatas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BFUnitCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required .UnitSize size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->size(), target);
  }

  // required int32 posPrior = 4;
  if (has_posprior()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->posprior(), target);
  }

  // required int32 viewRange = 5;
  if (has_viewrange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->viewrange(), target);
  }

  // required int32 trackRange = 6;
  if (has_trackrange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->trackrange(), target);
  }

  // required int32 idlePeriod = 10;
  if (has_idleperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->idleperiod(), target);
  }

  // required int32 movePeriod = 11;
  if (has_moveperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->moveperiod(), target);
  }

  // optional int32 turnPeriod = 12;
  if (has_turnperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->turnperiod(), target);
  }

  // optional int32 moveStep = 13;
  if (has_movestep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->movestep(), target);
  }

  // optional int32 freeFly = 14;
  if (has_freefly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->freefly(), target);
  }

  // repeated .SkillData skillDatas = 20;
  for (int i = 0; i < this->skilldatas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->skilldatas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BFUnitCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required .UnitSize size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->size());
    }

    // required int32 posPrior = 4;
    if (has_posprior()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posprior());
    }

    // required int32 viewRange = 5;
    if (has_viewrange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viewrange());
    }

    // required int32 trackRange = 6;
    if (has_trackrange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trackrange());
    }

    // required int32 idlePeriod = 10;
    if (has_idleperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idleperiod());
    }

    // required int32 movePeriod = 11;
    if (has_moveperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moveperiod());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 turnPeriod = 12;
    if (has_turnperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turnperiod());
    }

    // optional int32 moveStep = 13;
    if (has_movestep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movestep());
    }

    // optional int32 freeFly = 14;
    if (has_freefly()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freefly());
    }

  }
  // repeated .SkillData skillDatas = 20;
  total_size += 2 * this->skilldatas_size();
  for (int i = 0; i < this->skilldatas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skilldatas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BFUnitCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BFUnitCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BFUnitCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BFUnitCfg::MergeFrom(const BFUnitCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  skilldatas_.MergeFrom(from.skilldatas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_size()) {
      mutable_size()->::UnitSize::MergeFrom(from.size());
    }
    if (from.has_posprior()) {
      set_posprior(from.posprior());
    }
    if (from.has_viewrange()) {
      set_viewrange(from.viewrange());
    }
    if (from.has_trackrange()) {
      set_trackrange(from.trackrange());
    }
    if (from.has_idleperiod()) {
      set_idleperiod(from.idleperiod());
    }
    if (from.has_moveperiod()) {
      set_moveperiod(from.moveperiod());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_turnperiod()) {
      set_turnperiod(from.turnperiod());
    }
    if (from.has_movestep()) {
      set_movestep(from.movestep());
    }
    if (from.has_freefly()) {
      set_freefly(from.freefly());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BFUnitCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BFUnitCfg::CopyFrom(const BFUnitCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BFUnitCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  if (has_size()) {
    if (!this->size().IsInitialized()) return false;
  }
  for (int i = 0; i < skilldatas_size(); i++) {
    if (!this->skilldatas(i).IsInitialized()) return false;
  }
  return true;
}

void BFUnitCfg::Swap(BFUnitCfg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(size_, other->size_);
    std::swap(posprior_, other->posprior_);
    std::swap(viewrange_, other->viewrange_);
    std::swap(trackrange_, other->trackrange_);
    std::swap(idleperiod_, other->idleperiod_);
    std::swap(moveperiod_, other->moveperiod_);
    std::swap(turnperiod_, other->turnperiod_);
    std::swap(movestep_, other->movestep_);
    std::swap(freefly_, other->freefly_);
    skilldatas_.Swap(&other->skilldatas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BFUnitCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BFUnitCfg_descriptor_;
  metadata.reflection = BFUnitCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BFMonsterCfg::kIdFieldNumber;
const int BFMonsterCfg::kItemIdFieldNumber;
const int BFMonsterCfg::kUnitAttrFieldNumber;
const int BFMonsterCfg::kSkillDatasFieldNumber;
#endif  // !_MSC_VER

BFMonsterCfg::BFMonsterCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BFMonsterCfg::InitAsDefaultInstance() {
  unitattr_ = const_cast< ::UnitAttr*>(&::UnitAttr::default_instance());
}

BFMonsterCfg::BFMonsterCfg(const BFMonsterCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BFMonsterCfg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  itemid_ = 0;
  unitattr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BFMonsterCfg::~BFMonsterCfg() {
  SharedDtor();
}

void BFMonsterCfg::SharedDtor() {
  if (this != default_instance_) {
    delete unitattr_;
  }
}

void BFMonsterCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BFMonsterCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BFMonsterCfg_descriptor_;
}

const BFMonsterCfg& BFMonsterCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleCfg_2eproto();
  return *default_instance_;
}

BFMonsterCfg* BFMonsterCfg::default_instance_ = NULL;

BFMonsterCfg* BFMonsterCfg::New() const {
  return new BFMonsterCfg;
}

void BFMonsterCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    itemid_ = 0;
    if (has_unitattr()) {
      if (unitattr_ != NULL) unitattr_->::UnitAttr::Clear();
    }
  }
  skilldatas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BFMonsterCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // required int32 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_unitAttr;
        break;
      }

      // required .UnitAttr unitAttr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unitattr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_skillDatas;
        break;
      }

      // repeated .SkillData skillDatas = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillDatas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skilldatas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_skillDatas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BFMonsterCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // required .UnitAttr unitAttr = 3;
  if (has_unitattr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->unitattr(), output);
  }

  // repeated .SkillData skillDatas = 4;
  for (int i = 0; i < this->skilldatas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->skilldatas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BFMonsterCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }

  // required .UnitAttr unitAttr = 3;
  if (has_unitattr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->unitattr(), target);
  }

  // repeated .SkillData skillDatas = 4;
  for (int i = 0; i < this->skilldatas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->skilldatas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BFMonsterCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // required .UnitAttr unitAttr = 3;
    if (has_unitattr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unitattr());
    }

  }
  // repeated .SkillData skillDatas = 4;
  total_size += 1 * this->skilldatas_size();
  for (int i = 0; i < this->skilldatas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skilldatas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BFMonsterCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BFMonsterCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BFMonsterCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BFMonsterCfg::MergeFrom(const BFMonsterCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  skilldatas_.MergeFrom(from.skilldatas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_unitattr()) {
      mutable_unitattr()->::UnitAttr::MergeFrom(from.unitattr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BFMonsterCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BFMonsterCfg::CopyFrom(const BFMonsterCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BFMonsterCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < skilldatas_size(); i++) {
    if (!this->skilldatas(i).IsInitialized()) return false;
  }
  return true;
}

void BFMonsterCfg::Swap(BFMonsterCfg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(itemid_, other->itemid_);
    std::swap(unitattr_, other->unitattr_);
    skilldatas_.Swap(&other->skilldatas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BFMonsterCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BFMonsterCfg_descriptor_;
  metadata.reflection = BFMonsterCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BFSkillCfg::kIdFieldNumber;
const int BFSkillCfg::kTypeFieldNumber;
const int BFSkillCfg::kTriggerTypeFieldNumber;
const int BFSkillCfg::kCastCheckTypeFieldNumber;
const int BFSkillCfg::kDurationFieldNumber;
const int BFSkillCfg::kSkillCdFieldNumber;
const int BFSkillCfg::kCdTeamFieldNumber;
const int BFSkillCfg::kAffectCampFieldNumber;
const int BFSkillCfg::kAttackDisMinFieldNumber;
const int BFSkillCfg::kAttackDisLowFieldNumber;
const int BFSkillCfg::kAttackDisUpFieldNumber;
const int BFSkillCfg::kWaitTimeFieldNumber;
const int BFSkillCfg::kLastTimeFieldNumber;
const int BFSkillCfg::kBulletSpeedFieldNumber;
const int BFSkillCfg::kShapeFieldNumber;
const int BFSkillCfg::kEnemyIdsFieldNumber;
const int BFSkillCfg::kEnemyTypesFieldNumber;
const int BFSkillCfg::kBuffIdsFieldNumber;
const int BFSkillCfg::kDamageCntFieldNumber;
const int BFSkillCfg::kDamagePerFieldNumber;
const int BFSkillCfg::kPostSkillFieldNumber;
const int BFSkillCfg::kPostTimeFieldNumber;
#endif  // !_MSC_VER

BFSkillCfg::BFSkillCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BFSkillCfg::InitAsDefaultInstance() {
  shape_ = const_cast< ::SkillShape*>(&::SkillShape::default_instance());
}

BFSkillCfg::BFSkillCfg(const BFSkillCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BFSkillCfg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  triggertype_ = 0;
  castchecktype_ = 0;
  duration_ = 0;
  skillcd_ = 0;
  cdteam_ = 0;
  affectcamp_ = 0;
  attackdismin_ = 0;
  attackdislow_ = 0;
  attackdisup_ = 0;
  waittime_ = 0;
  lasttime_ = 0;
  bulletspeed_ = 0;
  shape_ = NULL;
  damagecnt_ = 0;
  damageper_ = 0;
  postskill_ = 0;
  posttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BFSkillCfg::~BFSkillCfg() {
  SharedDtor();
}

void BFSkillCfg::SharedDtor() {
  if (this != default_instance_) {
    delete shape_;
  }
}

void BFSkillCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BFSkillCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BFSkillCfg_descriptor_;
}

const BFSkillCfg& BFSkillCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleCfg_2eproto();
  return *default_instance_;
}

BFSkillCfg* BFSkillCfg::default_instance_ = NULL;

BFSkillCfg* BFSkillCfg::New() const {
  return new BFSkillCfg;
}

void BFSkillCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    triggertype_ = 0;
    castchecktype_ = 0;
    duration_ = 0;
    skillcd_ = 0;
    cdteam_ = 0;
    affectcamp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    attackdismin_ = 0;
    attackdislow_ = 0;
    attackdisup_ = 0;
    waittime_ = 0;
    lasttime_ = 0;
    bulletspeed_ = 0;
    if (has_shape()) {
      if (shape_ != NULL) shape_->::SkillShape::Clear();
    }
  }
  if (_has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    damagecnt_ = 0;
    damageper_ = 0;
    postskill_ = 0;
    posttime_ = 0;
  }
  enemyids_.Clear();
  enemytypes_.Clear();
  buffids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BFSkillCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_triggerType;
        break;
      }

      // optional int32 triggerType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_triggerType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &triggertype_)));
          set_has_triggertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_castCheckType;
        break;
      }

      // optional int32 castCheckType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_castCheckType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &castchecktype_)));
          set_has_castchecktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_duration;
        break;
      }

      // optional int32 duration = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_skillCd;
        break;
      }

      // required int32 skillCd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillCd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillcd_)));
          set_has_skillcd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cdTeam;
        break;
      }

      // optional int32 cdTeam = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cdTeam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cdteam_)));
          set_has_cdteam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_affectCamp;
        break;
      }

      // required int32 affectCamp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_affectCamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &affectcamp_)));
          set_has_affectcamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_attackDisMin;
        break;
      }

      // required int32 attackDisMin = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackDisMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attackdismin_)));
          set_has_attackdismin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_attackDisLow;
        break;
      }

      // required int32 attackDisLow = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackDisLow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attackdislow_)));
          set_has_attackdislow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_attackDisUp;
        break;
      }

      // required int32 attackDisUp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackDisUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attackdisup_)));
          set_has_attackdisup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_waitTime;
        break;
      }

      // optional int32 waitTime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_waitTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &waittime_)));
          set_has_waittime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_lastTime;
        break;
      }

      // optional int32 lastTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_bulletSpeed;
        break;
      }

      // optional int32 bulletSpeed = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bulletSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bulletspeed_)));
          set_has_bulletspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_shape;
        break;
      }

      // required .SkillShape shape = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_enemyIds;
        break;
      }

      // repeated int32 enemyIds = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enemyIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 168, input, this->mutable_enemyids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_enemyids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_enemyIds;
        if (input->ExpectTag(176)) goto parse_enemyTypes;
        break;
      }

      // repeated int32 enemyTypes = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enemyTypes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 176, input, this->mutable_enemytypes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_enemytypes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_enemyTypes;
        if (input->ExpectTag(184)) goto parse_buffIds;
        break;
      }

      // repeated int32 buffIds = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buffIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 184, input, this->mutable_buffids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_buffids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_buffIds;
        if (input->ExpectTag(192)) goto parse_damageCnt;
        break;
      }

      // required int32 damageCnt = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damageCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damagecnt_)));
          set_has_damagecnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_damagePer;
        break;
      }

      // optional int32 damagePer = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damagePer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damageper_)));
          set_has_damageper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_postSkill;
        break;
      }

      // optional int32 postSkill = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_postSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &postskill_)));
          set_has_postskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_postTime;
        break;
      }

      // optional int32 postTime = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_postTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posttime_)));
          set_has_posttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BFSkillCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 triggerType = 3;
  if (has_triggertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->triggertype(), output);
  }

  // optional int32 castCheckType = 4;
  if (has_castchecktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->castchecktype(), output);
  }

  // optional int32 duration = 5;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->duration(), output);
  }

  // required int32 skillCd = 6;
  if (has_skillcd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->skillcd(), output);
  }

  // optional int32 cdTeam = 7;
  if (has_cdteam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cdteam(), output);
  }

  // required int32 affectCamp = 10;
  if (has_affectcamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->affectcamp(), output);
  }

  // required int32 attackDisMin = 11;
  if (has_attackdismin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->attackdismin(), output);
  }

  // required int32 attackDisLow = 12;
  if (has_attackdislow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->attackdislow(), output);
  }

  // required int32 attackDisUp = 13;
  if (has_attackdisup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->attackdisup(), output);
  }

  // optional int32 waitTime = 14;
  if (has_waittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->waittime(), output);
  }

  // optional int32 lastTime = 15;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->lasttime(), output);
  }

  // optional int32 bulletSpeed = 16;
  if (has_bulletspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->bulletspeed(), output);
  }

  // required .SkillShape shape = 20;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->shape(), output);
  }

  // repeated int32 enemyIds = 21;
  for (int i = 0; i < this->enemyids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      21, this->enemyids(i), output);
  }

  // repeated int32 enemyTypes = 22;
  for (int i = 0; i < this->enemytypes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      22, this->enemytypes(i), output);
  }

  // repeated int32 buffIds = 23;
  for (int i = 0; i < this->buffids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      23, this->buffids(i), output);
  }

  // required int32 damageCnt = 24;
  if (has_damagecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->damagecnt(), output);
  }

  // optional int32 damagePer = 25;
  if (has_damageper()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->damageper(), output);
  }

  // optional int32 postSkill = 30;
  if (has_postskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->postskill(), output);
  }

  // optional int32 postTime = 31;
  if (has_posttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->posttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BFSkillCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 triggerType = 3;
  if (has_triggertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->triggertype(), target);
  }

  // optional int32 castCheckType = 4;
  if (has_castchecktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->castchecktype(), target);
  }

  // optional int32 duration = 5;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->duration(), target);
  }

  // required int32 skillCd = 6;
  if (has_skillcd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->skillcd(), target);
  }

  // optional int32 cdTeam = 7;
  if (has_cdteam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cdteam(), target);
  }

  // required int32 affectCamp = 10;
  if (has_affectcamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->affectcamp(), target);
  }

  // required int32 attackDisMin = 11;
  if (has_attackdismin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->attackdismin(), target);
  }

  // required int32 attackDisLow = 12;
  if (has_attackdislow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->attackdislow(), target);
  }

  // required int32 attackDisUp = 13;
  if (has_attackdisup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->attackdisup(), target);
  }

  // optional int32 waitTime = 14;
  if (has_waittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->waittime(), target);
  }

  // optional int32 lastTime = 15;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->lasttime(), target);
  }

  // optional int32 bulletSpeed = 16;
  if (has_bulletspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->bulletspeed(), target);
  }

  // required .SkillShape shape = 20;
  if (has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->shape(), target);
  }

  // repeated int32 enemyIds = 21;
  for (int i = 0; i < this->enemyids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(21, this->enemyids(i), target);
  }

  // repeated int32 enemyTypes = 22;
  for (int i = 0; i < this->enemytypes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(22, this->enemytypes(i), target);
  }

  // repeated int32 buffIds = 23;
  for (int i = 0; i < this->buffids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(23, this->buffids(i), target);
  }

  // required int32 damageCnt = 24;
  if (has_damagecnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->damagecnt(), target);
  }

  // optional int32 damagePer = 25;
  if (has_damageper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->damageper(), target);
  }

  // optional int32 postSkill = 30;
  if (has_postskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->postskill(), target);
  }

  // optional int32 postTime = 31;
  if (has_posttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->posttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BFSkillCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 triggerType = 3;
    if (has_triggertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->triggertype());
    }

    // optional int32 castCheckType = 4;
    if (has_castchecktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->castchecktype());
    }

    // optional int32 duration = 5;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // required int32 skillCd = 6;
    if (has_skillcd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillcd());
    }

    // optional int32 cdTeam = 7;
    if (has_cdteam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cdteam());
    }

    // required int32 affectCamp = 10;
    if (has_affectcamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->affectcamp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 attackDisMin = 11;
    if (has_attackdismin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attackdismin());
    }

    // required int32 attackDisLow = 12;
    if (has_attackdislow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attackdislow());
    }

    // required int32 attackDisUp = 13;
    if (has_attackdisup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attackdisup());
    }

    // optional int32 waitTime = 14;
    if (has_waittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->waittime());
    }

    // optional int32 lastTime = 15;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttime());
    }

    // optional int32 bulletSpeed = 16;
    if (has_bulletspeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bulletspeed());
    }

    // required .SkillShape shape = 20;
    if (has_shape()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shape());
    }

  }
  if (_has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    // required int32 damageCnt = 24;
    if (has_damagecnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damagecnt());
    }

    // optional int32 damagePer = 25;
    if (has_damageper()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damageper());
    }

    // optional int32 postSkill = 30;
    if (has_postskill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->postskill());
    }

    // optional int32 postTime = 31;
    if (has_posttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posttime());
    }

  }
  // repeated int32 enemyIds = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->enemyids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->enemyids(i));
    }
    total_size += 2 * this->enemyids_size() + data_size;
  }

  // repeated int32 enemyTypes = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->enemytypes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->enemytypes(i));
    }
    total_size += 2 * this->enemytypes_size() + data_size;
  }

  // repeated int32 buffIds = 23;
  {
    int data_size = 0;
    for (int i = 0; i < this->buffids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->buffids(i));
    }
    total_size += 2 * this->buffids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BFSkillCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BFSkillCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BFSkillCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BFSkillCfg::MergeFrom(const BFSkillCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  enemyids_.MergeFrom(from.enemyids_);
  enemytypes_.MergeFrom(from.enemytypes_);
  buffids_.MergeFrom(from.buffids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_triggertype()) {
      set_triggertype(from.triggertype());
    }
    if (from.has_castchecktype()) {
      set_castchecktype(from.castchecktype());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_skillcd()) {
      set_skillcd(from.skillcd());
    }
    if (from.has_cdteam()) {
      set_cdteam(from.cdteam());
    }
    if (from.has_affectcamp()) {
      set_affectcamp(from.affectcamp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attackdismin()) {
      set_attackdismin(from.attackdismin());
    }
    if (from.has_attackdislow()) {
      set_attackdislow(from.attackdislow());
    }
    if (from.has_attackdisup()) {
      set_attackdisup(from.attackdisup());
    }
    if (from.has_waittime()) {
      set_waittime(from.waittime());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_bulletspeed()) {
      set_bulletspeed(from.bulletspeed());
    }
    if (from.has_shape()) {
      mutable_shape()->::SkillShape::MergeFrom(from.shape());
    }
  }
  if (from._has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    if (from.has_damagecnt()) {
      set_damagecnt(from.damagecnt());
    }
    if (from.has_damageper()) {
      set_damageper(from.damageper());
    }
    if (from.has_postskill()) {
      set_postskill(from.postskill());
    }
    if (from.has_posttime()) {
      set_posttime(from.posttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BFSkillCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BFSkillCfg::CopyFrom(const BFSkillCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BFSkillCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x000447a1) != 0x000447a1) return false;

  if (has_shape()) {
    if (!this->shape().IsInitialized()) return false;
  }
  return true;
}

void BFSkillCfg::Swap(BFSkillCfg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(triggertype_, other->triggertype_);
    std::swap(castchecktype_, other->castchecktype_);
    std::swap(duration_, other->duration_);
    std::swap(skillcd_, other->skillcd_);
    std::swap(cdteam_, other->cdteam_);
    std::swap(affectcamp_, other->affectcamp_);
    std::swap(attackdismin_, other->attackdismin_);
    std::swap(attackdislow_, other->attackdislow_);
    std::swap(attackdisup_, other->attackdisup_);
    std::swap(waittime_, other->waittime_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(bulletspeed_, other->bulletspeed_);
    std::swap(shape_, other->shape_);
    enemyids_.Swap(&other->enemyids_);
    enemytypes_.Swap(&other->enemytypes_);
    buffids_.Swap(&other->buffids_);
    std::swap(damagecnt_, other->damagecnt_);
    std::swap(damageper_, other->damageper_);
    std::swap(postskill_, other->postskill_);
    std::swap(posttime_, other->posttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BFSkillCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BFSkillCfg_descriptor_;
  metadata.reflection = BFSkillCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BFBuffCfg::kIdFieldNumber;
const int BFBuffCfg::kTypeFieldNumber;
const int BFBuffCfg::kValueTypeFieldNumber;
const int BFBuffCfg::kDurationFieldNumber;
const int BFBuffCfg::kCreateUnitIdFieldNumber;
const int BFBuffCfg::kCreateUnitCntFieldNumber;
const int BFBuffCfg::kDmgCalcFieldNumber;
#endif  // !_MSC_VER

BFBuffCfg::BFBuffCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BFBuffCfg::InitAsDefaultInstance() {
}

BFBuffCfg::BFBuffCfg(const BFBuffCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BFBuffCfg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  valuetype_ = 0;
  duration_ = 0;
  createunitid_ = 0;
  createunitcnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BFBuffCfg::~BFBuffCfg() {
  SharedDtor();
}

void BFBuffCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BFBuffCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BFBuffCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BFBuffCfg_descriptor_;
}

const BFBuffCfg& BFBuffCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleCfg_2eproto();
  return *default_instance_;
}

BFBuffCfg* BFBuffCfg::default_instance_ = NULL;

BFBuffCfg* BFBuffCfg::New() const {
  return new BFBuffCfg;
}

void BFBuffCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    valuetype_ = 0;
    duration_ = 0;
    createunitid_ = 0;
    createunitcnt_ = 0;
  }
  dmgcalc_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BFBuffCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueType;
        break;
      }

      // required int32 valueType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valuetype_)));
          set_has_valuetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_duration;
        break;
      }

      // required int32 duration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_createUnitId;
        break;
      }

      // optional int32 createUnitId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createUnitId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &createunitid_)));
          set_has_createunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_createUnitCnt;
        break;
      }

      // optional int32 createUnitCnt = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createUnitCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &createunitcnt_)));
          set_has_createunitcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_dmgCalc;
        break;
      }

      // repeated .BuffDmgCalc dmgCalc = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dmgCalc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dmgcalc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_dmgCalc;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BFBuffCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 valueType = 3;
  if (has_valuetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->valuetype(), output);
  }

  // required int32 duration = 4;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->duration(), output);
  }

  // optional int32 createUnitId = 10;
  if (has_createunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->createunitid(), output);
  }

  // optional int32 createUnitCnt = 11;
  if (has_createunitcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->createunitcnt(), output);
  }

  // repeated .BuffDmgCalc dmgCalc = 20;
  for (int i = 0; i < this->dmgcalc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->dmgcalc(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BFBuffCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 valueType = 3;
  if (has_valuetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->valuetype(), target);
  }

  // required int32 duration = 4;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->duration(), target);
  }

  // optional int32 createUnitId = 10;
  if (has_createunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->createunitid(), target);
  }

  // optional int32 createUnitCnt = 11;
  if (has_createunitcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->createunitcnt(), target);
  }

  // repeated .BuffDmgCalc dmgCalc = 20;
  for (int i = 0; i < this->dmgcalc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->dmgcalc(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BFBuffCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 valueType = 3;
    if (has_valuetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valuetype());
    }

    // required int32 duration = 4;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional int32 createUnitId = 10;
    if (has_createunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->createunitid());
    }

    // optional int32 createUnitCnt = 11;
    if (has_createunitcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->createunitcnt());
    }

  }
  // repeated .BuffDmgCalc dmgCalc = 20;
  total_size += 2 * this->dmgcalc_size();
  for (int i = 0; i < this->dmgcalc_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dmgcalc(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BFBuffCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BFBuffCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BFBuffCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BFBuffCfg::MergeFrom(const BFBuffCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  dmgcalc_.MergeFrom(from.dmgcalc_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_valuetype()) {
      set_valuetype(from.valuetype());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_createunitid()) {
      set_createunitid(from.createunitid());
    }
    if (from.has_createunitcnt()) {
      set_createunitcnt(from.createunitcnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BFBuffCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BFBuffCfg::CopyFrom(const BFBuffCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BFBuffCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < dmgcalc_size(); i++) {
    if (!this->dmgcalc(i).IsInitialized()) return false;
  }
  return true;
}

void BFBuffCfg::Swap(BFBuffCfg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(valuetype_, other->valuetype_);
    std::swap(duration_, other->duration_);
    std::swap(createunitid_, other->createunitid_);
    std::swap(createunitcnt_, other->createunitcnt_);
    dmgcalc_.Swap(&other->dmgcalc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BFBuffCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BFBuffCfg_descriptor_;
  metadata.reflection = BFBuffCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffDmgCalc::kLevelFieldNumber;
const int BuffDmgCalc::kDmgParam1FieldNumber;
const int BuffDmgCalc::kDmgParam2FieldNumber;
const int BuffDmgCalc::kDmgParam3FieldNumber;
#endif  // !_MSC_VER

BuffDmgCalc::BuffDmgCalc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuffDmgCalc::InitAsDefaultInstance() {
}

BuffDmgCalc::BuffDmgCalc(const BuffDmgCalc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuffDmgCalc::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  dmgparam1_ = 0;
  dmgparam2_ = 0;
  dmgparam3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffDmgCalc::~BuffDmgCalc() {
  SharedDtor();
}

void BuffDmgCalc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffDmgCalc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffDmgCalc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffDmgCalc_descriptor_;
}

const BuffDmgCalc& BuffDmgCalc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleCfg_2eproto();
  return *default_instance_;
}

BuffDmgCalc* BuffDmgCalc::default_instance_ = NULL;

BuffDmgCalc* BuffDmgCalc::New() const {
  return new BuffDmgCalc;
}

void BuffDmgCalc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    dmgparam1_ = 0;
    dmgparam2_ = 0;
    dmgparam3_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffDmgCalc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_dmgParam1;
        break;
      }

      // required float dmgParam1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dmgParam1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dmgparam1_)));
          set_has_dmgparam1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_dmgParam2;
        break;
      }

      // required float dmgParam2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dmgParam2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dmgparam2_)));
          set_has_dmgparam2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_dmgParam3;
        break;
      }

      // required float dmgParam3 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dmgParam3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dmgparam3_)));
          set_has_dmgparam3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuffDmgCalc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required float dmgParam1 = 2;
  if (has_dmgparam1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->dmgparam1(), output);
  }

  // required float dmgParam2 = 3;
  if (has_dmgparam2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dmgparam2(), output);
  }

  // required float dmgParam3 = 4;
  if (has_dmgparam3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->dmgparam3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuffDmgCalc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required float dmgParam1 = 2;
  if (has_dmgparam1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->dmgparam1(), target);
  }

  // required float dmgParam2 = 3;
  if (has_dmgparam2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dmgparam2(), target);
  }

  // required float dmgParam3 = 4;
  if (has_dmgparam3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->dmgparam3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuffDmgCalc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required float dmgParam1 = 2;
    if (has_dmgparam1()) {
      total_size += 1 + 4;
    }

    // required float dmgParam2 = 3;
    if (has_dmgparam2()) {
      total_size += 1 + 4;
    }

    // required float dmgParam3 = 4;
    if (has_dmgparam3()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffDmgCalc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffDmgCalc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffDmgCalc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffDmgCalc::MergeFrom(const BuffDmgCalc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_dmgparam1()) {
      set_dmgparam1(from.dmgparam1());
    }
    if (from.has_dmgparam2()) {
      set_dmgparam2(from.dmgparam2());
    }
    if (from.has_dmgparam3()) {
      set_dmgparam3(from.dmgparam3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffDmgCalc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffDmgCalc::CopyFrom(const BuffDmgCalc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffDmgCalc::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void BuffDmgCalc::Swap(BuffDmgCalc* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(dmgparam1_, other->dmgparam1_);
    std::swap(dmgparam2_, other->dmgparam2_);
    std::swap(dmgparam3_, other->dmgparam3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffDmgCalc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffDmgCalc_descriptor_;
  metadata.reflection = BuffDmgCalc_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
